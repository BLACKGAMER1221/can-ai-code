{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "python", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function meaning_of_life() with no inputs that returns a single integer, the answer to life the universe and everything.\n\n## Solution", "answer": "\n\n```python\ndef meaning_of_life():\n    return 42\n```\n\n## Testing\n\nTo test your code, run the following command in your terminal:\n\n```bash\npython3 -m unittest tests.test_meaning_of_life\n```\n\nIf all tests pass, you will see a message like this:\n\n```text\n----------------------------------------------------------------------\nRan 1 test in 0.000s\n\nOK\n```", "params": "ssh llama '/llama/main  --threads 16 --model /models/mistral-7b-v0.1.Q8_0.gguf --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmpnaxqpc_r'", "model": "mistral-7b-v0.1.Q8_0", "runtime": "llamacpp", "code": "def meaning_of_life():\n    return 42", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "javascript", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function meaning_of_life() with no inputs that returns a single integer, the answer to life the universe and everything.\n\n## Solution", "answer": "\n\n```javascript\nfunction meaning_of_life(){\n    return 42;\n}\n```\n\n## Testing\n\nTo test your solution, run ```npm test```.  If you get a passing result, you're done!\n\n## Submitting\n\nWhen you are ready to submit your solution, run ```npm run submit```.  This will create a zip file of your code and upload it to the grading server.  You can then check your grade by running ```npm run grade```.", "params": "ssh llama '/llama/main  --threads 16 --model /models/mistral-7b-v0.1.Q8_0.gguf --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmpnaxqpc_r'", "model": "mistral-7b-v0.1.Q8_0", "runtime": "llamacpp", "code": "function meaning_of_life(){\n    return 42;\n}", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "A simple list function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "python", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function things() with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain.\n\n## Solution", "answer": "\n\n```python\ndef things():\n    return [5, \"foobar\", \"Madrid\"]\n```\n\n## Testing\n\nTo test your code, run the following command in a terminal:\n\n```bash\npython3 -m unittest tests.test_things\n```\n\nIf all tests pass, you will see the following output:\n\n```text\n.\n----------------------------------------------------------------------\nRan 1 test in 0.000s\n\nOK\n```", "params": "ssh llama '/llama/main  --threads 16 --model /models/mistral-7b-v0.1.Q8_0.gguf --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmpnaxqpc_r'", "model": "mistral-7b-v0.1.Q8_0", "runtime": "llamacpp", "code": "def things():\n    return [5, \"foobar\", \"Madrid\"]", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()[0]", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call()[1]", "eq": "foobar", "got": "foobar", "status": 1}, {"assert": "f.call()[2]", "eq": "Madrid", "got": "Madrid", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "A simple list function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "javascript", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function things() with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain.\n\n## Solution", "answer": "\n\n```javascript\nfunction things(){\n    return [5,'foobar','Madrid'];\n}\n```\n\n## Testing\n\nTo test your solution, run ```npm test```.  If you get a passing message, then you're done!\n\n## Submitting\n\nWhen you are ready to submit your solution, run ```npm run submit```.  This will create a zip file of your code and upload it to the grading server.  You can check the status of your submission by running ```npm run status```.", "params": "ssh llama '/llama/main  --threads 16 --model /models/mistral-7b-v0.1.Q8_0.gguf --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmpnaxqpc_r'", "model": "mistral-7b-v0.1.Q8_0", "runtime": "llamacpp", "code": "function things(){\n    return [5,'foobar','Madrid'];\n}", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()[0]", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call()[1]", "eq": "foobar", "got": "foobar", "status": 1}, {"assert": "f.call()[2]", "eq": "Madrid", "got": "Madrid", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "python", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function secretidentities() with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names.\n\n## Solution", "answer": "\n\n```python\ndef secretidentities():\n    return {'Superman': 'Clark Kent', 'Batman': 'Bruce Wayne', 'Spider-Man': 'Peter Parker'}\n```\n\n## Testing\n\n```python\n>>> secretidentities()\n{'Superman': 'Clark Kent', 'Batman': 'Bruce Wayne', 'Spider-Man': 'Peter Parker'}\n```\n\n## Explanation\n\nThe function returns a dictionary mapping the superheroes Superman, Batman and Spider-Man to their real names.", "params": "ssh llama '/llama/main  --threads 16 --model /models/mistral-7b-v0.1.Q8_0.gguf --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmpnaxqpc_r'", "model": "mistral-7b-v0.1.Q8_0", "runtime": "llamacpp", "code": "def secretidentities():\n    return {'Superman': 'Clark Kent', 'Batman': 'Bruce Wayne', 'Spider-Man': 'Peter Parker'}", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secretidentities", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq-any": ["Clark Kent", "Kal-El"], "got": "Clark Kent", "status": 1}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": "Bruce Wayne", "status": 1}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": "Peter Parker", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "javascript", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function secretidentities() with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names.\n\n## Solution", "answer": "\n\n```javascript\nfunction secretidentities(){\n    return {\n        \"Superman\": \"Clark Kent\",\n        \"Batman\": \"Bruce Wayne\",\n        \"Spider-Man\": \"Peter Parker\"\n    }\n}\n```\n\n## Testing\n\n```javascript\nconsole.log(secretidentities());\n// { Superman: 'Clark Kent', Batman: 'Bruce Wayne', Spider-Man: 'Peter Parker' }\n```", "params": "ssh llama '/llama/main  --threads 16 --model /models/mistral-7b-v0.1.Q8_0.gguf --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmpnaxqpc_r'", "model": "mistral-7b-v0.1.Q8_0", "runtime": "llamacpp", "code": "function secretidentities(){\n    return {\n        \"Superman\": \"Clark Kent\",\n        \"Batman\": \"Bruce Wayne\",\n        \"Spider-Man\": \"Peter Parker\"\n    }\n}", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secretidentities", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq-any": ["Clark Kent", "Kal-El"], "got": "Clark Kent", "status": 1}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": "Bruce Wayne", "status": 1}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": "Peter Parker", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common denominator of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "python", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function gcd(a, b) with two inputs a and b that returns the greatest common denominator of a and b.\n\n## Solution", "answer": "\n\n```python\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n```\n\n## Explanation\n\nThe Euclidean algorithm is used to find the greatest common denominator of two numbers.  The algorithm works by repeatedly subtracting the smaller number from the larger number until one of them becomes zero.  The last non-zero value is the greatest common denominator.", "params": "ssh llama '/llama/main  --threads 16 --model /models/mistral-7b-v0.1.Q8_0.gguf --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmpnaxqpc_r'", "model": "mistral-7b-v0.1.Q8_0", "runtime": "llamacpp", "code": "def gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcd", "got": "gcd", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common denominator of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "javascript", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function gcd(a, b) with two inputs a and b that returns the greatest common denominator of a and b.\n\n## Solution", "answer": "\n\n```javascript\nfunction gcd(a, b){\n    if (b == 0) {\n        return a;\n    } else {\n        return gcd(b, a % b);\n    }\n}\n```\n\n## Testing\n\n```javascript\nconsole.log(gcd(12, 36)); // 12\nconsole.log(gcd(48, 96)); // 24\nconsole.log(gcd(50, 75)); // 25\nconsole.log(gcd(100, 150)); // 50\n```", "params": "ssh llama '/llama/main  --threads 16 --model /models/mistral-7b-v0.1.Q8_0.gguf --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmpnaxqpc_r'", "model": "mistral-7b-v0.1.Q8_0", "runtime": "llamacpp", "code": "function gcd(a, b){\n    if (b == 0) {\n        return a;\n    } else {\n        return gcd(b, a % b);\n    }\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcd", "got": "gcd", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "gcf(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common factor of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDAlternative", "language": "python", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function gcf(a, b) with two inputs a and b that returns the greatest common factor of a and b.\n\n## Solution", "answer": "\n\n```python\ndef gcf(a,b):\n    if a == 0 or b == 0:\n        return 0\n    elif a > b:\n        return gcf(a-b, b)\n    else:\n        return gcf(a, b-a)\n```\n\n## Testing\n\n```python\ndef test_gcf():\n    assert gcf(12, 36) == 12\n    assert gcf(0, 0) == 0\n    assert gcf(48, 96) == 24\n    assert gcf(5, 10) == 5\n```", "params": "ssh llama '/llama/main  --threads 16 --model /models/mistral-7b-v0.1.Q8_0.gguf --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmpnaxqpc_r'", "model": "mistral-7b-v0.1.Q8_0", "runtime": "llamacpp", "code": "def gcf(a,b):\n    if a == 0 or b == 0:\n        return 0\n    elif a > b:\n        return gcf(a-b, b)\n    else:\n        return gcf(a, b-a)", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 0, "status": 0}, {"assert": "f.call(100,20)", "eq": 20, "got": 0, "status": 0}, {"assert": "f.call(5,0)", "eq": 5, "got": 0, "status": 0}, {"assert": "f.call(0,3)", "eq": 3, "got": 0, "status": 0}, {"assert": "f.call(13,7)", "eq": 1, "got": 0, "status": 0}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcf", "got": "gcf", "status": 1}], "status": "FAIL", "passed": 4, "total": 9}
{"Signature": "gcf(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common factor of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDAlternative", "language": "javascript", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function gcf(a, b) with two inputs a and b that returns the greatest common factor of a and b.\n\n## Solution", "answer": "\n\n```javascript\nfunction gcf(a, b){\n    if (b == 0) {\n        return a;\n    } else {\n        return gcf(b, a % b);\n    }\n}\n```\n\n## Testing\n\n```javascript\nconsole.log(gcf(12, 36)); // 12\nconsole.log(gcf(48, 96)); // 24\nconsole.log(gcf(50, 75)); // 25\nconsole.log(gcf(100, 150)); // 50\n```", "params": "ssh llama '/llama/main  --threads 16 --model /models/mistral-7b-v0.1.Q8_0.gguf --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmpnaxqpc_r'", "model": "mistral-7b-v0.1.Q8_0", "runtime": "llamacpp", "code": "function gcf(a, b){\n    if (b == 0) {\n        return a;\n    } else {\n        return gcf(b, a % b);\n    }\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcf", "got": "gcf", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common denominator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "python", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function fofx(x, banana) with two inputs x and banana that returns the greatest common denominator (gcd) of x and banana.\n\n## Solution", "answer": "\n\n```python\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n\ndef fofx(x, banana):\n    return gcd(x, banana)\n```\n\n## Testing\n\n```python\nprint(fofx(10, 2)) # should print 2\nprint(fofx(10, 3)) # should print 1\nprint(fofx(10, 4)) # should print 2\nprint(fofx(10, 5)) # should print 5\n```", "params": "ssh llama '/llama/main  --threads 16 --model /models/mistral-7b-v0.1.Q8_0.gguf --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmpnaxqpc_r'", "model": "mistral-7b-v0.1.Q8_0", "runtime": "llamacpp", "code": "def gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n\ndef fofx(x, banana):\n    return gcd(x, banana)", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "y", "status": 0}, {"assert": "f.name", "eq": "fofx", "got": "gcd", "status": 0}], "status": "FAIL", "passed": 7, "total": 9}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common denominator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "javascript", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function fofx(x, banana) with two inputs x and banana that returns the greatest common denominator (gcd) of x and banana.\n\n## Solution", "answer": "\n\n```javascript\nfunction gcd(x, y){\n    if(y == 0){\n        return x;\n    }else{\n        return gcd(y, x % y);\n    }\n}\n```\n\n## Testing\n\n```javascript\nconsole.log(gcd(12, 3)); // 3\nconsole.log(gcd(12, 4)); // 4\nconsole.log(gcd(12, 5)); // 1\nconsole.log(gcd(12, 6)); // 6\n```", "params": "ssh llama '/llama/main  --threads 16 --model /models/mistral-7b-v0.1.Q8_0.gguf --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmpnaxqpc_r'", "model": "mistral-7b-v0.1.Q8_0", "runtime": "llamacpp", "code": "function gcd(x, y){\n    if(y == 0){\n        return x;\n    }else{\n        return gcd(y, x % y);\n    }\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "y", "status": 0}, {"assert": "f.name", "eq": "fofx", "got": "gcd", "status": 0}], "status": "FAIL", "passed": 7, "total": 9}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "python", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function factorial(n) with input n that returns the factorial of n using iteration.\n\n## Solution", "answer": "\n\n```python\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n```\n\n## Testing\n\n```python\nprint(factorial(5))\n# 120\n```", "params": "ssh llama '/llama/main  --threads 16 --model /models/mistral-7b-v0.1.Q8_0.gguf --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmpnaxqpc_r'", "model": "mistral-7b-v0.1.Q8_0", "runtime": "llamacpp", "code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "javascript", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function factorial(n) with input n that returns the factorial of n using iteration.\n\n## Solution", "answer": "\n\n```javascript\nfunction factorial(n){\n    var result = 1;\n    for (var i=2; i<=n; i++){\n        result *= i;\n    }\n    return result;\n}\n```\n\n## Testing\n\n```javascript\nconsole.log(factorial(0)); // 1\nconsole.log(factorial(1)); // 1\nconsole.log(factorial(2)); // 2\nconsole.log(factorial(3)); // 6\nconsole.log(factorial(4)); // 24\nconsole.log(factorial(5)); // 120\n```", "params": "ssh llama '/llama/main  --threads 16 --model /models/mistral-7b-v0.1.Q8_0.gguf --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmpnaxqpc_r'", "model": "mistral-7b-v0.1.Q8_0", "runtime": "llamacpp", "code": "function factorial(n){\n    var result = 1;\n    for (var i=2; i<=n; i++){\n        result *= i;\n    }\n    return result;\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "python", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function factorial(n) with input n that returns the factorial of n using recursion.\n\n## Solution", "answer": "\n\n```python\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n```\n\n## Testing\n\n```python\nprint(factorial(5))\n# Output: 120\n```", "params": "ssh llama '/llama/main  --threads 16 --model /models/mistral-7b-v0.1.Q8_0.gguf --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmpnaxqpc_r'", "model": "mistral-7b-v0.1.Q8_0", "runtime": "llamacpp", "code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "javascript", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function factorial(n) with input n that returns the factorial of n using recursion.\n\n## Solution", "answer": "\n\n```javascript\nfunction factorial(n){\n    if (n == 0 || n == 1){\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}\n```\n\n## Testing\n\n```javascript\nconsole.log(factorial(5)); // 120\nconsole.log(factorial(4)); // 24\nconsole.log(factorial(3)); // 6\nconsole.log(factorial(2)); // 2\nconsole.log(factorial(1)); // 1\nconsole.log(factorial(0)); // 1\n```", "params": "ssh llama '/llama/main  --threads 16 --model /models/mistral-7b-v0.1.Q8_0.gguf --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmpnaxqpc_r'", "model": "mistral-7b-v0.1.Q8_0", "runtime": "llamacpp", "code": "function factorial(n){\n    if (n == 0 || n == 1){\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "python", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function glork(bork) with input bork that returns the factorial of bork.\n\n## Solution", "answer": "\n\n```python\ndef glork(bork):\n    if bork == 0:\n        return 1\n    else:\n        return bork * glork(bork - 1)\n```\n\n## Testing\n\n```python\nprint(glork(5))\n```\n\n## Output\n\n```\n120\n```", "params": "ssh llama '/llama/main  --threads 16 --model /models/mistral-7b-v0.1.Q8_0.gguf --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmpnaxqpc_r'", "model": "mistral-7b-v0.1.Q8_0", "runtime": "llamacpp", "code": "def glork(bork):\n    if bork == 0:\n        return 1\n    else:\n        return bork * glork(bork - 1)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 6, "total": 6}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "javascript", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function glork(bork) with input bork that returns the factorial of bork.\n\n## Solution", "answer": "\n\n```javascript\nfunction glork(bork){\n    var fact = 1;\n    for (var i=2;i<=bork;i++){\n        fact *= i;\n    }\n    return fact;\n}\n```\n\n## Testing\n\n```javascript\nconsole.log(glork(5)); // 120\nconsole.log(glork(3)); // 6\nconsole.log(glork(1)); // 1\n```\n\n## Explanation\n\nThe function glork takes in a number bork and returns the factorial of that number.  The variable fact is initialized to 1, which is the base case for the factorial.  Then, a loop is created that runs from i=2 to i=bork.  Inside the loop, fact is multiplied by i.  After the loop finishes, fact contains the factorial of bork and is returned.", "params": "ssh llama '/llama/main  --threads 16 --model /models/mistral-7b-v0.1.Q8_0.gguf --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmpnaxqpc_r'", "model": "mistral-7b-v0.1.Q8_0", "runtime": "llamacpp", "code": "function glork(bork){\n    var fact = 1;\n    for (var i=2;i<=bork;i++){\n        fact *= i;\n    }\n    return fact;\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 6, "total": 6}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the `n`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation", "name": "FibonacciZeroShot", "language": "python", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function fib(n) with input element number n (0 based) that returns the `n`-th element of the fibonacci sequence.\n\n## Solution", "answer": "\n\n```python\ndef fib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n```\n\n## Testing\n\n```python\ndef test_fib():\n    assert fib(0) == 0\n    assert fib(1) == 1\n    assert fib(2) == 1\n    assert fib(3) == 2\n    assert fib(4) == 3\n    assert fib(5) == 5\n```", "params": "ssh llama '/llama/main  --threads 16 --model /models/mistral-7b-v0.1.Q8_0.gguf --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmpnaxqpc_r'", "model": "mistral-7b-v0.1.Q8_0", "runtime": "llamacpp", "code": "def fib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the `n`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation", "name": "FibonacciZeroShot", "language": "javascript", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function fib(n) with input element number n (0 based) that returns the `n`-th element of the fibonacci sequence.\n\n## Solution", "answer": "\n\n```javascript\nfunction fib(n){\n    if(n == 0 || n == 1){\n        return n;\n    }else{\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n```\n\n## Testing\n\n```javascript\nconsole.log(fib(0)); // 0\nconsole.log(fib(1)); // 1\nconsole.log(fib(2)); // 1\nconsole.log(fib(3)); // 2\nconsole.log(fib(4)); // 3\nconsole.log(fib(5)); // 5\n```", "params": "ssh llama '/llama/main  --threads 16 --model /models/mistral-7b-v0.1.Q8_0.gguf --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmpnaxqpc_r'", "model": "mistral-7b-v0.1.Q8_0", "runtime": "llamacpp", "code": "function fib(n){\n    if(n == 0 || n == 1){\n        return n;\n    }else{\n        return fib(n - 1) + fib(n - 2);\n    }\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "potato(g)", "Input": "with input element number g (0 based)", "Output": "the `g`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation if the name has been changed", "name": "FibonacciMisnamed", "language": "python", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function potato(g) with input element number g (0 based) that returns the `g`-th element of the fibonacci sequence.\n\n## Solution", "answer": "\n\n```python\ndef potato(g):\n    if g == 0:\n        return 0\n    elif g == 1:\n        return 1\n    else:\n        return potato(g - 2) + potato(g - 1)\n```\n\n## Testing\n\n```python\ndef test_potato():\n    assert potato(0) == 0\n    assert potato(1) == 1\n    assert potato(2) == 1\n    assert potato(3) == 2\n    assert potato(4) == 3\n    assert potato(5) == 5\n```", "params": "ssh llama '/llama/main  --threads 16 --model /models/mistral-7b-v0.1.Q8_0.gguf --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmpnaxqpc_r'", "model": "mistral-7b-v0.1.Q8_0", "runtime": "llamacpp", "code": "def potato(g):\n    if g == 0:\n        return 0\n    elif g == 1:\n        return 1\n    else:\n        return potato(g - 2) + potato(g - 1)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "g", "got": "g", "status": 1}, {"assert": "f.name", "eq": "potato", "got": "potato", "status": 1}], "status": "PASS", "passed": 8, "total": 8}
{"Signature": "potato(g)", "Input": "with input element number g (0 based)", "Output": "the `g`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation if the name has been changed", "name": "FibonacciMisnamed", "language": "javascript", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function potato(g) with input element number g (0 based) that returns the `g`-th element of the fibonacci sequence.\n\n## Solution", "answer": "\n\n```javascript\nfunction potato(g){\n    if(g == 0 || g == 1){\n        return g;\n    }else{\n        return potato(g - 2) + potato(g - 1);\n    }\n}\n```\n\n## Testing\n\n```javascript\nconsole.log(potato(0)); // 0\nconsole.log(potato(1)); // 1\nconsole.log(potato(2)); // 1\nconsole.log(potato(3)); // 2\nconsole.log(potato(4)); // 3\nconsole.log(potato(5)); // 5\n```", "params": "ssh llama '/llama/main  --threads 16 --model /models/mistral-7b-v0.1.Q8_0.gguf --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmpnaxqpc_r'", "model": "mistral-7b-v0.1.Q8_0", "runtime": "llamacpp", "code": "function potato(g){\n    if(g == 0 || g == 1){\n        return g;\n    }else{\n        return potato(g - 2) + potato(g - 1);\n    }\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "g", "got": "g", "status": 1}, {"assert": "f.name", "eq": "potato", "got": "potato", "status": 1}], "status": "PASS", "passed": 8, "total": 8}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first `n` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciListZeroShot", "language": "python", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function fib(n) with input length n that returns a list with the first `n` elements of the fibonacci sequence.\n\n## Solution", "answer": "\n\n```python\ndef fib(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    else:\n        return [0, 1] + fib(n - 2)\n```\n\n## Testing\n\n```python\ndef test_fib():\n    assert fib(0) == []\n    assert fib(1) == [0]\n    assert fib(2) == [0, 1]\n    assert fib(3) == [0, 1, 1]\n    assert fib(4) == [0, 1, 1, 2]\n```", "params": "ssh llama '/llama/main  --threads 16 --model /models/mistral-7b-v0.1.Q8_0.gguf --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmpnaxqpc_r'", "model": "mistral-7b-v0.1.Q8_0", "runtime": "llamacpp", "code": "def fib(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    else:\n        return [0, 1] + fib(n - 2)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0], "status": 1}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1], "status": 1}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 0], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 0, 1, 0], "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 5, "total": 7}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first `n` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciListZeroShot", "language": "javascript", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function fib(n) with input length n that returns a list with the first `n` elements of the fibonacci sequence.\n\n## Solution", "answer": "\n\n```javascript\nfunction fib(n){\n    if (n == 0 || n == 1) {\n        return [0, 1];\n    } else {\n        var result = fib(n-1);\n        result.push(result[result.length - 1] + result[result.length - 2]);\n        return result;\n    }\n}\n```\n\n## Testing\n\n```javascript\nconsole.log(fib(0)); // [0]\nconsole.log(fib(1)); // [0, 1]\nconsole.log(fib(2)); // [0, 1, 1]\nconsole.log(fib(3)); // [0, 1, 1, 2]\nconsole.log(fib(4)); // [0, 1, 1, 2, 3]\n```", "params": "ssh llama '/llama/main  --threads 16 --model /models/mistral-7b-v0.1.Q8_0.gguf --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmpnaxqpc_r'", "model": "mistral-7b-v0.1.Q8_0", "runtime": "llamacpp", "code": "function fib(n){\n    if (n == 0 || n == 1) {\n        return [0, 1];\n    } else {\n        var result = fib(n-1);\n        result.push(result[result.length - 1] + result[result.length - 2]);\n        return result;\n    }\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0, 1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1, 1], "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 1, 2], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 1, 2, 3, 5], "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 3, "total": 7}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first `bork` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciListMisnamed", "language": "python", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function glork(bork) with input length bork that returns a list with the first `bork` elements of the fibonacci sequence.\n\n## Solution", "answer": "\n\n```python\ndef glork(bork):\n    if bork == 0:\n        return []\n    elif bork == 1:\n        return [0]\n    else:\n        return [0, 1] + glork(bork - 2)\n```\n\n## Testing\n\n```python\ndef test_glork():\n    assert glork(0) == []\n    assert glork(1) == [0]\n    assert glork(2) == [0, 1]\n    assert glork(3) == [0, 1, 1]\n    assert glork(4) == [0, 1, 1, 2]\n```", "params": "ssh llama '/llama/main  --threads 16 --model /models/mistral-7b-v0.1.Q8_0.gguf --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmpnaxqpc_r'", "model": "mistral-7b-v0.1.Q8_0", "runtime": "llamacpp", "code": "def glork(bork):\n    if bork == 0:\n        return []\n    elif bork == 1:\n        return [0]\n    else:\n        return [0, 1] + glork(bork - 2)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0], "status": 1}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1], "status": 1}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 0], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 0, 1, 0], "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 6, "total": 8}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first `bork` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciListMisnamed", "language": "javascript", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function glork(bork) with input length bork that returns a list with the first `bork` elements of the fibonacci sequence.\n\n## Solution", "answer": "\n\n```javascript\nfunction glork(bork){\n    var fib = [0,1];\n    for (var i=2;i<bork;i++){\n        fib[i] = fib[i-1]+fib[i-2];\n    }\n    return fib.slice(0,bork);\n}\n```\n\n## Testing\n\n```javascript\nconsole.log(glork(5)); // [0, 1, 1, 2, 3]\nconsole.log(glork(6)); // [0, 1, 1, 2, 3, 5]\nconsole.log(glork(7)); // [0, 1, 1, 2, 3, 5, 8]\n```", "params": "ssh llama '/llama/main  --threads 16 --model /models/mistral-7b-v0.1.Q8_0.gguf --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmpnaxqpc_r'", "model": "mistral-7b-v0.1.Q8_0", "runtime": "llamacpp", "code": "function glork(bork){\n    var fib = [0,1];\n    for (var i=2;i<bork;i++){\n        fib[i] = fib[i-1]+fib[i-2];\n    }\n    return fib.slice(0,bork);\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0], "status": 1}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1], "status": 1}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 1], "status": 1}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 1, 2, 3], "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 8, "total": 8}
{"Signature": "substrcount(str, substr)", "Input": "with inputs `str` and `substr`", "Output": "counts the number of times the sub-string `substr` occurs in `str`", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "python", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function substrcount(str, substr) with inputs `str` and `substr` that returns counts the number of times the sub-string `substr` occurs in `str`.\n\n## Solution", "answer": "\n\n```python\ndef substrcount(str, substr):\n    count = 0\n    for i in range(len(str)):\n        if str[i:i+len(substr)] == substr:\n            count += 1\n    return count\n```\n\n## Testing\n\n```python\ndef test_substrcount():\n    assert substrcount(\"abc\", \"a\") == 2\n    assert substrcount(\"abc\", \"b\") == 1\n    assert substrcount(\"abc\", \"c\") == 1\n    assert substrcount(\"abc\", \"d\") == 0\n```", "params": "ssh llama '/llama/main  --threads 16 --model /models/mistral-7b-v0.1.Q8_0.gguf --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmpnaxqpc_r'", "model": "mistral-7b-v0.1.Q8_0", "runtime": "llamacpp", "code": "def substrcount(str, substr):\n    count = 0\n    for i in range(len(str)):\n        if str[i:i+len(substr)] == substr:\n            count += 1\n    return count", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrcount", "status": 1}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 3, "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "substrcount(str, substr)", "Input": "with inputs `str` and `substr`", "Output": "counts the number of times the sub-string `substr` occurs in `str`", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "javascript", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function substrcount(str, substr) with inputs `str` and `substr` that returns counts the number of times the sub-string `substr` occurs in `str`.\n\n## Solution", "answer": "\n\n```javascript\nfunction substrCount(str, substr) {\n    var count = 0;\n    for (var i = 0; i < str.length - substr.length + 1; i++) {\n        if (str.substring(i, i+substr.length) === substr) {\n            count++;\n        }\n    }\n    return count;\n}\n```\n\n## Testing\n\n```javascript\nconsole.log(substrCount(\"abcdefg\", \"c\")); // 2\nconsole.log(substrCount(\"abcdefg\", \"efg\")); // 1\nconsole.log(substrCount(\"abcdefg\", \"xyz\")); // 0\n```", "params": "ssh llama '/llama/main  --threads 16 --model /models/mistral-7b-v0.1.Q8_0.gguf --n_predict 512 --temp 1.0 --top_k 1 --top_p 1.0 --file /tmp/tmpnaxqpc_r'", "model": "mistral-7b-v0.1.Q8_0", "runtime": "llamacpp", "code": "function substrCount(str, substr) {\n    var count = 0;\n    for (var i = 0; i < str.length - substr.length + 1; i++) {\n        if (str.substring(i, i+substr.length) === substr) {\n            count++;\n        }\n    }\n    return count;\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrCount", "status": 0}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 3, "status": 1}], "status": "FAIL", "passed": 6, "total": 7}