{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "python", "prompt": "When asked to write code, return only the requested function enclosed in a ``` delimited code block. Write a python function meaning_of_life() with no inputs that returns a single integer, the answer to life the universe and everything", "answer": "\n```\ndef meaning_of_life():\n    return 42\n```", "params": {"temperature": 0.7, "max_tokens": 512, "k": 40, "p": 0.1, "frequency_penalty": 0.17599999999999993}, "model": "cohere/command-nightly"}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "javascript", "prompt": "When asked to write code, return only the requested function enclosed in a ``` delimited code block. Write a javascript function meaning_of_life() with no inputs that returns a single integer, the answer to life the universe and everything", "answer": "\n```javascript\nfunction meaning_of_life() {\n  return 42;\n}\n```", "params": {"temperature": 0.7, "max_tokens": 512, "k": 40, "p": 0.1, "frequency_penalty": 0.17599999999999993}, "model": "cohere/command-nightly"}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "List function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "python", "prompt": "When asked to write code, return only the requested function enclosed in a ``` delimited code block. Write a python function things() with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain", "answer": "\n```python\ndef things():\n    return [5, \"foobar\", \"Madrid\"]\n```", "params": {"temperature": 0.7, "max_tokens": 512, "k": 40, "p": 0.1, "frequency_penalty": 0.17599999999999993}, "model": "cohere/command-nightly"}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "List function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "javascript", "prompt": "When asked to write code, return only the requested function enclosed in a ``` delimited code block. Write a javascript function things() with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain", "answer": "\n```javascript\nfunction things() {\n  return [5, \"foobar\", \"Madrid\"];\n}\n```", "params": {"temperature": 0.7, "max_tokens": 512, "k": 40, "p": 0.1, "frequency_penalty": 0.17599999999999993}, "model": "cohere/command-nightly"}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "python", "prompt": "When asked to write code, return only the requested function enclosed in a ``` delimited code block. Write a python function secretidentities() with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "answer": "\n```python\ndef secretidentities():\n    return {'Superman': 'Clark Kent', 'Batman': 'Bruce Wayne', 'Spider-Man': 'Peter Parker'}\n```", "params": {"temperature": 0.7, "max_tokens": 512, "k": 40, "p": 0.1, "frequency_penalty": 0.17599999999999993}, "model": "cohere/command-nightly"}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "javascript", "prompt": "When asked to write code, return only the requested function enclosed in a ``` delimited code block. Write a javascript function secretidentities() with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "answer": "\n```javascript\nfunction secretidentities() {\n  return {\n    Superman: \"Clark Kent\",\n    Batman: \"Bruce Wayne\",\n    Spider-Man: \"Peter Parker\"\n  };\n}\n```", "params": {"temperature": 0.7, "max_tokens": 512, "k": 40, "p": 0.1, "frequency_penalty": 0.17599999999999993}, "model": "cohere/command-nightly"}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common demoninator (gcd) of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "python", "prompt": "When asked to write code, return only the requested function enclosed in a ``` delimited code block. Write a python function gcd(a, b) with two inputs a and b that returns the greatest common demoninator (gcd) of a and b", "answer": "\n```python\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n```", "params": {"temperature": 0.7, "max_tokens": 512, "k": 40, "p": 0.1, "frequency_penalty": 0.17599999999999993}, "model": "cohere/command-nightly"}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common demoninator (gcd) of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "javascript", "prompt": "When asked to write code, return only the requested function enclosed in a ``` delimited code block. Write a javascript function gcd(a, b) with two inputs a and b that returns the greatest common demoninator (gcd) of a and b", "answer": "\n```javascript\nfunction gcd(a, b) {\n  if (a === 0) {\n    return b;\n  }\n  return gcd(b % a, a);\n}\n```", "params": {"temperature": 0.7, "max_tokens": 512, "k": 40, "p": 0.1, "frequency_penalty": 0.17599999999999993}, "model": "cohere/command-nightly"}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common demoninator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "python", "prompt": "When asked to write code, return only the requested function enclosed in a ``` delimited code block. Write a python function fofx(x, banana) with two inputs x and banana that returns the greatest common demoninator (gcd) of x and banana", "answer": "\n```python\ndef fofx(x, banana):\n    return gcd(x, banana)\n```", "params": {"temperature": 0.7, "max_tokens": 512, "k": 40, "p": 0.1, "frequency_penalty": 0.17599999999999993}, "model": "cohere/command-nightly"}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common demoninator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "javascript", "prompt": "When asked to write code, return only the requested function enclosed in a ``` delimited code block. Write a javascript function fofx(x, banana) with two inputs x and banana that returns the greatest common demoninator (gcd) of x and banana", "answer": "\n```javascript\nfunction fofx(x, banana) {\n    return Math.abs(x, banana)\n}\n```", "params": {"temperature": 0.7, "max_tokens": 512, "k": 40, "p": 0.1, "frequency_penalty": 0.17599999999999993}, "model": "cohere/command-nightly"}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "python", "prompt": "When asked to write code, return only the requested function enclosed in a ``` delimited code block. Write a python function factorial(n) with input n that returns the factorial of n using iteration", "answer": "\n```python\ndef factorial(n):\n    res = 1\n    for i in range(1, n + 1):\n        res *= i\n    return res\n```", "params": {"temperature": 0.7, "max_tokens": 512, "k": 40, "p": 0.1, "frequency_penalty": 0.17599999999999993}, "model": "cohere/command-nightly"}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "javascript", "prompt": "When asked to write code, return only the requested function enclosed in a ``` delimited code block. Write a javascript function factorial(n) with input n that returns the factorial of n using iteration", "answer": "\n```javascript\nfunction factorial(n) {\n  var factorial = 1;\n  for (var i = 1; i <= n; i++) {\n    factorial = factorial * i;\n  }\n  return factorial;\n}\n```", "params": {"temperature": 0.7, "max_tokens": 512, "k": 40, "p": 0.1, "frequency_penalty": 0.17599999999999993}, "model": "cohere/command-nightly"}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "python", "prompt": "When asked to write code, return only the requested function enclosed in a ``` delimited code block. Write a python function factorial(n) with input n that returns the factorial of n using recursion", "answer": "\n```python\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n```", "params": {"temperature": 0.7, "max_tokens": 512, "k": 40, "p": 0.1, "frequency_penalty": 0.17599999999999993}, "model": "cohere/command-nightly"}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "javascript", "prompt": "When asked to write code, return only the requested function enclosed in a ``` delimited code block. Write a javascript function factorial(n) with input n that returns the factorial of n using recursion", "answer": "\n```javascript\nfunction factorial(n) {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n```", "params": {"temperature": 0.7, "max_tokens": 512, "k": 40, "p": 0.1, "frequency_penalty": 0.17599999999999993}, "model": "cohere/command-nightly"}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "python", "prompt": "When asked to write code, return only the requested function enclosed in a ``` delimited code block. Write a python function glork(bork) with input bork that returns the factorial of bork", "answer": "\n```\ndef glork(bork):\n    return factorial(bork)\n```", "params": {"temperature": 0.7, "max_tokens": 512, "k": 40, "p": 0.1, "frequency_penalty": 0.17599999999999993}, "model": "cohere/command-nightly"}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "javascript", "prompt": "When asked to write code, return only the requested function enclosed in a ``` delimited code block. Write a javascript function glork(bork) with input bork that returns the factorial of bork", "answer": "\n```javascript\nfunction glork(bork) {\n  return bork * factorial(bork - 1);\n}\n\nfunction factorial(n) {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n```", "params": {"temperature": 0.7, "max_tokens": 512, "k": 40, "p": 0.1, "frequency_penalty": 0.17599999999999993}, "model": "cohere/command-nightly"}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the n-th element of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciZeroShot", "language": "python", "prompt": "When asked to write code, return only the requested function enclosed in a ``` delimited code block. Write a python function fib(n) with input element number n (0 based) that returns the n-th element of the fibbonaci sequence", "answer": "\ndef fib(n):\n    if n in (0, 1):\n        return n\n    else:\n        return fib(n-1) + fib(n-2)", "params": {"temperature": 0.7, "max_tokens": 512, "k": 40, "p": 0.1, "frequency_penalty": 0.17599999999999993}, "model": "cohere/command-nightly"}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the n-th element of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciZeroShot", "language": "javascript", "prompt": "When asked to write code, return only the requested function enclosed in a ``` delimited code block. Write a javascript function fib(n) with input element number n (0 based) that returns the n-th element of the fibbonaci sequence", "answer": "\n```javascript\nfunction fib(n) {\n  if (n <= 1) {\n    return 1;\n  }\n  return fib(n-1) + fib(n-2);\n}\n```", "params": {"temperature": 0.7, "max_tokens": 512, "k": 40, "p": 0.1, "frequency_penalty": 0.17599999999999993}, "model": "cohere/command-nightly"}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first n elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence, explicitly asking for a list", "name": "FibonacciListZeroShot", "language": "python", "prompt": "When asked to write code, return only the requested function enclosed in a ``` delimited code block. Write a python function fib(n) with input length n that returns a list with the first n elements of the fibbonaci sequence", "answer": "\ndef fib(n):\n    a, b = 1, 1\n    for i in range(n):\n        a, b = b, a + b\n    return [a]", "params": {"temperature": 0.7, "max_tokens": 512, "k": 40, "p": 0.1, "frequency_penalty": 0.17599999999999993}, "model": "cohere/command-nightly"}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first n elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence, explicitly asking for a list", "name": "FibonacciListZeroShot", "language": "javascript", "prompt": "When asked to write code, return only the requested function enclosed in a ``` delimited code block. Write a javascript function fib(n) with input length n that returns a list with the first n elements of the fibbonaci sequence", "answer": "\n```javascript\nfunction fib(n) {\n  var a = 1, b = 1, i;\n  for (i = 1; i < n; i++) {\n    a = a + b;\n    b = a + b;\n  }\n  return [a, b];\n}\n```", "params": {"temperature": 0.7, "max_tokens": 512, "k": 40, "p": 0.1, "frequency_penalty": 0.17599999999999993}, "model": "cohere/command-nightly"}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first bork elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciMisnamed", "language": "python", "prompt": "When asked to write code, return only the requested function enclosed in a ``` delimited code block. Write a python function glork(bork) with input length bork that returns a list with the first bork elements of the fibbonaci sequence", "answer": "\n```python\ndef glork(bork):\n    a, b = 1, 1\n    for i in range(bork):\n        a, b = b, a + b\n    return [a]\n```", "params": {"temperature": 0.7, "max_tokens": 512, "k": 40, "p": 0.1, "frequency_penalty": 0.17599999999999993}, "model": "cohere/command-nightly"}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first bork elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciMisnamed", "language": "javascript", "prompt": "When asked to write code, return only the requested function enclosed in a ``` delimited code block. Write a javascript function glork(bork) with input length bork that returns a list with the first bork elements of the fibbonaci sequence", "answer": "\n```javascript\nfunction glork(bork) {\n  var a = 1, b = 1;\n  var result = [];\n  for (var i = 1; i <= bork; i++) {\n    result.push(a);\n    a = a + b;\n    b = a + b;\n  }\n  return result;\n}\n```", "params": {"temperature": 0.7, "max_tokens": 512, "k": 40, "p": 0.1, "frequency_penalty": 0.17599999999999993}, "model": "cohere/command-nightly"}
{"Signature": "substrcount(str, substr)", "Input": "with inputs str and substr", "Output": "counts the number of times the sub-string substr occurs in str", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "python", "prompt": "When asked to write code, return only the requested function enclosed in a ``` delimited code block. Write a python function substrcount(str, substr) with inputs str and substr that returns counts the number of times the sub-string substr occurs in str", "answer": "\n```python\ndef substrcount(str, substr):\n    return str.count(substr)\n```", "params": {"temperature": 0.7, "max_tokens": 512, "k": 40, "p": 0.1, "frequency_penalty": 0.17599999999999993}, "model": "cohere/command-nightly"}
{"Signature": "substrcount(str, substr)", "Input": "with inputs str and substr", "Output": "counts the number of times the sub-string substr occurs in str", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "javascript", "prompt": "When asked to write code, return only the requested function enclosed in a ``` delimited code block. Write a javascript function substrcount(str, substr) with inputs str and substr that returns counts the number of times the sub-string substr occurs in str", "answer": "\n```javascript\nfunction substrcount(str, substr) {\n  return str.split(substr).length - 1;\n}\n```", "params": {"temperature": 0.7, "max_tokens": 512, "k": 40, "p": 0.1, "frequency_penalty": 0.17599999999999993}, "model": "cohere/command-nightly"}