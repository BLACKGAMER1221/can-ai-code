{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "python", "prompt": "<|im_start|>system\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.\n<|im_end|>\n<|im_start|>user\nWrite a python function meaning_of_life() with no inputs that returns a single integer, the answer to life the universe and everything.\n<|im_end|>\n<|im_start|>assistant", "answer": "\nHere's a simple Python function that returns the answer to life, the universe, and everything:\n\n```python\ndef meaning_of_life():\n    return 42\n```\n\nThis function simply returns the integer 42, which is the answer to life, the universe, and everything according to Douglas Adams' famous novel \"The Hitchhiker's Guide to the Galaxy\".", "params": "{'temperature': 1.0, 'top_k': 1, 'top_p': 1.0, 'token_repetition_penalty': 1.0}", "model": "LoneStriker/Nous-Hermes-2-Yi-34B-3.0bpw-h6-exl2-main", "runtime": "exllama2", "code": "def meaning_of_life():\n    return 42", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "javascript", "prompt": "<|im_start|>system\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.\n<|im_end|>\n<|im_start|>user\nWrite a javascript function meaning_of_life() with no inputs that returns a single integer, the answer to life the universe and everything.\n<|im_end|>\n<|im_start|>assistant", "answer": "\n```javascript\nfunction meaning_of_life() {\n  return 42;\n}\n```\n\nThis function simply returns the integer 42, which is the answer to life, the universe, and everything according to Douglas Adams' \"The Hitchhiker's Guide to the Galaxy\".", "params": "{'temperature': 1.0, 'top_k': 1, 'top_p': 1.0, 'token_repetition_penalty': 1.0}", "model": "LoneStriker/Nous-Hermes-2-Yi-34B-3.0bpw-h6-exl2-main", "runtime": "exllama2", "code": "function meaning_of_life() {\n  return 42;\n}", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "A simple list function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "python", "prompt": "<|im_start|>system\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.\n<|im_end|>\n<|im_start|>user\nWrite a python function things() with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain.\n<|im_end|>\n<|im_start|>assistant", "answer": "\n```python\ndef things():\n    return [5, 'foobar', 'Madrid']\n```", "params": "{'temperature': 1.0, 'top_k': 1, 'top_p': 1.0, 'token_repetition_penalty': 1.0}", "model": "LoneStriker/Nous-Hermes-2-Yi-34B-3.0bpw-h6-exl2-main", "runtime": "exllama2", "code": "def things():\n    return [5, 'foobar', 'Madrid']", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()[0]", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call()[1]", "eq": "foobar", "got": "foobar", "status": 1}, {"assert": "f.call()[2]", "eq": "Madrid", "got": "Madrid", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "A simple list function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "javascript", "prompt": "<|im_start|>system\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.\n<|im_end|>\n<|im_start|>user\nWrite a javascript function things() with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain.\n<|im_end|>\n<|im_start|>assistant", "answer": "\n```javascript\nfunction things() {\n  return [5, 'foobar', 'Madrid'];\n}\n```", "params": "{'temperature': 1.0, 'top_k': 1, 'top_p': 1.0, 'token_repetition_penalty': 1.0}", "model": "LoneStriker/Nous-Hermes-2-Yi-34B-3.0bpw-h6-exl2-main", "runtime": "exllama2", "code": "function things() {\n  return [5, 'foobar', 'Madrid'];\n}", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()[0]", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call()[1]", "eq": "foobar", "got": "foobar", "status": 1}, {"assert": "f.call()[2]", "eq": "Madrid", "got": "Madrid", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "python", "prompt": "<|im_start|>system\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.\n<|im_end|>\n<|im_start|>user\nWrite a python function secretidentities() with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names.\n<|im_end|>\n<|im_start|>assistant", "answer": "\n```python\ndef secretidentities():\n    return {'Superman': 'Clark Kent', 'Batman': 'Bruce Wayne', 'Spider-Man': 'Peter Parker'}\n```", "params": "{'temperature': 1.0, 'top_k': 1, 'top_p': 1.0, 'token_repetition_penalty': 1.0}", "model": "LoneStriker/Nous-Hermes-2-Yi-34B-3.0bpw-h6-exl2-main", "runtime": "exllama2", "code": "def secretidentities():\n    return {'Superman': 'Clark Kent', 'Batman': 'Bruce Wayne', 'Spider-Man': 'Peter Parker'}", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secretidentities", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq-any": ["Clark Kent", "Kal-El"], "got": "Clark Kent", "status": 1}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": "Bruce Wayne", "status": 1}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": "Peter Parker", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "javascript", "prompt": "<|im_start|>system\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.\n<|im_end|>\n<|im_start|>user\nWrite a javascript function secretidentities() with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names.\n<|im_end|>\n<|im_start|>assistant", "answer": "\n```javascript\nfunction secretIdentities() {\n  return {\n    'Superman': 'Clark Kent',\n    'Batman': 'Bruce Wayne',\n    'Spider-Man': 'Peter Parker'\n  };\n}\n```", "params": "{'temperature': 1.0, 'top_k': 1, 'top_p': 1.0, 'token_repetition_penalty': 1.0}", "model": "LoneStriker/Nous-Hermes-2-Yi-34B-3.0bpw-h6-exl2-main", "runtime": "exllama2", "code": "function secretIdentities() {\n  return {\n    'Superman': 'Clark Kent',\n    'Batman': 'Bruce Wayne',\n    'Spider-Man': 'Peter Parker'\n  };\n}", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secretIdentities", "status": 0}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq-any": ["Clark Kent", "Kal-El"], "got": "Clark Kent", "status": 1}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": "Bruce Wayne", "status": 1}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": "Peter Parker", "status": 1}], "status": "FAIL", "passed": 4, "total": 5}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common denominator of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "python", "prompt": "<|im_start|>system\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.\n<|im_end|>\n<|im_start|>user\nWrite a python function gcd(a, b) with two inputs a and b that returns the greatest common denominator of a and b.\n<|im_end|>\n<|im_start|>assistant", "answer": "\n```python\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n```\n\nThis function uses the Euclidean algorithm to find the greatest common divisor (GCD) of two numbers. It works by repeatedly dividing the larger number by the smaller number until the smaller number becomes zero. The GCD is then the value of the larger number at the end of the loop.", "params": "{'temperature': 1.0, 'top_k': 1, 'top_p': 1.0, 'token_repetition_penalty': 1.0}", "model": "LoneStriker/Nous-Hermes-2-Yi-34B-3.0bpw-h6-exl2-main", "runtime": "exllama2", "code": "def gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcd", "got": "gcd", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common denominator of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "javascript", "prompt": "<|im_start|>system\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.\n<|im_end|>\n<|im_start|>user\nWrite a javascript function gcd(a, b) with two inputs a and b that returns the greatest common denominator of a and b.\n<|im_end|>\n<|im_start|>assistant", "answer": "\n```javascript\nfunction gcd(a, b) {\n  while (b !== 0) {\n    let temp = a % b;\n    a = b;\n    b = temp;\n  }\n  return a;\n}\n```\n\nThis function uses the Euclidean algorithm to find the greatest common divisor (GCD) of two numbers. It works by repeatedly dividing the larger number by the smaller number until the smaller number becomes zero. The GCD is then the value of the larger number at the end of the loop.", "params": "{'temperature': 1.0, 'top_k': 1, 'top_p': 1.0, 'token_repetition_penalty': 1.0}", "model": "LoneStriker/Nous-Hermes-2-Yi-34B-3.0bpw-h6-exl2-main", "runtime": "exllama2", "code": "function gcd(a, b) {\n  while (b !== 0) {\n    let temp = a % b;\n    a = b;\n    b = temp;\n  }\n  return a;\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcd", "got": "gcd", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "gcf(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common factor of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDAlternative", "language": "python", "prompt": "<|im_start|>system\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.\n<|im_end|>\n<|im_start|>user\nWrite a python function gcf(a, b) with two inputs a and b that returns the greatest common factor of a and b.\n<|im_end|>\n<|im_start|>assistant", "answer": "\n```python\ndef gcf(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n```\n\nThis function uses the Euclidean algorithm to find the greatest common factor of two numbers. It repeatedly divides the larger number by the smaller number until the smaller number becomes zero. The final value of the larger number is the greatest common factor.", "params": "{'temperature': 1.0, 'top_k': 1, 'top_p': 1.0, 'token_repetition_penalty': 1.0}", "model": "LoneStriker/Nous-Hermes-2-Yi-34B-3.0bpw-h6-exl2-main", "runtime": "exllama2", "code": "def gcf(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcf", "got": "gcf", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "gcf(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common factor of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDAlternative", "language": "javascript", "prompt": "<|im_start|>system\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.\n<|im_end|>\n<|im_start|>user\nWrite a javascript function gcf(a, b) with two inputs a and b that returns the greatest common factor of a and b.\n<|im_end|>\n<|im_start|>assistant", "answer": "\n```javascript\nfunction gcf(a, b) {\n  let max = Math.max(a, b);\n  let min = Math.min(a, b);\n  let gcf = 1;\n\n  while (min > 0) {\n    gcf = Math.gcd(gcf, min);\n    min = Math.gcd(min, max - min);\n  }\n\n  return gcf;\n}\n```\n\nThis function takes two inputs `a` and `b` and returns their greatest common factor. It uses the Euclidean algorithm to calculate the greatest common divisor (GCD) of two numbers. The algorithm works by repeatedly dividing the smaller number by the larger number until the smaller number becomes zero. The GCD is then the last non-zero remainder.", "params": "{'temperature': 1.0, 'top_k': 1, 'top_p': 1.0, 'token_repetition_penalty': 1.0}", "model": "LoneStriker/Nous-Hermes-2-Yi-34B-3.0bpw-h6-exl2-main", "runtime": "exllama2", "code": "function gcf(a, b) {\n  let max = Math.max(a, b);\n  let min = Math.min(a, b);\n  let gcf = 1;\n\n  while (min > 0) {\n    gcf = Math.gcd(gcf, min);\n    min = Math.gcd(min, max - min);\n  }\n\n  return gcf;\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": {"error": "Math.gcd is not a function", "exc_type": "TypeError"}, "status": 0}, {"assert": "f.call(100,20)", "eq": 20, "got": {"error": "Math.gcd is not a function", "exc_type": "TypeError"}, "status": 0}, {"assert": "f.call(5,0)", "eq": 5, "got": 1, "status": 0}, {"assert": "f.call(0,3)", "eq": 3, "got": 1, "status": 0}, {"assert": "f.call(13,7)", "eq": 1, "got": {"error": "Math.gcd is not a function", "exc_type": "TypeError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcf", "got": "gcf", "status": 1}], "status": "FAIL", "passed": 4, "total": 9}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common denominator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "python", "prompt": "<|im_start|>system\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.\n<|im_end|>\n<|im_start|>user\nWrite a python function fofx(x, banana) with two inputs x and banana that returns the greatest common denominator (gcd) of x and banana.\n<|im_end|>\n<|im_start|>assistant", "answer": "\n```python\ndef gcd(x, banana):\n    while banana % x != 0:\n        if banana > x:\n            banana = banana - x\n        else:\n            x = x - banana\n    return x\n```", "params": "{'temperature': 1.0, 'top_k': 1, 'top_p': 1.0, 'token_repetition_penalty': 1.0}", "model": "LoneStriker/Nous-Hermes-2-Yi-34B-3.0bpw-h6-exl2-main", "runtime": "exllama2", "code": "def gcd(x, banana):\n    while banana % x != 0:\n        if banana > x:\n            banana = banana - x\n        else:\n            x = x - banana\n    return x", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": {"error": "integer division or modulo by zero", "exc_type": "ZeroDivisionError"}, "status": 0}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "banana", "status": 1}, {"assert": "f.name", "eq": "fofx", "got": "gcd", "status": 0}], "status": "FAIL", "passed": 7, "total": 9}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common denominator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "javascript", "prompt": "<|im_start|>system\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.\n<|im_end|>\n<|im_start|>user\nWrite a javascript function fofx(x, banana) with two inputs x and banana that returns the greatest common denominator (gcd) of x and banana.\n<|im_end|>\n<|im_start|>assistant", "answer": "\n```javascript\nfunction gcd(x, banana) {\n  let temp = banana;\n  while (x % temp !== 0) {\n    temp = x % temp;\n  }\n  return temp;\n}\n```\n\nThis function takes two inputs, x and banana, and returns the greatest common denominator (gcd) of x and banana. The function uses the Euclidean algorithm to calculate the gcd.", "params": "{'temperature': 1.0, 'top_k': 1, 'top_p': 1.0, 'token_repetition_penalty': 1.0}", "model": "LoneStriker/Nous-Hermes-2-Yi-34B-3.0bpw-h6-exl2-main", "runtime": "exllama2", "code": "function gcd(x, banana) {\n  let temp = banana;\n  while (x % temp !== 0) {\n    temp = x % temp;\n  }\n  return temp;\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": {"error": "timeout!"}, "status": 0}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "banana", "status": 1}, {"assert": "f.name", "eq": "fofx", "got": "gcd", "status": 0}], "status": "FAIL", "passed": 7, "total": 9}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "python", "prompt": "<|im_start|>system\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.\n<|im_end|>\n<|im_start|>user\nWrite a python function factorial(n) with input n that returns the factorial of n using iteration.\n<|im_end|>\n<|im_start|>assistant", "answer": "\n```python\ndef factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result\n```", "params": "{'temperature': 1.0, 'top_k': 1, 'top_p': 1.0, 'token_repetition_penalty': 1.0}", "model": "LoneStriker/Nous-Hermes-2-Yi-34B-3.0bpw-h6-exl2-main", "runtime": "exllama2", "code": "def factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "javascript", "prompt": "<|im_start|>system\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.\n<|im_end|>\n<|im_start|>user\nWrite a javascript function factorial(n) with input n that returns the factorial of n using iteration.\n<|im_end|>\n<|im_start|>assistant", "answer": "\n```javascript\nfunction factorial(n) {\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}\n```", "params": "{'temperature': 1.0, 'top_k': 1, 'top_p': 1.0, 'token_repetition_penalty': 1.0}", "model": "LoneStriker/Nous-Hermes-2-Yi-34B-3.0bpw-h6-exl2-main", "runtime": "exllama2", "code": "function factorial(n) {\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "python", "prompt": "<|im_start|>system\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.\n<|im_end|>\n<|im_start|>user\nWrite a python function factorial(n) with input n that returns the factorial of n using recursion.\n<|im_end|>\n<|im_start|>assistant", "answer": "\n```python\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n```", "params": "{'temperature': 1.0, 'top_k': 1, 'top_p': 1.0, 'token_repetition_penalty': 1.0}", "model": "LoneStriker/Nous-Hermes-2-Yi-34B-3.0bpw-h6-exl2-main", "runtime": "exllama2", "code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "javascript", "prompt": "<|im_start|>system\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.\n<|im_end|>\n<|im_start|>user\nWrite a javascript function factorial(n) with input n that returns the factorial of n using recursion.\n<|im_end|>\n<|im_start|>assistant", "answer": "\n```javascript\nfunction factorial(n) {\n    if (n === 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}\n```", "params": "{'temperature': 1.0, 'top_k': 1, 'top_p': 1.0, 'token_repetition_penalty': 1.0}", "model": "LoneStriker/Nous-Hermes-2-Yi-34B-3.0bpw-h6-exl2-main", "runtime": "exllama2", "code": "function factorial(n) {\n    if (n === 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "python", "prompt": "<|im_start|>system\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.\n<|im_end|>\n<|im_start|>user\nWrite a python function glork(bork) with input bork that returns the factorial of bork.\n<|im_end|>\n<|im_start|>assistant", "answer": "\n```python\ndef glork(bork):\n    result = 1\n    for i in range(1, bork + 1):\n        result *= i\n    return result\n```\n", "params": "{'temperature': 1.0, 'top_k': 1, 'top_p': 1.0, 'token_repetition_penalty': 1.0}", "model": "LoneStriker/Nous-Hermes-2-Yi-34B-3.0bpw-h6-exl2-main", "runtime": "exllama2", "code": "def glork(bork):\n    result = 1\n    for i in range(1, bork + 1):\n        result *= i\n    return result", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 6, "total": 6}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "javascript", "prompt": "<|im_start|>system\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.\n<|im_end|>\n<|im_start|>user\nWrite a javascript function glork(bork) with input bork that returns the factorial of bork.\n<|im_end|>\n<|im_start|>assistant", "answer": "\n```javascript\nfunction glork(bork) {\n  let result = 1;\n  for (let i = 1; i <= bork; i++) {\n    result *= i;\n  }\n  return result;\n}\n```\n\nThis function takes an input `bork` and returns the factorial of `bork`. It uses a `for` loop to iterate from 1 to `bork` and multiplies the result by each number in the loop. Finally, it returns the result.", "params": "{'temperature': 1.0, 'top_k': 1, 'top_p': 1.0, 'token_repetition_penalty': 1.0}", "model": "LoneStriker/Nous-Hermes-2-Yi-34B-3.0bpw-h6-exl2-main", "runtime": "exllama2", "code": "function glork(bork) {\n  let result = 1;\n  for (let i = 1; i <= bork; i++) {\n    result *= i;\n  }\n  return result;\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 6, "total": 6}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the `n`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation", "name": "FibonacciZeroShot", "language": "python", "prompt": "<|im_start|>system\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.\n<|im_end|>\n<|im_start|>user\nWrite a python function fib(n) with input element number n (0 based) that returns the `n`-th element of the fibonacci sequence.\n<|im_end|>\n<|im_start|>assistant", "answer": "\n```python\ndef fib(n):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n```\n\nThis function takes an input `n` and returns the `n`-th element of the Fibonacci sequence. It uses recursion to calculate the Fibonacci number. If `n` is less than or equal to 1, it returns `n` itself. Otherwise, it recursively calls `fib(n-1)` and `fib(n-2)` and adds the results together.", "params": "{'temperature': 1.0, 'top_k': 1, 'top_p': 1.0, 'token_repetition_penalty': 1.0}", "model": "LoneStriker/Nous-Hermes-2-Yi-34B-3.0bpw-h6-exl2-main", "runtime": "exllama2", "code": "def fib(n):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the `n`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation", "name": "FibonacciZeroShot", "language": "javascript", "prompt": "<|im_start|>system\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.\n<|im_end|>\n<|im_start|>user\nWrite a javascript function fib(n) with input element number n (0 based) that returns the `n`-th element of the fibonacci sequence.\n<|im_end|>\n<|im_start|>assistant", "answer": "\n```javascript\nfunction fib(n) {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n```\n\nThis function uses recursion to calculate the `n`-th element of the Fibonacci sequence. It checks if `n` is less than or equal to 1, and if so, it returns `n`. Otherwise, it recursively calls `fib(n - 1)` and `fib(n - 2)`, and returns the sum of the two results.", "params": "{'temperature': 1.0, 'top_k': 1, 'top_p': 1.0, 'token_repetition_penalty': 1.0}", "model": "LoneStriker/Nous-Hermes-2-Yi-34B-3.0bpw-h6-exl2-main", "runtime": "exllama2", "code": "function fib(n) {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "potato(g)", "Input": "with input element number g (0 based)", "Output": "the `g`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation if the name has been changed", "name": "FibonacciMisnamed", "language": "python", "prompt": "<|im_start|>system\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.\n<|im_end|>\n<|im_start|>user\nWrite a python function potato(g) with input element number g (0 based) that returns the `g`-th element of the fibonacci sequence.\n<|im_end|>\n<|im_start|>assistant", "answer": "\n```python\ndef potato(g):\n    fibonacci = [0, 1]\n    for i in range(2, g+1):\n        fibonacci.append(fibonacci[i-1] + fibonacci[i-2])\n    return fibonacci[g]\n```\n\nThis function takes an input `g` (0-based index) and returns the `g`-th element of the Fibonacci sequence. It uses a simple loop to generate the Fibonacci sequence up to the `g`-th element.", "params": "{'temperature': 1.0, 'top_k': 1, 'top_p': 1.0, 'token_repetition_penalty': 1.0}", "model": "LoneStriker/Nous-Hermes-2-Yi-34B-3.0bpw-h6-exl2-main", "runtime": "exllama2", "code": "def potato(g):\n    fibonacci = [0, 1]\n    for i in range(2, g+1):\n        fibonacci.append(fibonacci[i-1] + fibonacci[i-2])\n    return fibonacci[g]", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "g", "got": "g", "status": 1}, {"assert": "f.name", "eq": "potato", "got": "potato", "status": 1}], "status": "PASS", "passed": 8, "total": 8}
{"Signature": "potato(g)", "Input": "with input element number g (0 based)", "Output": "the `g`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation if the name has been changed", "name": "FibonacciMisnamed", "language": "javascript", "prompt": "<|im_start|>system\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.\n<|im_end|>\n<|im_start|>user\nWrite a javascript function potato(g) with input element number g (0 based) that returns the `g`-th element of the fibonacci sequence.\n<|im_end|>\n<|im_start|>assistant", "answer": "\n```javascript\nfunction potato(g) {\n  let fibonacci = [0, 1];\n  for (let i = 2; i < g; i++) {\n    fibonacci[i] = fibonacci[i - 1] + fibonacci[i - 2];\n  }\n  return fibonacci[g - 1];\n}\n```\n\nThis function takes an input element number `g` (0-based) and returns the `g`-th element of the Fibonacci sequence. It uses a simple loop to calculate the Fibonacci sequence up to the `g`-th element.", "params": "{'temperature': 1.0, 'top_k': 1, 'top_p': 1.0, 'token_repetition_penalty': 1.0}", "model": "LoneStriker/Nous-Hermes-2-Yi-34B-3.0bpw-h6-exl2-main", "runtime": "exllama2", "code": "function potato(g) {\n  let fibonacci = [0, 1];\n  for (let i = 2; i < g; i++) {\n    fibonacci[i] = fibonacci[i - 1] + fibonacci[i - 2];\n  }\n  return fibonacci[g - 1];\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": "Expecting value: line 1 column 1 (char 0)", "status": 0}, {"assert": "f.call(1)", "eq": 1, "got": 0, "status": 0}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 1, "status": 0}, {"assert": "f.call(5)", "eq": 5, "got": 3, "status": 0}, {"assert": "f.args[0].name", "eq": "g", "got": "g", "status": 1}, {"assert": "f.name", "eq": "potato", "got": "potato", "status": 1}], "status": "FAIL", "passed": 4, "total": 8}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first `n` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciListZeroShot", "language": "python", "prompt": "<|im_start|>system\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.\n<|im_end|>\n<|im_start|>user\nWrite a python function fib(n) with input length n that returns a list with the first `n` elements of the fibonacci sequence.\n<|im_end|>\n<|im_start|>assistant", "answer": "\n```python\ndef fib(n):\n    fib_list = [0, 1]\n    for i in range(2, n):\n        fib_list.append(fib_list[i-1] + fib_list[i-2])\n    return fib_list[:n]\n```\n\nThis function takes an integer `n` as input and returns a list containing the first `n` elements of the Fibonacci sequence. The function starts with an initial list `[0, 1]`, which are the first two elements of the Fibonacci sequence. Then, it iterates from `2` to `n` and appends the sum of the previous two elements to the list. Finally, it returns the first `n` elements of the list.", "params": "{'temperature': 1.0, 'top_k': 1, 'top_p': 1.0, 'token_repetition_penalty': 1.0}", "model": "LoneStriker/Nous-Hermes-2-Yi-34B-3.0bpw-h6-exl2-main", "runtime": "exllama2", "code": "def fib(n):\n    fib_list = [0, 1]\n    for i in range(2, n):\n        fib_list.append(fib_list[i-1] + fib_list[i-2])\n    return fib_list[:n]", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0], "status": 1}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1], "status": 1}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 1], "status": 1}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 1, 2, 3], "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first `n` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciListZeroShot", "language": "javascript", "prompt": "<|im_start|>system\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.\n<|im_end|>\n<|im_start|>user\nWrite a javascript function fib(n) with input length n that returns a list with the first `n` elements of the fibonacci sequence.\n<|im_end|>\n<|im_start|>assistant", "answer": "\n```javascript\nfunction fib(n) {\n  let fibonacci = [0, 1];\n  for (let i = 2; i < n; i++) {\n    fibonacci[i] = fibonacci[i - 1] + fibonacci[i - 2];\n  }\n  return fibonacci.slice(0, n);\n}\n```\n\nThis function takes an input `n` and returns a list with the first `n` elements of the Fibonacci sequence. It uses a simple loop to calculate the Fibonacci sequence up to the `n`th element.", "params": "{'temperature': 1.0, 'top_k': 1, 'top_p': 1.0, 'token_repetition_penalty': 1.0}", "model": "LoneStriker/Nous-Hermes-2-Yi-34B-3.0bpw-h6-exl2-main", "runtime": "exllama2", "code": "function fib(n) {\n  let fibonacci = [0, 1];\n  for (let i = 2; i < n; i++) {\n    fibonacci[i] = fibonacci[i - 1] + fibonacci[i - 2];\n  }\n  return fibonacci.slice(0, n);\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0], "status": 1}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1], "status": 1}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 1], "status": 1}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 1, 2, 3], "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first `bork` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciListMisnamed", "language": "python", "prompt": "<|im_start|>system\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.\n<|im_end|>\n<|im_start|>user\nWrite a python function glork(bork) with input length bork that returns a list with the first `bork` elements of the fibonacci sequence.\n<|im_end|>\n<|im_start|>assistant", "answer": "\n```python\ndef glork(bork):\n    fibonacci = [0, 1]\n    while len(fibonacci) < bork:\n        fibonacci.append(fibonacci[-1] + fibonacci[-2])\n    return fibonacci[:bork]\n```\n\nThis function takes an integer `bork` as input and returns a list containing the first `bork` elements of the Fibonacci sequence. The Fibonacci sequence is defined as `[0, 1]` initially, and then each subsequent element is the sum of the previous two elements. The loop continues until the length of the `fibonacci` list is equal to or greater than `bork`. Finally, the function returns a slice of the `fibonacci` list from index 0 to `bork-1`.", "params": "{'temperature': 1.0, 'top_k': 1, 'top_p': 1.0, 'token_repetition_penalty': 1.0}", "model": "LoneStriker/Nous-Hermes-2-Yi-34B-3.0bpw-h6-exl2-main", "runtime": "exllama2", "code": "def glork(bork):\n    fibonacci = [0, 1]\n    while len(fibonacci) < bork:\n        fibonacci.append(fibonacci[-1] + fibonacci[-2])\n    return fibonacci[:bork]", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0], "status": 1}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1], "status": 1}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 1], "status": 1}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 1, 2, 3], "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 8, "total": 8}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first `bork` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciListMisnamed", "language": "javascript", "prompt": "<|im_start|>system\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.\n<|im_end|>\n<|im_start|>user\nWrite a javascript function glork(bork) with input length bork that returns a list with the first `bork` elements of the fibonacci sequence.\n<|im_end|>\n<|im_start|>assistant", "answer": "\n```javascript\nfunction glork(bork) {\n  let fibonacci = [0, 1];\n  for (let i = 2; i < bork; i++) {\n    fibonacci[i] = fibonacci[i - 1] + fibonacci[i - 2];\n  }\n  return fibonacci.slice(0, bork);\n}\n```", "params": "{'temperature': 1.0, 'top_k': 1, 'top_p': 1.0, 'token_repetition_penalty': 1.0}", "model": "LoneStriker/Nous-Hermes-2-Yi-34B-3.0bpw-h6-exl2-main", "runtime": "exllama2", "code": "function glork(bork) {\n  let fibonacci = [0, 1];\n  for (let i = 2; i < bork; i++) {\n    fibonacci[i] = fibonacci[i - 1] + fibonacci[i - 2];\n  }\n  return fibonacci.slice(0, bork);\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0], "status": 1}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1], "status": 1}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 1], "status": 1}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 1, 2, 3], "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 8, "total": 8}
{"Signature": "substrcount(str, substr)", "Input": "with inputs `str` and `substr`", "Output": "counts the number of times the sub-string `substr` occurs in `str`", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "python", "prompt": "<|im_start|>system\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.\n<|im_end|>\n<|im_start|>user\nWrite a python function substrcount(str, substr) with inputs `str` and `substr` that returns counts the number of times the sub-string `substr` occurs in `str`.\n<|im_end|>\n<|im_start|>assistant", "answer": "\n```python\ndef substrcount(str, substr):\n    count = 0\n    for i in range(len(str)):\n        if str[i:i+len(substr)] == substr:\n            count += 1\n    return count\n```\n\nThis function takes two inputs: `str` and `substr`. It iterates through the string `str` using a for loop and checks if the substring `substr` is present at each index. If it is, the count is incremented by 1. Finally, the function returns the count.", "params": "{'temperature': 1.0, 'top_k': 1, 'top_p': 1.0, 'token_repetition_penalty': 1.0}", "model": "LoneStriker/Nous-Hermes-2-Yi-34B-3.0bpw-h6-exl2-main", "runtime": "exllama2", "code": "def substrcount(str, substr):\n    count = 0\n    for i in range(len(str)):\n        if str[i:i+len(substr)] == substr:\n            count += 1\n    return count", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrcount", "status": 1}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 3, "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "substrcount(str, substr)", "Input": "with inputs `str` and `substr`", "Output": "counts the number of times the sub-string `substr` occurs in `str`", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "javascript", "prompt": "<|im_start|>system\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.\n<|im_end|>\n<|im_start|>user\nWrite a javascript function substrcount(str, substr) with inputs `str` and `substr` that returns counts the number of times the sub-string `substr` occurs in `str`.\n<|im_end|>\n<|im_start|>assistant", "answer": "\n```javascript\nfunction substrcount(str, substr) {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str.substring(i, i + substr.length) === substr) {\n      count++;\n    }\n  }\n  return count;\n}\n```\n\nThis function takes two inputs: `str` and `substr`. It counts the number of times the sub-string `substr` occurs in `str`. The function uses a `for` loop to iterate through each character of `str`. It checks if the sub-string `substr` matches the sub-string from `i` to `i + substr.length`. If there is a match, the `count` variable is incremented. Finally, the function returns the `count` variable.", "params": "{'temperature': 1.0, 'top_k': 1, 'top_p': 1.0, 'token_repetition_penalty': 1.0}", "model": "LoneStriker/Nous-Hermes-2-Yi-34B-3.0bpw-h6-exl2-main", "runtime": "exllama2", "code": "function substrcount(str, substr) {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str.substring(i, i + substr.length) === substr) {\n      count++;\n    }\n  }\n  return count;\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrcount", "status": 1}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 3, "status": 1}], "status": "PASS", "passed": 7, "total": 7}