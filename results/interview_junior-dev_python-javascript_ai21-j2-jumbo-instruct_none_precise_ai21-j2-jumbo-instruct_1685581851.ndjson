{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "python", "prompt": "When asked to write code, make sure its enclosed in a ``` delimited code block. Write a python function meaning_of_life() with no inputs that returns a single integer, the answer to life the universe and everything", "answer": "\n```\ndef meaning_of_life():\n    return 42\n\n```", "params": {"temperature": 0.7, "maxTokens": 512, "topP": 0.1, "presencePenalty": {"scale": 0.17599999999999993, "applyToWhitespaces": true, "applyToPunctuations": true, "applyToNumbers": true, "applyToStopwords": true, "applyToEmojis": true}}, "model": "ai21/j2-jumbo-instruct"}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "javascript", "prompt": "When asked to write code, make sure its enclosed in a ``` delimited code block. Write a javascript function meaning_of_life() with no inputs that returns a single integer, the answer to life the universe and everything", "answer": "\n```\nfunction meaning_of_life() {\n  return 42;\n}\n\n```", "params": {"temperature": 0.7, "maxTokens": 512, "topP": 0.1, "presencePenalty": {"scale": 0.17599999999999993, "applyToWhitespaces": true, "applyToPunctuations": true, "applyToNumbers": true, "applyToStopwords": true, "applyToEmojis": true}}, "model": "ai21/j2-jumbo-instruct"}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "List function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "python", "prompt": "When asked to write code, make sure its enclosed in a ``` delimited code block. Write a python function things() with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain", "answer": "\n```\ndef things():\n    return [5, 'foobar', 'Madrid']\n\n```", "params": {"temperature": 0.7, "maxTokens": 512, "topP": 0.1, "presencePenalty": {"scale": 0.17599999999999993, "applyToWhitespaces": true, "applyToPunctuations": true, "applyToNumbers": true, "applyToStopwords": true, "applyToEmojis": true}}, "model": "ai21/j2-jumbo-instruct"}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "List function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "javascript", "prompt": "When asked to write code, make sure its enclosed in a ``` delimited code block. Write a javascript function things() with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain", "answer": "\n```\nfunction things() {\n  return [5, 'foobar', 'Madrid'];\n}\n\n```", "params": {"temperature": 0.7, "maxTokens": 512, "topP": 0.1, "presencePenalty": {"scale": 0.17599999999999993, "applyToWhitespaces": true, "applyToPunctuations": true, "applyToNumbers": true, "applyToStopwords": true, "applyToEmojis": true}}, "model": "ai21/j2-jumbo-instruct"}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "python", "prompt": "When asked to write code, make sure its enclosed in a ``` delimited code block. Write a python function secretidentities() with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "answer": "\n```\ndef secretidentities():\n    identities = {\n        \"Superman\": \"Clark Kent\",\n        \"Batman\": \"Bruce Wayne\",\n        \"Spider-Man\": \"Peter Parker\"\n    }\n    return identities\n\n```", "params": {"temperature": 0.7, "maxTokens": 512, "topP": 0.1, "presencePenalty": {"scale": 0.17599999999999993, "applyToWhitespaces": true, "applyToPunctuations": true, "applyToNumbers": true, "applyToStopwords": true, "applyToEmojis": true}}, "model": "ai21/j2-jumbo-instruct"}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "javascript", "prompt": "When asked to write code, make sure its enclosed in a ``` delimited code block. Write a javascript function secretidentities() with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "answer": "\n```\nfunction secretidentities() {\n  return {\n    \"Superman\": \"Clark Kent\",\n    \"Batman\": \"Bruce Wayne\",\n    \"Spider-Man\": \"Peter Parker\"\n  };\n}\n\n```", "params": {"temperature": 0.7, "maxTokens": 512, "topP": 0.1, "presencePenalty": {"scale": 0.17599999999999993, "applyToWhitespaces": true, "applyToPunctuations": true, "applyToNumbers": true, "applyToStopwords": true, "applyToEmojis": true}}, "model": "ai21/j2-jumbo-instruct"}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common demoninator (gcd) of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "python", "prompt": "When asked to write code, make sure its enclosed in a ``` delimited code block. Write a python function gcd(a, b) with two inputs a and b that returns the greatest common demoninator (gcd) of a and b", "answer": "\n```\ndef gcd(a, b):\n    while a % b != 0:\n        a = a // b\n    return a\n\n```", "params": {"temperature": 0.7, "maxTokens": 512, "topP": 0.1, "presencePenalty": {"scale": 0.17599999999999993, "applyToWhitespaces": true, "applyToPunctuations": true, "applyToNumbers": true, "applyToStopwords": true, "applyToEmojis": true}}, "model": "ai21/j2-jumbo-instruct"}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common demoninator (gcd) of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "javascript", "prompt": "When asked to write code, make sure its enclosed in a ``` delimited code block. Write a javascript function gcd(a, b) with two inputs a and b that returns the greatest common demoninator (gcd) of a and b", "answer": "\n```\nfunction gcd(a, b) {\n  if (b === 0) {\n    return a;\n  } else {\n    return gcd(b, a % b);\n  }\n}\n\n```", "params": {"temperature": 0.7, "maxTokens": 512, "topP": 0.1, "presencePenalty": {"scale": 0.17599999999999993, "applyToWhitespaces": true, "applyToPunctuations": true, "applyToNumbers": true, "applyToStopwords": true, "applyToEmojis": true}}, "model": "ai21/j2-jumbo-instruct"}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common demoninator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "python", "prompt": "When asked to write code, make sure its enclosed in a ``` delimited code block. Write a python function fofx(x, banana) with two inputs x and banana that returns the greatest common demoninator (gcd) of x and banana", "answer": "\n```\ndef fofx(x, banana):\n    return gcd(x, banana)\n\n```", "params": {"temperature": 0.7, "maxTokens": 512, "topP": 0.1, "presencePenalty": {"scale": 0.17599999999999993, "applyToWhitespaces": true, "applyToPunctuations": true, "applyToNumbers": true, "applyToStopwords": true, "applyToEmojis": true}}, "model": "ai21/j2-jumbo-instruct"}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common demoninator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "javascript", "prompt": "When asked to write code, make sure its enclosed in a ``` delimited code block. Write a javascript function fofx(x, banana) with two inputs x and banana that returns the greatest common demoninator (gcd) of x and banana", "answer": "\n```\nfunction fofx(x, banana) {\n  return Math.floor(Math.sqrt(x * x + banana * banana));\n}\n\n```", "params": {"temperature": 0.7, "maxTokens": 512, "topP": 0.1, "presencePenalty": {"scale": 0.17599999999999993, "applyToWhitespaces": true, "applyToPunctuations": true, "applyToNumbers": true, "applyToStopwords": true, "applyToEmojis": true}}, "model": "ai21/j2-jumbo-instruct"}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "python", "prompt": "When asked to write code, make sure its enclosed in a ``` delimited code block. Write a python function factorial(n) with input n that returns the factorial of n using iteration", "answer": "\n```\ndef factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n\n```", "params": {"temperature": 0.7, "maxTokens": 512, "topP": 0.1, "presencePenalty": {"scale": 0.17599999999999993, "applyToWhitespaces": true, "applyToPunctuations": true, "applyToNumbers": true, "applyToStopwords": true, "applyToEmojis": true}}, "model": "ai21/j2-jumbo-instruct"}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "javascript", "prompt": "When asked to write code, make sure its enclosed in a ``` delimited code block. Write a javascript function factorial(n) with input n that returns the factorial of n using iteration", "answer": "\n```\nfunction factorial(n) {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n\n```", "params": {"temperature": 0.7, "maxTokens": 512, "topP": 0.1, "presencePenalty": {"scale": 0.17599999999999993, "applyToWhitespaces": true, "applyToPunctuations": true, "applyToNumbers": true, "applyToStopwords": true, "applyToEmojis": true}}, "model": "ai21/j2-jumbo-instruct"}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "python", "prompt": "When asked to write code, make sure its enclosed in a ``` delimited code block. Write a python function factorial(n) with input n that returns the factorial of n using recursion", "answer": "\n```\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n```", "params": {"temperature": 0.7, "maxTokens": 512, "topP": 0.1, "presencePenalty": {"scale": 0.17599999999999993, "applyToWhitespaces": true, "applyToPunctuations": true, "applyToNumbers": true, "applyToStopwords": true, "applyToEmojis": true}}, "model": "ai21/j2-jumbo-instruct"}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "javascript", "prompt": "When asked to write code, make sure its enclosed in a ``` delimited code block. Write a javascript function factorial(n) with input n that returns the factorial of n using recursion", "answer": "\n```\nfunction factorial(n) {\n  if (n <= 1) {\n    return 1;\n  } else {\n    return n * factorial(n - 1);\n  }\n}\n\n```", "params": {"temperature": 0.7, "maxTokens": 512, "topP": 0.1, "presencePenalty": {"scale": 0.17599999999999993, "applyToWhitespaces": true, "applyToPunctuations": true, "applyToNumbers": true, "applyToStopwords": true, "applyToEmojis": true}}, "model": "ai21/j2-jumbo-instruct"}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "python", "prompt": "When asked to write code, make sure its enclosed in a ``` delimited code block. Write a python function glork(bork) with input bork that returns the factorial of bork", "answer": "\n```\ndef glork(bork):\n    return factorial(bork)\n\n```", "params": {"temperature": 0.7, "maxTokens": 512, "topP": 0.1, "presencePenalty": {"scale": 0.17599999999999993, "applyToWhitespaces": true, "applyToPunctuations": true, "applyToNumbers": true, "applyToStopwords": true, "applyToEmojis": true}}, "model": "ai21/j2-jumbo-instruct"}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "javascript", "prompt": "When asked to write code, make sure its enclosed in a ``` delimited code block. Write a javascript function glork(bork) with input bork that returns the factorial of bork", "answer": "\n```\nfunction glork(bork) {\n  return bork * glork(bork - 1);\n}\n\n```", "params": {"temperature": 0.7, "maxTokens": 512, "topP": 0.1, "presencePenalty": {"scale": 0.17599999999999993, "applyToWhitespaces": true, "applyToPunctuations": true, "applyToNumbers": true, "applyToStopwords": true, "applyToEmojis": true}}, "model": "ai21/j2-jumbo-instruct"}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the n-th element of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciZeroShot", "language": "python", "prompt": "When asked to write code, make sure its enclosed in a ``` delimited code block. Write a python function fib(n) with input element number n (0 based) that returns the n-th element of the fibbonaci sequence", "answer": "\n```\ndef fib(n):\n    a, b = 0, 1\n    while a < n:\n        a, b = b, a + b\n    return a\n\n```", "params": {"temperature": 0.7, "maxTokens": 512, "topP": 0.1, "presencePenalty": {"scale": 0.17599999999999993, "applyToWhitespaces": true, "applyToPunctuations": true, "applyToNumbers": true, "applyToStopwords": true, "applyToEmojis": true}}, "model": "ai21/j2-jumbo-instruct"}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the n-th element of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciZeroShot", "language": "javascript", "prompt": "When asked to write code, make sure its enclosed in a ``` delimited code block. Write a javascript function fib(n) with input element number n (0 based) that returns the n-th element of the fibbonaci sequence", "answer": "\n```\nfunction fib(n) {\n  if (n <= 1) {\n    return n;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n  }\n}\n\n```", "params": {"temperature": 0.7, "maxTokens": 512, "topP": 0.1, "presencePenalty": {"scale": 0.17599999999999993, "applyToWhitespaces": true, "applyToPunctuations": true, "applyToNumbers": true, "applyToStopwords": true, "applyToEmojis": true}}, "model": "ai21/j2-jumbo-instruct"}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first n elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence, explicitly asking for a list", "name": "FibonacciListZeroShot", "language": "python", "prompt": "When asked to write code, make sure its enclosed in a ``` delimited code block. Write a python function fib(n) with input length n that returns a list with the first n elements of the fibbonaci sequence", "answer": "\n```\ndef fib(n):\n    a, b = 0, 1\n    result = []\n    for i in range(n):\n        result.append(a)\n        a, b = b, a + b\n    return result\n\n```", "params": {"temperature": 0.7, "maxTokens": 512, "topP": 0.1, "presencePenalty": {"scale": 0.17599999999999993, "applyToWhitespaces": true, "applyToPunctuations": true, "applyToNumbers": true, "applyToStopwords": true, "applyToEmojis": true}}, "model": "ai21/j2-jumbo-instruct"}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first n elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence, explicitly asking for a list", "name": "FibonacciListZeroShot", "language": "javascript", "prompt": "When asked to write code, make sure its enclosed in a ``` delimited code block. Write a javascript function fib(n) with input length n that returns a list with the first n elements of the fibbonaci sequence", "answer": "\n```\nfunction fib(n) {\n  const sequence = [0, 1];\n  for (let i = 2; i <= n; i++) {\n    sequence.push(sequence[i - 1] + sequence[i - 2]);\n  }\n  return sequence;\n}\n\n```", "params": {"temperature": 0.7, "maxTokens": 512, "topP": 0.1, "presencePenalty": {"scale": 0.17599999999999993, "applyToWhitespaces": true, "applyToPunctuations": true, "applyToNumbers": true, "applyToStopwords": true, "applyToEmojis": true}}, "model": "ai21/j2-jumbo-instruct"}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first bork elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciMisnamed", "language": "python", "prompt": "When asked to write code, make sure its enclosed in a ``` delimited code block. Write a python function glork(bork) with input length bork that returns a list with the first bork elements of the fibbonaci sequence", "answer": "\n```\ndef glork(bork):\n    fib = [0, 1]\n    for i in range(2, bork + 1):\n        fib.append(fib[i - 1] + fib[i - 2])\n    return fib[:bork]\n\n```", "params": {"temperature": 0.7, "maxTokens": 512, "topP": 0.1, "presencePenalty": {"scale": 0.17599999999999993, "applyToWhitespaces": true, "applyToPunctuations": true, "applyToNumbers": true, "applyToStopwords": true, "applyToEmojis": true}}, "model": "ai21/j2-jumbo-instruct"}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first bork elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciMisnamed", "language": "javascript", "prompt": "When asked to write code, make sure its enclosed in a ``` delimited code block. Write a javascript function glork(bork) with input length bork that returns a list with the first bork elements of the fibbonaci sequence", "answer": "\n```\nfunction glork(bork) {\n  const fib = [0, 1];\n  for (let i = 2; i <= bork; i++) {\n    fib.push(fib[i - 1] + fib[i - 2]);\n  }\n  return fib.slice(0, bork);\n}\n\n```", "params": {"temperature": 0.7, "maxTokens": 512, "topP": 0.1, "presencePenalty": {"scale": 0.17599999999999993, "applyToWhitespaces": true, "applyToPunctuations": true, "applyToNumbers": true, "applyToStopwords": true, "applyToEmojis": true}}, "model": "ai21/j2-jumbo-instruct"}
{"Signature": "substrcount(str, substr)", "Input": "with inputs str and substr", "Output": "counts the number of times the sub-string substr occurs in str", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "python", "prompt": "When asked to write code, make sure its enclosed in a ``` delimited code block. Write a python function substrcount(str, substr) with inputs str and substr that returns counts the number of times the sub-string substr occurs in str", "answer": "\n```\ndef substrcount(str, substr):\n    count = 0\n    for i in range(len(str)):\n        if substr == str[i]:\n            count += 1\n    return count\n\n```", "params": {"temperature": 0.7, "maxTokens": 512, "topP": 0.1, "presencePenalty": {"scale": 0.17599999999999993, "applyToWhitespaces": true, "applyToPunctuations": true, "applyToNumbers": true, "applyToStopwords": true, "applyToEmojis": true}}, "model": "ai21/j2-jumbo-instruct"}
{"Signature": "substrcount(str, substr)", "Input": "with inputs str and substr", "Output": "counts the number of times the sub-string substr occurs in str", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "javascript", "prompt": "When asked to write code, make sure its enclosed in a ``` delimited code block. Write a javascript function substrcount(str, substr) with inputs str and substr that returns counts the number of times the sub-string substr occurs in str", "answer": "\n```\nfunction substrCount(str, substr) {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === substr) {\n      count++;\n    }\n  }\n  return count;\n}\n\n```", "params": {"temperature": 0.7, "maxTokens": 512, "topP": 0.1, "presencePenalty": {"scale": 0.17599999999999993, "applyToWhitespaces": true, "applyToPunctuations": true, "applyToNumbers": true, "applyToStopwords": true, "applyToEmojis": true}}, "model": "ai21/j2-jumbo-instruct"}