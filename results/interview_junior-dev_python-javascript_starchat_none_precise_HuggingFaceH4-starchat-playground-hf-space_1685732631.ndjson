{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "python", "prompt": "All code should be contained in ``` blocks. Write a python function meaning_of_life() with no inputs that returns a single integer, the answer to life the universe and everything", "answer": "def meaning_of_life():\n    return 42\n\n", "params": {"$note": "precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index", "temperature": 0.7, "repetition_penalty": 1.176, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512, "repeat_last_n": 256}, "model": "HuggingFaceH4-starchat-playground-hf-space"}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "javascript", "prompt": "All code should be contained in ``` blocks. Write a javascript function meaning_of_life() with no inputs that returns a single integer, the answer to life the universe and everything", "answer": "function meaning_of_life(){\n    return 42; //the answer to life, the universe and everythin'\n}\n\n", "params": {"$note": "precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index", "temperature": 0.7, "repetition_penalty": 1.176, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512, "repeat_last_n": 256}, "model": "HuggingFaceH4-starchat-playground-hf-space"}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "List function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "python", "prompt": "All code should be contained in ``` blocks. Write a python function things() with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain", "answer": "def things():\n    return [5, \"foobar\", \"Madrid\"]\n\n", "params": {"$note": "precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index", "temperature": 0.7, "repetition_penalty": 1.176, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512, "repeat_last_n": 256}, "model": "HuggingFaceH4-starchat-playground-hf-space"}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "List function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "javascript", "prompt": "All code should be contained in ``` blocks. Write a javascript function things() with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain", "answer": "function things(){\n    return [5,'foobar','Madrid'];\n}\n\n", "params": {"$note": "precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index", "temperature": 0.7, "repetition_penalty": 1.176, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512, "repeat_last_n": 256}, "model": "HuggingFaceH4-starchat-playground-hf-space"}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "python", "prompt": "All code should be contained in ``` blocks. Write a python function secretidentities() with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "answer": "def secret_identities():\n    return {\n        \"Superman\": \"Clark Kent\", \n        \"Batman\": \"William Gibson\", \n        \"Spider-Man\": \"Peter Parker\"\n    }\n\n", "params": {"$note": "precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index", "temperature": 0.7, "repetition_penalty": 1.176, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512, "repeat_last_n": 256}, "model": "HuggingFaceH4-starchat-playground-hf-space"}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "javascript", "prompt": "All code should be contained in ``` blocks. Write a javascript function secretidentities() with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "answer": "function secretIdentities(){\n  return {\n    \"Superman\": \"<NAME>\", \n    \"Batman\": \"Bruce Wayne\", \n    \"Spider Man\": \"Peter Parker\" \n  }\n}\n\n", "params": {"$note": "precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index", "temperature": 0.7, "repetition_penalty": 1.176, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512, "repeat_last_n": 256}, "model": "HuggingFaceH4-starchat-playground-hf-space"}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common demoninator (gcd) of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "python", "prompt": "All code should be contained in ``` blocks. Write a python function gcd(a, b) with two inputs a and b that returns the greatest common demoninator (gcd) of a and b", "answer": "def gcd(a: int, b: int):\n    \"\"\"This function calculates the Greatest Common Divisor.\"\"\"\n\n    # base case\n    if a == 0 or b == 0:\n        return -1\n    \n    while a!= b:\n        \n        # check which value is smaller to reduce runtime\n        if a > b:\n            a = a-b\n        else: \n            b= b-a\n        \n    return a\n\n", "params": {"$note": "precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index", "temperature": 0.7, "repetition_penalty": 1.176, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512, "repeat_last_n": 256}, "model": "HuggingFaceH4-starchat-playground-hf-space"}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common demoninator (gcd) of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "javascript", "prompt": "All code should be contained in ``` blocks. Write a javascript function gcd(a, b) with two inputs a and b that returns the greatest common demoninator (gcd) of a and b", "answer": "function gcd(a,b){\n  if(b==0) return a;\n  else return gcd(b,a%b);\n}\n\n", "params": {"$note": "precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index", "temperature": 0.7, "repetition_penalty": 1.176, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512, "repeat_last_n": 256}, "model": "HuggingFaceH4-starchat-playground-hf-space"}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common demoninator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "python", "prompt": "All code should be contained in ``` blocks. Write a python function fofx(x, banana) with two inputs x and banana that returns the greatest common demoninator (gcd) of x and banana", "answer": "def gcd_naive(a: int, b: int) -> int:\n    \"\"\"This is just for comparison purposes.\"\"\"\n    assert isinstance(a, int), \"a must be an integer\"\n    assert isinstance(b, int), \"b must be an integer\"\n\n    # make sure a >= 0\n    if a < 0:\n        a = -a\n\n    # make sure b >= 0\n    if b < 0:\n        b = -b\n\n    # now do the naive algorithm\n    while b > 0:\n        a, b = b, a % b\n\n    return a\n\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\"The Euclidean Algorithm\"\"\"\n    assert isinstance(a, int), \"a must be an integer\"\n    assert isinstance(b, int), \"b must be an integer\"\n\n    # make sure a >= 0\n    if a < 0:\n        a = -a\n\n    # make sure b >= 0\n    if b < 0:\n        b = -b\n\n    shift = 0\n    while not ((a >> shift) & 1):\n        shift += 1\n\n    while shift >= 0:\n\n        # check if the bit is set in both numbers\n        if ((a >> shift) & 1) and ((b >> shift) & 1):\n            # they are both odd, so we can skip this iteration\n            pass\n        elif ((a >> shift) & 1) or ((b >> shift) & 1):\n            # only one of them is odd, so we have found our GCD\n            break\n        else:\n            raise ValueError(\"unreachable\")\n\n        shift -= 1\n\n    return max((a >> shift), (b >> shift)) << shift\n\n", "params": {"$note": "precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index", "temperature": 0.7, "repetition_penalty": 1.176, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512, "repeat_last_n": 256}, "model": "HuggingFaceH4-starchat-playground-hf-space"}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common demoninator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "javascript", "prompt": "All code should be contained in ``` blocks. Write a javascript function fofx(x, banana) with two inputs x and banana that returns the greatest common demoninator (gcd) of x and banana", "answer": "function gcd(a, b) {\n  if (!b) return a;\n  else return gcd(b, a % b);\n}\n\n", "params": {"$note": "precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index", "temperature": 0.7, "repetition_penalty": 1.176, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512, "repeat_last_n": 256}, "model": "HuggingFaceH4-starchat-playground-hf-space"}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "python", "prompt": "All code should be contained in ``` blocks. Write a python function factorial(n) with input n that returns the factorial of n using iteration", "answer": "def factorial(n):\n    result = 1\n    if n < 0:\n        raise ValueError(\"Factorial is not defined for negative numbers\")\n    elif n == 0 or n == 1:\n        return 1\n    else:\n        while n > 1:\n            result *= n\n            n -= 1\n        return result\n\n", "params": {"$note": "precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index", "temperature": 0.7, "repetition_penalty": 1.176, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512, "repeat_last_n": 256}, "model": "HuggingFaceH4-starchat-playground-hf-space"}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "javascript", "prompt": "All code should be contained in ``` blocks. Write a javascript function factorial(n) with input n that returns the factorial of n using iteration", "answer": "function factorial(n){\n  let result = 1;\n\n  for (let i=2;i<=n;i++) {\n    result *= i;\n  }\n  \n  return result;\n}\n\n", "params": {"$note": "precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index", "temperature": 0.7, "repetition_penalty": 1.176, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512, "repeat_last_n": 256}, "model": "HuggingFaceH4-starchat-playground-hf-space"}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "python", "prompt": "All code should be contained in ``` blocks. Write a python function factorial(n) with input n that returns the factorial of n using recursion", "answer": "def factorial(n):\n    if n == 1:\n        return 1\n    else:\n        # The value returned by the recursive call is multiplied by n \n        # before being returned, so that we get the correct factorial value\n        return n * factorial(n - 1)\n\n", "params": {"$note": "precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index", "temperature": 0.7, "repetition_penalty": 1.176, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512, "repeat_last_n": 256}, "model": "HuggingFaceH4-starchat-playground-hf-space"}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "javascript", "prompt": "All code should be contained in ``` blocks. Write a javascript function factorial(n) with input n that returns the factorial of n using recursion", "answer": "function factorial(n){\n  if (n === 1 || n === 0) {\n    return 1;\n  } else {\n    return n * factorial(n - 1);\n  }\n}\n\n", "params": {"$note": "precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index", "temperature": 0.7, "repetition_penalty": 1.176, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512, "repeat_last_n": 256}, "model": "HuggingFaceH4-starchat-playground-hf-space"}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "python", "prompt": "All code should be contained in ``` blocks. Write a python function glork(bork) with input bork that returns the factorial of bork", "answer": "def glork(bork):\n    return math.factorial(bork)\n\n", "params": {"$note": "precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index", "temperature": 0.7, "repetition_penalty": 1.176, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512, "repeat_last_n": 256}, "model": "HuggingFaceH4-starchat-playground-hf-space"}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "javascript", "prompt": "All code should be contained in ``` blocks. Write a javascript function glork(bork) with input bork that returns the factorial of bork", "answer": "function glork(bork) {\n  let result = 1;\n\n  for (let i = 2; i <= bork; i++) {\n    result *= i;\n  }\n\n  return result;\n}\n\n", "params": {"$note": "precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index", "temperature": 0.7, "repetition_penalty": 1.176, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512, "repeat_last_n": 256}, "model": "HuggingFaceH4-starchat-playground-hf-space"}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the n-th element of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciZeroShot", "language": "python", "prompt": "All code should be contained in ``` blocks. Write a python function fib(n) with input element number n (0 based) that returns the n-th element of the fibbonaci sequence", "answer": "def fib(n):\n    if n == 0 or n == 1:\n        return n\n    else:\n        return fib(n - 2) + fib(n - 1)\n\n", "params": {"$note": "precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index", "temperature": 0.7, "repetition_penalty": 1.176, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512, "repeat_last_n": 256}, "model": "HuggingFaceH4-starchat-playground-hf-space"}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the n-th element of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciZeroShot", "language": "javascript", "prompt": "All code should be contained in ``` blocks. Write a javascript function fib(n) with input element number n (0 based) that returns the n-th element of the fibbonaci sequence", "answer": "function fib(n) {\n  if (n < 2) return n;\n  else return fib(n - 1) + fib(n - 2);\n}\n\n", "params": {"$note": "precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index", "temperature": 0.7, "repetition_penalty": 1.176, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512, "repeat_last_n": 256}, "model": "HuggingFaceH4-starchat-playground-hf-space"}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first n elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence, explicitly asking for a list", "name": "FibonacciListZeroShot", "language": "python", "prompt": "All code should be contained in ``` blocks. Write a python function fib(n) with input length n that returns a list with the first n elements of the fibbonaci sequence", "answer": "def fibonacci_sequence(n):\n    \"\"\"Generate the Fibonacci sequence up to and including `n`.\"\"\"\n    numbers = [0, 1]\n\n    while len(numbers) <= n:\n        next_number = sum(numbers[-2:])\n        numbers.append(next_number)\n\n    return numbers[:n+1]\n\n\nprint(fibonacci_sequence(5)) # Output: [0, 1, 1, 2, 3, 5]\n\n", "params": {"$note": "precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index", "temperature": 0.7, "repetition_penalty": 1.176, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512, "repeat_last_n": 256}, "model": "HuggingFaceH4-starchat-playground-hf-space"}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first n elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence, explicitly asking for a list", "name": "FibonacciListZeroShot", "language": "javascript", "prompt": "All code should be contained in ``` blocks. Write a javascript function fib(n) with input length n that returns a list with the first n elements of the fibbonaci sequence", "answer": "function fib(n) {\n  const result = [0, 1];\n\n  for (let i = 2; i < n; i++) {\n    let sum = result[i - 1] + result[i - 2];\n    result.push(sum);\n  }\n\n  return result;\n}\n\n", "params": {"$note": "precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index", "temperature": 0.7, "repetition_penalty": 1.176, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512, "repeat_last_n": 256}, "model": "HuggingFaceH4-starchat-playground-hf-space"}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first bork elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciMisnamed", "language": "python", "prompt": "All code should be contained in ``` blocks. Write a python function glork(bork) with input length bork that returns a list with the first bork elements of the fibbonaci sequence", "answer": "def glork(bork):\n    # your implementation here\n    return result_list\n\n", "params": {"$note": "precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index", "temperature": 0.7, "repetition_penalty": 1.176, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512, "repeat_last_n": 256}, "model": "HuggingFaceH4-starchat-playground-hf-space"}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first bork elements of the fibbonaci sequence", "Fact": "The fibonnaci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciMisnamed", "language": "javascript", "prompt": "All code should be contained in ``` blocks. Write a javascript function glork(bork) with input length bork that returns a list with the first bork elements of the fibbonaci sequence", "answer": "function glork(bork){\n  var result = [];\n  if (bork > 0){\n    var current = 1;\n    var next = 2;\n    for (var i=0;i<bork;++i){\n      result.push(current);\n      [current,next]=[next,current+next];\n    }\n  }\n  return result;\n}\n\n", "params": {"$note": "precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index", "temperature": 0.7, "repetition_penalty": 1.176, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512, "repeat_last_n": 256}, "model": "HuggingFaceH4-starchat-playground-hf-space"}
{"Signature": "substrcount(str, substr)", "Input": "with inputs str and substr", "Output": "counts the number of times the sub-string substr occurs in str", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "python", "prompt": "All code should be contained in ``` blocks. Write a python function substrcount(str, substr) with inputs str and substr that returns counts the number of times the sub-string substr occurs in str", "answer": "def substr_count(text, pattern):\n    count = start = 0\n    while True:\n        start = text.find(pattern, start) + 1\n        if not start: break\n        count += 1\n    return count\n\n", "params": {"$note": "precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index", "temperature": 0.7, "repetition_penalty": 1.176, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512, "repeat_last_n": 256}, "model": "HuggingFaceH4-starchat-playground-hf-space"}
{"Signature": "substrcount(str, substr)", "Input": "with inputs str and substr", "Output": "counts the number of times the sub-string substr occurs in str", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "javascript", "prompt": "All code should be contained in ``` blocks. Write a javascript function substrcount(str, substr) with inputs str and substr that returns counts the number of times the sub-string substr occurs in str", "answer": "function substrCount(str, substr) {\n  var count = 0;\n  for (var i=0;i<str.length;i++) {\n    if (str.substring(i,substr.length+i)==substr)\n      ++count;\n  }\n  return count;\n}\n\n", "params": {"$note": "precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index", "temperature": 0.7, "repetition_penalty": 1.176, "top_k": 40, "top_p": 0.1, "max_new_tokens": 512, "repeat_last_n": 256}, "model": "HuggingFaceH4-starchat-playground-hf-space"}