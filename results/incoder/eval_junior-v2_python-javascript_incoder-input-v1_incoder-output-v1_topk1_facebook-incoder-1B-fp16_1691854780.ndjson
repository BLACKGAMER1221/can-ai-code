{"Signature": "substrcount(str, substr)", "Input": "with inputs `str` and `substr`", "Output": "counts the number of times the sub-string `substr` occurs in `str`", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "python", "prompt": "# a function with inputs `str` and `substr` that returns counts the number of times the sub-string `substr` occurs in `str`\ndef <|mask:0|>\n\n# another function<|/ file |><|mask:1|><|mask:0|>", "answer": "\ndef count_substring(str, substr):\n    return str.count(substr)\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"decoder_start_token_id\": 2,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 1,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "facebook-incoder-1B-fp16", "runtime": "transformers", "code": "def count_substring(str, substr):\n    return str.count(substr)", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "count_substring", "status": 0}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 3, "status": 1}], "status": "FAIL", "passed": 6, "total": 7}
{"Signature": "substrcount(str, substr)", "Input": "with inputs `str` and `substr`", "Output": "counts the number of times the sub-string `substr` occurs in `str`", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "javascript", "prompt": "// a function with inputs `str` and `substr` that returns counts the number of times the sub-string `substr` occurs in `str`\nfunction <|mask:0|>\n\n// another function<|/ file |><|mask:1|><|mask:0|>", "answer": "\n\nfunction countSubstr(str, substr) {\n  return str.split(substr).length - 1;\n}\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"decoder_start_token_id\": 2,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 1,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "facebook-incoder-1B-fp16", "runtime": "transformers", "code": "function countSubstr(str, substr) {\n  return str.split(substr).length - 1;\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "countSubstr", "status": 0}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 3, "status": 1}], "status": "FAIL", "passed": 6, "total": 7}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "python", "prompt": "# a function with input n that returns the factorial of n using iteration\ndef <|mask:0|>\n\n# another function<|/ file |><|mask:1|><|mask:0|>", "answer": "\ndef factorial(n):\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    return fact\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"decoder_start_token_id\": 2,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 1,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "facebook-incoder-1B-fp16", "runtime": "transformers", "code": "def factorial(n):\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    return fact", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "javascript", "prompt": "// a function with input n that returns the factorial of n using iteration\nfunction <|mask:0|>\n\n// another function<|/ file |><|mask:1|><|mask:0|>", "answer": "\n\nfunction factorial(n) {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n}\n\n// another function\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"decoder_start_token_id\": 2,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 1,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "facebook-incoder-1B-fp16", "runtime": "transformers", "code": "function factorial(n) {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n}\n\n// another function", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "python", "prompt": "# a function with input n that returns the factorial of n using recursion\ndef <|mask:0|>\n\n# another function<|/ file |><|mask:1|><|mask:0|>", "answer": "\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"decoder_start_token_id\": 2,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 1,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "facebook-incoder-1B-fp16", "runtime": "transformers", "code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "javascript", "prompt": "// a function with input n that returns the factorial of n using recursion\nfunction <|mask:0|>\n\n// another function<|/ file |><|mask:1|><|mask:0|>", "answer": "\n\nfunction factorial(n) {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n}\n\n// another function\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"decoder_start_token_id\": 2,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 1,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "facebook-incoder-1B-fp16", "runtime": "transformers", "code": "function factorial(n) {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n}\n\n// another function", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "python", "prompt": "# a function with input bork that returns the factorial of bork\ndef <|mask:0|>\n\n# another function<|/ file |><|mask:1|><|mask:0|>", "answer": "\ndef factorial(bork):\n    return bork * factorial(bork - 1)\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"decoder_start_token_id\": 2,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 1,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "facebook-incoder-1B-fp16", "runtime": "transformers", "code": "def factorial(bork):\n    return bork * factorial(bork - 1)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": false, "status": 0}, {"assert": "f.call(1)", "eq": 1, "got": {"error": "maximum recursion depth exceeded", "exc_type": "RecursionError"}, "status": 0}, {"assert": "f.call(5)", "eq": 120, "got": {"error": "maximum recursion depth exceeded", "exc_type": "RecursionError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "factorial", "status": 0}], "status": "FAIL", "passed": 2, "total": 6}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "javascript", "prompt": "// a function with input bork that returns the factorial of bork\nfunction <|mask:0|>\n\n// another function<|/ file |><|mask:1|><|mask:0|>", "answer": "\n\nfunction factorial(bork) {\n  return bork * factorial(bork - 1);\n}\n\n// another function\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"decoder_start_token_id\": 2,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 1,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "facebook-incoder-1B-fp16", "runtime": "transformers", "code": "function factorial(bork) {\n  return bork * factorial(bork - 1);\n}\n\n// another function", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": false, "status": 0}, {"assert": "f.call(1)", "eq": 1, "got": {"error": "Maximum call stack size exceeded", "exc_type": "RangeError"}, "status": 0}, {"assert": "f.call(5)", "eq": 120, "got": {"error": "Maximum call stack size exceeded", "exc_type": "RangeError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "factorial", "status": 0}], "status": "FAIL", "passed": 2, "total": 6}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common denominator of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "python", "prompt": "# a function with two inputs a and b that returns the greatest common denominator of a and b\ndef <|mask:0|>\n\n# another function<|/ file |><|mask:1|><|mask:0|>", "answer": "\ndef gcd(a, b):\n    return max(a, b) % a\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"decoder_start_token_id\": 2,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 1,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "facebook-incoder-1B-fp16", "runtime": "transformers", "code": "def gcd(a, b):\n    return max(a, b) % a", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 0, "status": 0}, {"assert": "f.call(100,20)", "eq": 20, "got": 0, "status": 0}, {"assert": "f.call(5,0)", "eq": 5, "got": 0, "status": 0}, {"assert": "f.call(0,3)", "eq": 3, "got": {"error": "integer division or modulo by zero", "exc_type": "ZeroDivisionError"}, "status": 0}, {"assert": "f.call(13,7)", "eq": 1, "got": 0, "status": 0}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcd", "got": "gcd", "status": 1}], "status": "FAIL", "passed": 4, "total": 9}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common denominator of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "javascript", "prompt": "// a function with two inputs a and b that returns the greatest common denominator of a and b\nfunction <|mask:0|>\n\n// another function<|/ file |><|mask:1|><|mask:0|>", "answer": "\n\nfunction gcd(a, b) {\n  return gcd(b, a % b);\n}\n\n// another function\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"decoder_start_token_id\": 2,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 1,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "facebook-incoder-1B-fp16", "runtime": "transformers", "code": "function gcd(a, b) {\n  return gcd(b, a % b);\n}\n\n// another function", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": {"error": "Maximum call stack size exceeded", "exc_type": "RangeError"}, "status": 0}, {"assert": "f.call(100,20)", "eq": 20, "got": {"error": "Maximum call stack size exceeded", "exc_type": "RangeError"}, "status": 0}, {"assert": "f.call(5,0)", "eq": 5, "got": {"error": "Maximum call stack size exceeded", "exc_type": "RangeError"}, "status": 0}, {"assert": "f.call(0,3)", "eq": 3, "got": {"error": "Maximum call stack size exceeded", "exc_type": "RangeError"}, "status": 0}, {"assert": "f.call(13,7)", "eq": 1, "got": {"error": "Maximum call stack size exceeded", "exc_type": "RangeError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcd", "got": "gcd", "status": 1}], "status": "FAIL", "passed": 4, "total": 9}
{"Signature": "gcf(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common factor of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDAlternative", "language": "python", "prompt": "# a function with two inputs a and b that returns the greatest common factor of a and b\ndef <|mask:0|>\n\n# another function<|/ file |><|mask:1|><|mask:0|>", "answer": "\ndef gcd(a, b):\n    return max(a//b, a%b)\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"decoder_start_token_id\": 2,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 1,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "facebook-incoder-1B-fp16", "runtime": "transformers", "code": "def gcd(a, b):\n    return max(a//b, a%b)", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 5, "status": 0}, {"assert": "f.call(5,0)", "eq": 5, "got": {"error": "integer division or modulo by zero", "exc_type": "ZeroDivisionError"}, "status": 0}, {"assert": "f.call(0,3)", "eq": 3, "got": 0, "status": 0}, {"assert": "f.call(13,7)", "eq": 1, "got": 6, "status": 0}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcf", "got": "gcd", "status": 0}], "status": "FAIL", "passed": 4, "total": 9}
{"Signature": "gcf(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common factor of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDAlternative", "language": "javascript", "prompt": "// a function with two inputs a and b that returns the greatest common factor of a and b\nfunction <|mask:0|>\n\n// another function<|/ file |><|mask:1|><|mask:0|>", "answer": "\n\nfunction gcd(a, b) {\n  return b == 0? a : gcd(b, a % b);\n}\n\n// another function\nfunction gcd(a, b) {\n  return b == 0? a : gcd(b, a % b);\n}\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"decoder_start_token_id\": 2,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 1,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "facebook-incoder-1B-fp16", "runtime": "transformers", "code": "function gcd(a, b) {\n  return b == 0? a : gcd(b, a % b);\n}\n\n// another function\nfunction gcd(a, b) {\n  return b == 0? a : gcd(b, a % b);\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcf", "got": "gcd", "status": 0}], "status": "FAIL", "passed": 8, "total": 9}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common denominator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "python", "prompt": "# a function with two inputs x and banana that returns the greatest common denominator (gcd) of x and banana\ndef <|mask:0|>\n\n# another function<|/ file |><|mask:1|><|mask:0|>", "answer": "\ndef gcd(x, y):\n    return x // y if x % y == 0 else gcd(y, x % y)\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"decoder_start_token_id\": 2,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 1,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "facebook-incoder-1B-fp16", "runtime": "transformers", "code": "def gcd(x, y):\n    return x // y if x % y == 0 else gcd(y, x % y)", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 5, "status": 0}, {"assert": "f.call(5,0)", "eq": 5, "got": {"error": "integer division or modulo by zero", "exc_type": "ZeroDivisionError"}, "status": 0}, {"assert": "f.call(0,3)", "eq": 3, "got": 0, "status": 0}, {"assert": "f.call(13,7)", "eq": 1, "got": 6, "status": 0}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "y", "status": 0}, {"assert": "f.name", "eq": "fofx", "got": "gcd", "status": 0}], "status": "FAIL", "passed": 3, "total": 9}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common denominator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "javascript", "prompt": "// a function with two inputs x and banana that returns the greatest common denominator (gcd) of x and banana\nfunction <|mask:0|>\n\n// another function<|/ file |><|mask:1|><|mask:0|>", "answer": "\n\nfunction gcdFn(a, b) {\n  return Math.max(a, b);\n}\n\n// another function\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"decoder_start_token_id\": 2,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 1,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "facebook-incoder-1B-fp16", "runtime": "transformers", "code": "function gcdFn(a, b) {\n  return Math.max(a, b);\n}\n\n// another function", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 100, "status": 0}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 13, "status": 0}, {"assert": "f.args[0].name", "eq": "x", "got": "a", "status": 0}, {"assert": "f.args[1].name", "eq": "banana", "got": "b", "status": 0}, {"assert": "f.name", "eq": "fofx", "got": "gcdFn", "status": 0}], "status": "FAIL", "passed": 4, "total": 9}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "python", "prompt": "# a function with no inputs that returns a single integer, the answer to life the universe and everything given the answer to life the universe and everything is 42\ndef <|mask:0|>\n\n# another function<|/ file |><|mask:1|><|mask:0|>", "answer": "\ndef fibonacci():\n    return 42\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"decoder_start_token_id\": 2,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 1,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "facebook-incoder-1B-fp16", "runtime": "transformers", "code": "def fibonacci():\n    return 42", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "fibonacci", "status": 0}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "FAIL", "passed": 2, "total": 3}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "javascript", "prompt": "// a function with no inputs that returns a single integer, the answer to life the universe and everything given the answer to life the universe and everything is 42\nfunction <|mask:0|>\n\n// another function<|/ file |><|mask:1|><|mask:0|>", "answer": "\n\nfunction add(a, b) {\n  return a + b;\n}\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"decoder_start_token_id\": 2,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 1,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "facebook-incoder-1B-fp16", "runtime": "transformers", "code": "function add(a, b) {\n  return a + b;\n}", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "add", "status": 0}, {"assert": "len(f.args)", "eq": 0, "got": 2, "status": 0}, {"assert": "f.call()", "eq": 42, "got": null, "status": 0}], "status": "FAIL", "passed": 0, "total": 3}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "A simple list function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "python", "prompt": "# a function with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain given the capital city of Spain is Madrid\ndef <|mask:0|>\n\n# another function<|/ file |><|mask:1|><|mask:0|>", "answer": "\ndef my_function(my_list):\n    return my_list\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"decoder_start_token_id\": 2,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 1,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "facebook-incoder-1B-fp16", "runtime": "transformers", "code": "def my_function(my_list):\n    return my_list", "checks": [{"assert": "f.name", "eq": "things", "got": "my_function", "status": 0}, {"assert": "len(f.args)", "eq": 0, "got": 1, "status": 0}, {"assert": "f.call()[0]", "eq": 5, "got": "0", "status": 0}, {"assert": "f.call()[1]", "eq": "foobar", "got": "1", "status": 0}, {"assert": "f.call()[2]", "eq": "Madrid", "got": "2", "status": 0}], "status": "FAIL", "passed": 0, "total": 5}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "A simple list function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "javascript", "prompt": "// a function with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain given the capital city of Spain is Madrid\nfunction <|mask:0|>\n\n// another function<|/ file |><|mask:1|><|mask:0|>", "answer": "\n\nfunction myFunction() {\n  return [5, myString, 'Madrid'];\n}\n\n// another function\nfunction myFunction2() {\n  return [5, myString, 'Madrid', myCapitalCity];\n}\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"decoder_start_token_id\": 2,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 1,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "facebook-incoder-1B-fp16", "runtime": "transformers", "code": "function myFunction() {\n  return [5, myString, 'Madrid'];\n}\n\n// another function\nfunction myFunction2() {\n  return [5, myString, 'Madrid', myCapitalCity];\n}", "checks": [{"assert": "f.name", "eq": "things", "got": "myFunction", "status": 0}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()[0]", "eq": 5, "got": "0", "status": 0}, {"assert": "f.call()[1]", "eq": "foobar", "got": "1", "status": 0}, {"assert": "f.call()[2]", "eq": "Madrid", "got": "2", "status": 0}], "status": "FAIL", "passed": 1, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "python", "prompt": "# a function with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names given Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.\ndef <|mask:0|>\n\n# another function<|/ file |><|mask:1|><|mask:0|>", "answer": "\ndef superman_to_real_name(superman):\n    return superman.name + \" is a \" + superman.superman_name\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"decoder_start_token_id\": 2,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 1,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "facebook-incoder-1B-fp16", "runtime": "transformers", "code": "def superman_to_real_name(superman):\n    return superman.name + \" is a \" + superman.superman_name", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "superman_to_real_name", "status": 0}, {"assert": "len(f.args)", "eq": 0, "got": 1, "status": 0}, {"assert": "f.call().get('Superman')", "eq-any": ["Clark Kent", "Kal-El"], "got": null, "status": 0}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": null, "status": 0}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": null, "status": 0}], "status": "FAIL", "passed": 0, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "javascript", "prompt": "// a function with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names given Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.\nfunction <|mask:0|>\n\n// another function<|/ file |><|mask:1|><|mask:0|>", "answer": "\n\nfunction supermanToName(superman) {\n  return superman.name;\n}\n\n// another function\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"decoder_start_token_id\": 2,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 1,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "facebook-incoder-1B-fp16", "runtime": "transformers", "code": "function supermanToName(superman) {\n  return superman.name;\n}\n\n// another function", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "supermanToName", "status": 0}, {"assert": "len(f.args)", "eq": 0, "got": 1, "status": 0}, {"assert": "f.call().get('Superman')", "eq-any": ["Clark Kent", "Kal-El"], "got": null, "status": 0}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": null, "status": 0}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": null, "status": 0}], "status": "FAIL", "passed": 0, "total": 5}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the `n`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation", "name": "FibonacciZeroShot", "language": "python", "prompt": "# a function with input element number n (0 based) that returns the `n`-th element of the fibonacci sequence given The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\ndef <|mask:0|>\n\n# another function<|/ file |><|mask:1|><|mask:0|>", "answer": "\ndef fib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"decoder_start_token_id\": 2,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 1,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "facebook-incoder-1B-fp16", "runtime": "transformers", "code": "def fib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the `n`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation", "name": "FibonacciZeroShot", "language": "javascript", "prompt": "// a function with input element number n (0 based) that returns the `n`-th element of the fibonacci sequence given The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction <|mask:0|>\n\n// another function<|/ file |><|mask:1|><|mask:0|>", "answer": "\n\nfunction fib(n) {\n  if (n <= 1) return n;\n  return fib(n-1) + fib(n-2);\n}\n\n// another function\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"decoder_start_token_id\": 2,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 1,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "facebook-incoder-1B-fp16", "runtime": "transformers", "code": "function fib(n) {\n  if (n <= 1) return n;\n  return fib(n-1) + fib(n-2);\n}\n\n// another function", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "potato(g)", "Input": "with input element number g (0 based)", "Output": "the `g`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation if the name has been changed", "name": "FibonacciMisnamed", "language": "python", "prompt": "# a function with input element number g (0 based) that returns the `g`-th element of the fibonacci sequence given The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\ndef <|mask:0|>\n\n# another function<|/ file |><|mask:1|><|mask:0|>", "answer": "\ndef fib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"decoder_start_token_id\": 2,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 1,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "facebook-incoder-1B-fp16", "runtime": "transformers", "code": "def fib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "g", "got": "n", "status": 0}, {"assert": "f.name", "eq": "potato", "got": "fib", "status": 0}], "status": "FAIL", "passed": 6, "total": 8}
{"Signature": "potato(g)", "Input": "with input element number g (0 based)", "Output": "the `g`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation if the name has been changed", "name": "FibonacciMisnamed", "language": "javascript", "prompt": "// a function with input element number g (0 based) that returns the `g`-th element of the fibonacci sequence given The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction <|mask:0|>\n\n// another function<|/ file |><|mask:1|><|mask:0|>", "answer": "\n\nfunction fib(n) {\n  if (n <= 1) return n;\n  return fib(n-1) + fib(n-2);\n}\n\n// another function\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"decoder_start_token_id\": 2,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 1,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "facebook-incoder-1B-fp16", "runtime": "transformers", "code": "function fib(n) {\n  if (n <= 1) return n;\n  return fib(n-1) + fib(n-2);\n}\n\n// another function", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "g", "got": "n", "status": 0}, {"assert": "f.name", "eq": "potato", "got": "fib", "status": 0}], "status": "FAIL", "passed": 6, "total": 8}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first `n` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciListZeroShot", "language": "python", "prompt": "# a function with input length n that returns a list with the first `n` elements of the fibonacci sequence given The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\ndef <|mask:0|>\n\n# another function<|/ file |><|mask:1|><|mask:0|>", "answer": "\ndef fib(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    else:\n        return fib(n-1) + fib(n-2)\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"decoder_start_token_id\": 2,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 1,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "facebook-incoder-1B-fp16", "runtime": "transformers", "code": "def fib(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    else:\n        return fib(n-1) + fib(n-2)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [1], "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [1, 1], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [1, 1, 1, 1, 1], "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 3, "total": 7}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first `n` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciListZeroShot", "language": "javascript", "prompt": "// a function with input length n that returns a list with the first `n` elements of the fibonacci sequence given The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction <|mask:0|>\n\n// another function<|/ file |><|mask:1|><|mask:0|>", "answer": "\n\nfunction fib(n) {\n  if (n <= 1) return [1];\n  return [fib(n-1) + fib(n-2)];\n}\n\n// another function\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"decoder_start_token_id\": 2,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 1,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "facebook-incoder-1B-fp16", "runtime": "transformers", "code": "function fib(n) {\n  if (n <= 1) return [1];\n  return [fib(n-1) + fib(n-2)];\n}\n\n// another function", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": ["11"], "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": ["111"], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": ["11111111"], "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 3, "total": 7}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first `bork` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciListMisnamed", "language": "python", "prompt": "# a function with input length bork that returns a list with the first `bork` elements of the fibonacci sequence given The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\ndef <|mask:0|>\n\n# another function<|/ file |><|mask:1|><|mask:0|>", "answer": "\ndef fib_bork(bork):\n    if bork == 0:\n        return []\n    elif bork == 1:\n        return [1]\n    else:\n        return fib_bork(n - 1) + fib_bork(n - 2)\n\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"decoder_start_token_id\": 2,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 1,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "facebook-incoder-1B-fp16", "runtime": "transformers", "code": "def fib_bork(bork):\n    if bork == 0:\n        return []\n    elif bork == 1:\n        return [1]\n    else:\n        return fib_bork(n - 1) + fib_bork(n - 2)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": {"error": "name 'n' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": {"error": "name 'n' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": {"error": "name 'n' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "fib_bork", "status": 0}], "status": "FAIL", "passed": 3, "total": 8}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first `bork` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciListMisnamed", "language": "javascript", "prompt": "// a function with input length bork that returns a list with the first `bork` elements of the fibonacci sequence given The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)\nfunction <|mask:0|>\n\n// another function<|/ file |><|mask:1|><|mask:0|>", "answer": "\n\nfunction fibBork(input) {\n  let bork = [];\n  let n = input;\n  let fib = [];\n  fib[0] = 0;\n  fib[1] = 1;\n  fib[2] = 1;\n  fibBorkHelper(fib, 0, n - 1);\n  return bork;\n}\n\n// another function\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"decoder_start_token_id\": 2,\n  \"do_sample\": true,\n  \"eos_token_id\": 2,\n  \"max_new_tokens\": 512,\n  \"pad_token_id\": 1,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "facebook-incoder-1B-fp16", "runtime": "transformers", "code": "function fibBork(input) {\n  let bork = [];\n  let n = input;\n  let fib = [];\n  fib[0] = 0;\n  fib[1] = 1;\n  fib[2] = 1;\n  fibBorkHelper(fib, 0, n - 1);\n  return bork;\n}\n\n// another function", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": false, "status": 0}, {"assert": "f.call(1)", "eq": [0], "got": {"error": "fibBorkHelper is not defined", "exc_type": "ReferenceError"}, "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": {"error": "fibBorkHelper is not defined", "exc_type": "ReferenceError"}, "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": {"error": "fibBorkHelper is not defined", "exc_type": "ReferenceError"}, "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": {"error": "fibBorkHelper is not defined", "exc_type": "ReferenceError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "input", "status": 0}, {"assert": "f.name", "eq": "glork", "got": "fibBork", "status": 0}], "status": "FAIL", "passed": 1, "total": 8}