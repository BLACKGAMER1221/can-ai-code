{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "python", "prompt": "<s>[INST] Write a python function meaning_of_life() with no inputs that returns a single integer, the answer to life the universe and everything. [/INST]", "answer": "", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=1.0, top_p=1.0, top_k=1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=512, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True)", "model": "TheBloke/Mixtral-8x7B-Instruct-v0.1-AWQ", "runtime": "vllm", "code": "", "checks": [], "status": "NO_CODE", "passed": 0, "total": 3}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "javascript", "prompt": "<s>[INST] Write a javascript function meaning_of_life() with no inputs that returns a single integer, the answer to life the universe and everything. [/INST]", "answer": "", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=1.0, top_p=1.0, top_k=1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=512, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True)", "model": "TheBloke/Mixtral-8x7B-Instruct-v0.1-AWQ", "runtime": "vllm", "code": "", "checks": [], "status": "NO_CODE", "passed": 0, "total": 3}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "A simple list function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "python", "prompt": "<s>[INST] Write a python function things() with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain. [/INST]", "answer": "", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=1.0, top_p=1.0, top_k=1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=512, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True)", "model": "TheBloke/Mixtral-8x7B-Instruct-v0.1-AWQ", "runtime": "vllm", "code": "", "checks": [], "status": "NO_CODE", "passed": 0, "total": 5}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "A simple list function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "javascript", "prompt": "<s>[INST] Write a javascript function things() with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain. [/INST]", "answer": "", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=1.0, top_p=1.0, top_k=1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=512, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True)", "model": "TheBloke/Mixtral-8x7B-Instruct-v0.1-AWQ", "runtime": "vllm", "code": "", "checks": [], "status": "NO_CODE", "passed": 0, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "python", "prompt": "<s>[INST] Write a python function secretidentities() with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names. [/INST]", "answer": "", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=1.0, top_p=1.0, top_k=1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=512, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True)", "model": "TheBloke/Mixtral-8x7B-Instruct-v0.1-AWQ", "runtime": "vllm", "code": "", "checks": [], "status": "NO_CODE", "passed": 0, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "javascript", "prompt": "<s>[INST] Write a javascript function secretidentities() with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names. [/INST]", "answer": "", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=1.0, top_p=1.0, top_k=1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=512, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True)", "model": "TheBloke/Mixtral-8x7B-Instruct-v0.1-AWQ", "runtime": "vllm", "code": "", "checks": [], "status": "NO_CODE", "passed": 0, "total": 5}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common denominator of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "python", "prompt": "<s>[INST] Write a python function gcd(a, b) with two inputs a and b that returns the greatest common denominator of a and b. [/INST]", "answer": "", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=1.0, top_p=1.0, top_k=1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=512, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True)", "model": "TheBloke/Mixtral-8x7B-Instruct-v0.1-AWQ", "runtime": "vllm", "code": "", "checks": [], "status": "NO_CODE", "passed": 0, "total": 9}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common denominator of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "javascript", "prompt": "<s>[INST] Write a javascript function gcd(a, b) with two inputs a and b that returns the greatest common denominator of a and b. [/INST]", "answer": "", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=1.0, top_p=1.0, top_k=1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=512, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True)", "model": "TheBloke/Mixtral-8x7B-Instruct-v0.1-AWQ", "runtime": "vllm", "code": "", "checks": [], "status": "NO_CODE", "passed": 0, "total": 9}
{"Signature": "gcf(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common factor of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDAlternative", "language": "python", "prompt": "<s>[INST] Write a python function gcf(a, b) with two inputs a and b that returns the greatest common factor of a and b. [/INST]", "answer": "", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=1.0, top_p=1.0, top_k=1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=512, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True)", "model": "TheBloke/Mixtral-8x7B-Instruct-v0.1-AWQ", "runtime": "vllm", "code": "", "checks": [], "status": "NO_CODE", "passed": 0, "total": 9}
{"Signature": "gcf(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common factor of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDAlternative", "language": "javascript", "prompt": "<s>[INST] Write a javascript function gcf(a, b) with two inputs a and b that returns the greatest common factor of a and b. [/INST]", "answer": "", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=1.0, top_p=1.0, top_k=1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=512, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True)", "model": "TheBloke/Mixtral-8x7B-Instruct-v0.1-AWQ", "runtime": "vllm", "code": "", "checks": [], "status": "NO_CODE", "passed": 0, "total": 9}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common denominator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "python", "prompt": "<s>[INST] Write a python function fofx(x, banana) with two inputs x and banana that returns the greatest common denominator (gcd) of x and banana. [/INST]", "answer": "", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=1.0, top_p=1.0, top_k=1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=512, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True)", "model": "TheBloke/Mixtral-8x7B-Instruct-v0.1-AWQ", "runtime": "vllm", "code": "", "checks": [], "status": "NO_CODE", "passed": 0, "total": 9}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common denominator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "javascript", "prompt": "<s>[INST] Write a javascript function fofx(x, banana) with two inputs x and banana that returns the greatest common denominator (gcd) of x and banana. [/INST]", "answer": "", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=1.0, top_p=1.0, top_k=1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=512, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True)", "model": "TheBloke/Mixtral-8x7B-Instruct-v0.1-AWQ", "runtime": "vllm", "code": "", "checks": [], "status": "NO_CODE", "passed": 0, "total": 9}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "python", "prompt": "<s>[INST] Write a python function factorial(n) with input n that returns the factorial of n using iteration. [/INST]", "answer": "", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=1.0, top_p=1.0, top_k=1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=512, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True)", "model": "TheBloke/Mixtral-8x7B-Instruct-v0.1-AWQ", "runtime": "vllm", "code": "", "checks": [], "status": "NO_CODE", "passed": 0, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "javascript", "prompt": "<s>[INST] Write a javascript function factorial(n) with input n that returns the factorial of n using iteration. [/INST]", "answer": "", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=1.0, top_p=1.0, top_k=1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=512, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True)", "model": "TheBloke/Mixtral-8x7B-Instruct-v0.1-AWQ", "runtime": "vllm", "code": "", "checks": [], "status": "NO_CODE", "passed": 0, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "python", "prompt": "<s>[INST] Write a python function factorial(n) with input n that returns the factorial of n using recursion. [/INST]", "answer": "", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=1.0, top_p=1.0, top_k=1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=512, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True)", "model": "TheBloke/Mixtral-8x7B-Instruct-v0.1-AWQ", "runtime": "vllm", "code": "", "checks": [], "status": "NO_CODE", "passed": 0, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "javascript", "prompt": "<s>[INST] Write a javascript function factorial(n) with input n that returns the factorial of n using recursion. [/INST]", "answer": "", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=1.0, top_p=1.0, top_k=1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=512, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True)", "model": "TheBloke/Mixtral-8x7B-Instruct-v0.1-AWQ", "runtime": "vllm", "code": "", "checks": [], "status": "NO_CODE", "passed": 0, "total": 4}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "python", "prompt": "<s>[INST] Write a python function glork(bork) with input bork that returns the factorial of bork. [/INST]", "answer": "", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=1.0, top_p=1.0, top_k=1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=512, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True)", "model": "TheBloke/Mixtral-8x7B-Instruct-v0.1-AWQ", "runtime": "vllm", "code": "", "checks": [], "status": "NO_CODE", "passed": 0, "total": 6}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "javascript", "prompt": "<s>[INST] Write a javascript function glork(bork) with input bork that returns the factorial of bork. [/INST]", "answer": "", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=1.0, top_p=1.0, top_k=1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=512, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True)", "model": "TheBloke/Mixtral-8x7B-Instruct-v0.1-AWQ", "runtime": "vllm", "code": "", "checks": [], "status": "NO_CODE", "passed": 0, "total": 6}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the `n`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation", "name": "FibonacciZeroShot", "language": "python", "prompt": "<s>[INST] Write a python function fib(n) with input element number n (0 based) that returns the `n`-th element of the fibonacci sequence. [/INST]", "answer": "", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=1.0, top_p=1.0, top_k=1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=512, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True)", "model": "TheBloke/Mixtral-8x7B-Instruct-v0.1-AWQ", "runtime": "vllm", "code": "", "checks": [], "status": "NO_CODE", "passed": 0, "total": 7}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the `n`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation", "name": "FibonacciZeroShot", "language": "javascript", "prompt": "<s>[INST] Write a javascript function fib(n) with input element number n (0 based) that returns the `n`-th element of the fibonacci sequence. [/INST]", "answer": "", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=1.0, top_p=1.0, top_k=1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=512, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True)", "model": "TheBloke/Mixtral-8x7B-Instruct-v0.1-AWQ", "runtime": "vllm", "code": "", "checks": [], "status": "NO_CODE", "passed": 0, "total": 7}
{"Signature": "potato(g)", "Input": "with input element number g (0 based)", "Output": "the `g`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation if the name has been changed", "name": "FibonacciMisnamed", "language": "python", "prompt": "<s>[INST] Write a python function potato(g) with input element number g (0 based) that returns the `g`-th element of the fibonacci sequence. [/INST]", "answer": "", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=1.0, top_p=1.0, top_k=1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=512, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True)", "model": "TheBloke/Mixtral-8x7B-Instruct-v0.1-AWQ", "runtime": "vllm", "code": "", "checks": [], "status": "NO_CODE", "passed": 0, "total": 8}
{"Signature": "potato(g)", "Input": "with input element number g (0 based)", "Output": "the `g`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation if the name has been changed", "name": "FibonacciMisnamed", "language": "javascript", "prompt": "<s>[INST] Write a javascript function potato(g) with input element number g (0 based) that returns the `g`-th element of the fibonacci sequence. [/INST]", "answer": "", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=1.0, top_p=1.0, top_k=1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=512, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True)", "model": "TheBloke/Mixtral-8x7B-Instruct-v0.1-AWQ", "runtime": "vllm", "code": "", "checks": [], "status": "NO_CODE", "passed": 0, "total": 8}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first `n` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciListZeroShot", "language": "python", "prompt": "<s>[INST] Write a python function fib(n) with input length n that returns a list with the first `n` elements of the fibonacci sequence. [/INST]", "answer": "", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=1.0, top_p=1.0, top_k=1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=512, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True)", "model": "TheBloke/Mixtral-8x7B-Instruct-v0.1-AWQ", "runtime": "vllm", "code": "", "checks": [], "status": "NO_CODE", "passed": 0, "total": 7}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first `n` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciListZeroShot", "language": "javascript", "prompt": "<s>[INST] Write a javascript function fib(n) with input length n that returns a list with the first `n` elements of the fibonacci sequence. [/INST]", "answer": "", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=1.0, top_p=1.0, top_k=1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=512, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True)", "model": "TheBloke/Mixtral-8x7B-Instruct-v0.1-AWQ", "runtime": "vllm", "code": "", "checks": [], "status": "NO_CODE", "passed": 0, "total": 7}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first `bork` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciListMisnamed", "language": "python", "prompt": "<s>[INST] Write a python function glork(bork) with input length bork that returns a list with the first `bork` elements of the fibonacci sequence. [/INST]", "answer": "", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=1.0, top_p=1.0, top_k=1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=512, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True)", "model": "TheBloke/Mixtral-8x7B-Instruct-v0.1-AWQ", "runtime": "vllm", "code": "", "checks": [], "status": "NO_CODE", "passed": 0, "total": 8}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first `bork` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciListMisnamed", "language": "javascript", "prompt": "<s>[INST] Write a javascript function glork(bork) with input length bork that returns a list with the first `bork` elements of the fibonacci sequence. [/INST]", "answer": "", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=1.0, top_p=1.0, top_k=1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=512, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True)", "model": "TheBloke/Mixtral-8x7B-Instruct-v0.1-AWQ", "runtime": "vllm", "code": "", "checks": [], "status": "NO_CODE", "passed": 0, "total": 8}
{"Signature": "substrcount(str, substr)", "Input": "with inputs `str` and `substr`", "Output": "counts the number of times the sub-string `substr` occurs in `str`", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "python", "prompt": "<s>[INST] Write a python function substrcount(str, substr) with inputs `str` and `substr` that returns counts the number of times the sub-string `substr` occurs in `str`. [/INST]", "answer": "", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=1.0, top_p=1.0, top_k=1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=512, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True)", "model": "TheBloke/Mixtral-8x7B-Instruct-v0.1-AWQ", "runtime": "vllm", "code": "", "checks": [], "status": "NO_CODE", "passed": 0, "total": 7}
{"Signature": "substrcount(str, substr)", "Input": "with inputs `str` and `substr`", "Output": "counts the number of times the sub-string `substr` occurs in `str`", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "javascript", "prompt": "<s>[INST] Write a javascript function substrcount(str, substr) with inputs `str` and `substr` that returns counts the number of times the sub-string `substr` occurs in `str`. [/INST]", "answer": "", "params": "SamplingParams(n=1, best_of=1, presence_penalty=1.0, frequency_penalty=0.0, repetition_penalty=1.0, temperature=1.0, top_p=1.0, top_k=1, min_p=0.0, use_beam_search=False, length_penalty=1.0, early_stopping=False, stop=[], stop_token_ids=[], include_stop_str_in_output=False, ignore_eos=False, max_tokens=512, logprobs=None, prompt_logprobs=None, skip_special_tokens=True, spaces_between_special_tokens=True)", "model": "TheBloke/Mixtral-8x7B-Instruct-v0.1-AWQ", "runtime": "vllm", "code": "", "checks": [], "status": "NO_CODE", "passed": 0, "total": 7}