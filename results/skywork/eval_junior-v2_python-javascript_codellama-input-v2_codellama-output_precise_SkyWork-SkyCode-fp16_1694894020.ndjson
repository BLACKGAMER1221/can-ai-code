{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "python", "prompt": "# a python function with no inputs that returns a single integer, the answer to life the universe and everything\ndef meaning_of_life():", "answer": "def meaning_of_life():\n    return 42\n\nprint(meaning_of_life())  # 42\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "SkyWork-SkyCode-fp16", "runtime": "transformers", "code": "def meaning_of_life():\n    return 42\n\nprint(meaning_of_life())  # 42", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "javascript", "prompt": "// a javascript function with no inputs that returns a single integer, the answer to life the universe and everything\nfunction meaning_of_life() {", "answer": "\nfunction meaning_of_life() {\n    return 42;\n}\n\n// another way to write it:\nconst meaningOfLife = function() {\n  return 42;\n};\n\nconsole.log(meaningOfLife());", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "SkyWork-SkyCode-fp16", "runtime": "transformers", "code": "function meaning_of_life() {\n    return 42;\n}\n\n// another way to write it:\nconst meaningOfLife = function() {\n  return 42;\n};\n\nconsole.log(meaningOfLife());", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "A simple list function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "python", "prompt": "# a python function with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain\ndef things():", "answer": "def things():\n    return [5, \"foobar\", \"Espa\u00f1a\"]\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "SkyWork-SkyCode-fp16", "runtime": "transformers", "code": "def things():\n    return [5, \"foobar\", \"Espa\u00f1a\"]", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()[0]", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call()[1]", "eq": "foobar", "got": "foobar", "status": 1}, {"assert": "f.call()[2]", "eq": "Madrid", "got": "Espa\u00f1a", "status": 0}], "status": "FAIL", "passed": 4, "total": 5}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "A simple list function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "javascript", "prompt": "// a javascript function with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain\nfunction things() {", "answer": "\nfunction things() {\n  return [5, \"foobar\", \"Espa\u00f1a\"];\n}\n\nconsole.log(things());", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "SkyWork-SkyCode-fp16", "runtime": "transformers", "code": "function things() {\n  return [5, \"foobar\", \"Espa\u00f1a\"];\n}\n\nconsole.log(things());", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()[0]", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call()[1]", "eq": "foobar", "got": "foobar", "status": 1}, {"assert": "f.call()[2]", "eq": "Madrid", "got": "Espa\u00f1a", "status": 0}], "status": "FAIL", "passed": 4, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "python", "prompt": "# a python function with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names\ndef secretidentities():", "answer": "def secretidentities():\n    return {\"Superman\": \"Superman\", \"Batman\": \"Batman\", \"Spider-Man\": \"Spider-Man\"}\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "SkyWork-SkyCode-fp16", "runtime": "transformers", "code": "def secretidentities():\n    return {\"Superman\": \"Superman\", \"Batman\": \"Batman\", \"Spider-Man\": \"Spider-Man\"}", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secretidentities", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq-any": ["Clark Kent", "Kal-El"], "got": "Superman", "status": 0}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": "Batman", "status": 0}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": "Spider-Man", "status": 0}], "status": "FAIL", "passed": 2, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "javascript", "prompt": "// a javascript function with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names\nfunction secretidentities() {", "answer": "\nfunction secretidentities() {\n    var result = {};\n    for (var i in superheroes) {\n        if (superheroes[i].id === \"Superman\") {\n            result[\"Superman\"] = superheroes[i];\n        }\n        else if (superheroes[i].id === \"Batman\") {\n            result[\"Batman\"] = superheroes[i];\n        }\n        else if (superheroes[i].id === \"Spider-Man\") {\n            result[\"Spider-Man\"] = superheroes[i];\n        }\n    }\n    return result;\n};", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "SkyWork-SkyCode-fp16", "runtime": "transformers", "code": "function secretidentities() {\n    var result = {};\n    for (var i in superheroes) {\n        if (superheroes[i].id === \"Superman\") {\n            result[\"Superman\"] = superheroes[i];\n        }\n        else if (superheroes[i].id === \"Batman\") {\n            result[\"Batman\"] = superheroes[i];\n        }\n        else if (superheroes[i].id === \"Spider-Man\") {\n            result[\"Spider-Man\"] = superheroes[i];\n        }\n    }\n    return result;\n};", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secretidentities", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq-any": ["Clark Kent", "Kal-El"], "got": null, "status": 0}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": null, "status": 0}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": null, "status": 0}], "status": "FAIL", "passed": 2, "total": 5}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common denominator of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "python", "prompt": "# a python function with two inputs a and b that returns the greatest common denominator of a and b\ndef gcd(a, b):", "answer": "def gcd(a, b):\n    if b==0:\n        return a\n    else:\n        return gcd(b, a%b)\n\n# a python function to calculate the power of x^y\ndef pow(x,y):\n    result=1\n    for i in range(y):\n        result*=x\n    return result\n\n# a python function to find the minimum value between 2 numbers\ndef min_val(number1,number2):\n    if(number1<number2):\n        temp=number1\n        number1=number2\n        number2=temp\n    return min(number1,number2)\n\n# a python function to find the maximum value between 2 numbers\ndef max_val(number1,number2):\n    if(number1>number2):\n        temp=number1\n        number1=number2\n        number2=temp\n    return max(number1,number2)\n\n# a python function to find the sum of all elements from an array\ndef sum_array(arr):\n    total=0\n    for i in range(len(arr)):\n        total+=arr[i]\n    return total\n\n# a python function to find the product of all elements from an array\ndef prod_array(arr):\n    total=1\n    for i in range(len(arr)):\n        total*=arr[i]\n    return total\n\n# a python function to find the average of all elements from an array\ndef avg_array(arr):\n    total=0\n    for i in range(len(arr)):\n        total+=arr[i]\n    return float(total)/len(arr)\n\n# a python function to find the median of an array\ndef median_array(arr):\n    length=len(arr)\n    mid\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "SkyWork-SkyCode-fp16", "runtime": "transformers", "code": "def gcd(a, b):\n    if b==0:\n        return a\n    else:\n        return gcd(b, a%b)\n\n# a python function to calculate the power of x^y\ndef pow(x,y):\n    result=1\n    for i in range(y):\n        result*=x\n    return result\n\n# a python function to find the minimum value between 2 numbers\ndef min_val(number1,number2):\n    if(number1<number2):\n        temp=number1\n        number1=number2\n        number2=temp\n    return min(number1,number2)\n\n# a python function to find the maximum value between 2 numbers\ndef max_val(number1,number2):\n    if(number1>number2):\n        temp=number1\n        number1=number2\n        number2=temp\n    return max(number1,number2)\n\n# a python function to find the sum of all elements from an array\ndef sum_array(arr):\n    total=0\n    for i in range(len(arr)):\n        total+=arr[i]\n    return total\n\n# a python function to find the product of all elements from an array\ndef prod_array(arr):\n    total=1\n    for i in range(len(arr)):\n        total*=arr[i]\n    return total\n\n# a python function to find the average of all elements from an array\ndef avg_array(arr):\n    total=0\n    for i in range(len(arr)):\n        total+=arr[i]\n    return float(total)/len(arr)\n\n# a python function to find the median of an array\ndef median_array(arr):\n    length=len(arr)\n    mid", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcd", "got": "gcd", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common denominator of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "javascript", "prompt": "// a javascript function with two inputs a and b that returns the greatest common denominator of a and b\nfunction gcd(a, b) {", "answer": "\nfunction gcd(a, b) {\n  if (b == 0) return a;\n  else return gcd(b, a%b);\n}\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "SkyWork-SkyCode-fp16", "runtime": "transformers", "code": "function gcd(a, b) {\n  if (b == 0) return a;\n  else return gcd(b, a%b);\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcd", "got": "gcd", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "gcf(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common factor of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDAlternative", "language": "python", "prompt": "# a python function with two inputs a and b that returns the greatest common factor of a and b\ndef gcf(a, b):", "answer": "def gcf(a, b):\n    if a%b==0:\n        return b\n    else:\n        return gcf(b, a%b)\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "SkyWork-SkyCode-fp16", "runtime": "transformers", "code": "def gcf(a, b):\n    if a%b==0:\n        return b\n    else:\n        return gcf(b, a%b)", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": {"error": "integer division or modulo by zero", "exc_type": "ZeroDivisionError"}, "status": 0}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcf", "got": "gcf", "status": 1}], "status": "FAIL", "passed": 8, "total": 9}
{"Signature": "gcf(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common factor of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDAlternative", "language": "javascript", "prompt": "// a javascript function with two inputs a and b that returns the greatest common factor of a and b\nfunction gcf(a, b) {", "answer": "\nfunction gcf(a, b) {\n  return Math.max(Math.min(b, a), 1);\n}\n\n// another solution: https://stackoverflow.com/questions/5872816/how-to-get-a-recursive-function-call-number-of-items-in-a-single-digits-multiplication-table\nconst multiplyTable = (n) => {\n    let table = [];\n    for (let i = 1; i <= n; i++) {\n        table.push(i);\n    }\n    while (table[table.length-1] > 1) {\n        let lastDigit = table[table.length-2];\n        if (lastDigit%2 === 0) {\n            table[table.length-1] /= 2;\n            table[table.length-2] *= 3;\n        } else {\n            table[table.length-1] = 3*table[table.length-1];\n            table[table.length-2] = 3*table[table.length-2];\n        }\n    }\n    return table;\n};", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "SkyWork-SkyCode-fp16", "runtime": "transformers", "code": "function gcf(a, b) {\n  return Math.max(Math.min(b, a), 1);\n}\n\n// another solution: https://stackoverflow.com/questions/5872816/how-to-get-a-recursive-function-call-number-of-items-in-a-single-digits-multiplication-table\nconst multiplyTable = (n) => {\n    let table = [];\n    for (let i = 1; i <= n; i++) {\n        table.push(i);\n    }\n    while (table[table.length-1] > 1) {\n        let lastDigit = table[table.length-2];\n        if (lastDigit%2 === 0) {\n            table[table.length-1] /= 2;\n            table[table.length-2] *= 3;\n        } else {\n            table[table.length-1] = 3*table[table.length-1];\n            table[table.length-2] = 3*table[table.length-2];\n        }\n    }\n    return table;\n};", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 1, "status": 0}, {"assert": "f.call(0,3)", "eq": 3, "got": 1, "status": 0}, {"assert": "f.call(13,7)", "eq": 1, "got": 7, "status": 0}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcf", "got": "gcf", "status": 1}], "status": "FAIL", "passed": 6, "total": 9}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common denominator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "python", "prompt": "# a python function with two inputs x and banana that returns the greatest common denominator (gcd) of x and banana\ndef fofx(x, banana):", "answer": "def fofx(x, banana):\n    return math.gcd(x, banana)\n\nprint(fofx(10, 5))  # 5\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "SkyWork-SkyCode-fp16", "runtime": "transformers", "code": "def fofx(x, banana):\n    return math.gcd(x, banana)\n\nprint(fofx(10, 5))  # 5", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "banana", "status": 1}, {"assert": "f.name", "eq": "fofx", "got": "fofx", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common denominator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "javascript", "prompt": "// a javascript function with two inputs x and banana that returns the greatest common denominator (gcd) of x and banana\nfunction fofx(x, banana) {", "answer": "\nfunction fofx(x, banana) {\n    return Math.max(banana, x);\n}\n\nconsole.log(fofx(10, 20));", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "SkyWork-SkyCode-fp16", "runtime": "transformers", "code": "function fofx(x, banana) {\n    return Math.max(banana, x);\n}\n\nconsole.log(fofx(10, 20));", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 100, "status": 0}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 13, "status": 0}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "banana", "status": 1}, {"assert": "f.name", "eq": "fofx", "got": "fofx", "status": 1}], "status": "FAIL", "passed": 7, "total": 9}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "python", "prompt": "# a python function with input n that returns the factorial of n using iteration\ndef factorial(n):", "answer": "def factorial(n):\n    if n==1:\n        return 1\n    else:\n        return n*factorial(n-1)\n\nprint(factorial(5))\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "SkyWork-SkyCode-fp16", "runtime": "transformers", "code": "def factorial(n):\n    if n==1:\n        return 1\n    else:\n        return n*factorial(n-1)\n\nprint(factorial(5))", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "javascript", "prompt": "// a javascript function with input n that returns the factorial of n using iteration\nfunction factorial(n) {", "answer": "\nfunction factorial(n) {\n  var result = 1;\n  for (var i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nconsole.log(factorial(5));", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "SkyWork-SkyCode-fp16", "runtime": "transformers", "code": "function factorial(n) {\n  var result = 1;\n  for (var i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n}\nconsole.log(factorial(5));", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "python", "prompt": "# a python function with input n that returns the factorial of n using recursion\ndef factorial(n):", "answer": "def factorial(n):\n    if n==1:\n        return 1\n    else:\n        return n*factorial(n-1)\n\nprint(factorial(5))\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "SkyWork-SkyCode-fp16", "runtime": "transformers", "code": "def factorial(n):\n    if n==1:\n        return 1\n    else:\n        return n*factorial(n-1)\n\nprint(factorial(5))", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "javascript", "prompt": "// a javascript function with input n that returns the factorial of n using recursion\nfunction factorial(n) {", "answer": "\nfunction factorial(n) {\n  if (n === 1) return 1;\n  else return n*factorial(n-1);\n}\nconsole.log(factorial(5));", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "SkyWork-SkyCode-fp16", "runtime": "transformers", "code": "function factorial(n) {\n  if (n === 1) return 1;\n  else return n*factorial(n-1);\n}\nconsole.log(factorial(5));", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "python", "prompt": "# a python function with input bork that returns the factorial of bork\ndef glork(bork):", "answer": "def glork(bork):\n    return factorial(bork)\n\n# a python function to calculate the sum of all numbers in an array\ndef sum_array(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total\n\n# a python function to find the average of all numbers in an array\ndef avg_array(arr):\n    total = sum(arr)/len(arr)\n    return total\n\n# a python function to find the median of all numbers in an array\ndef med_array(arr):\n    if (len(arr)%2==0):\n        midpoint = int((len(arr)-1)/2)\n    else:\n        midpoint = int((len(arr))/2)\n    total = sum_array(arr[0:midpoint])+sum_array(arr[midpoint+1:])\n    return (total/2)\n\n# a python function to find the mode of all numbers in an array\ndef mode_array(arr):\n    count = {}\n    maxval = -1\n    minval = 100000000\n    for num in arr:\n        if (num not in count):\n            count[num] = 1\n        else:\n            count[num] += 1\n        if (count[num]>maxval):\n            maxval = count[num]\n        elif (count[num]<minval):\n            minval = count[num]\n        else:\n            continue\n    return (maxval,minval)\n\n# a python function to find the standard deviation of all numbers in an array\ndef stdev_array(arr):\n    mean = sum_array(arr)*1.0/len(arr)\n    variance = 0.0\n\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "SkyWork-SkyCode-fp16", "runtime": "transformers", "code": "def glork(bork):\n    return factorial(bork)\n\n# a python function to calculate the sum of all numbers in an array\ndef sum_array(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total\n\n# a python function to find the average of all numbers in an array\ndef avg_array(arr):\n    total = sum(arr)/len(arr)\n    return total\n\n# a python function to find the median of all numbers in an array\ndef med_array(arr):\n    if (len(arr)%2==0):\n        midpoint = int((len(arr)-1)/2)\n    else:\n        midpoint = int((len(arr))/2)\n    total = sum_array(arr[0:midpoint])+sum_array(arr[midpoint+1:])\n    return (total/2)\n\n# a python function to find the mode of all numbers in an array\ndef mode_array(arr):\n    count = {}\n    maxval = -1\n    minval = 100000000\n    for num in arr:\n        if (num not in count):\n            count[num] = 1\n        else:\n            count[num] += 1\n        if (count[num]>maxval):\n            maxval = count[num]\n        elif (count[num]<minval):\n            minval = count[num]\n        else:\n            continue\n    return (maxval,minval)\n\n# a python function to find the standard deviation of all numbers in an array\ndef stdev_array(arr):\n    mean = sum_array(arr)*1.0/len(arr)\n    variance = 0.0", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": false, "status": 0}, {"assert": "f.call(1)", "eq": 1, "got": {"error": "name 'factorial' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(5)", "eq": 120, "got": {"error": "name 'factorial' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 3, "total": 6}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "javascript", "prompt": "// a javascript function with input bork that returns the factorial of bork\nfunction glork(bork) {", "answer": "\nfunction glork(bork) {\n    return function(x) {\n        if (x < 0) throw new Error(\"Negative argument\");\n        else if (x == 0) return 1;\n        else return x*bork(x);\n    }\n};\n\nvar f = glork(function(n) {\n  return n+2;\n});\nconsole.log(f(3));", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "SkyWork-SkyCode-fp16", "runtime": "transformers", "code": "function glork(bork) {\n    return function(x) {\n        if (x < 0) throw new Error(\"Negative argument\");\n        else if (x == 0) return 1;\n        else return x*bork(x);\n    }\n};\n\nvar f = glork(function(n) {\n  return n+2;\n});\nconsole.log(f(3));", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": "Expecting value: line 1 column 1 (char 0)", "status": 0}, {"assert": "f.call(1)", "eq": 1, "got": "Expecting value: line 1 column 1 (char 0)", "status": 0}, {"assert": "f.call(5)", "eq": 120, "got": "Expecting value: line 1 column 1 (char 0)", "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 3, "total": 6}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the `n`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation", "name": "FibonacciZeroShot", "language": "python", "prompt": "# a python function with input element number n (0 based) that returns the `n`-th element of the fibonacci sequence\ndef fib(n):", "answer": "def fib(n):\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return fib(n-1)+fib(n-2)\n\nprint(fib(5))\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "SkyWork-SkyCode-fp16", "runtime": "transformers", "code": "def fib(n):\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return fib(n-1)+fib(n-2)\n\nprint(fib(5))", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the `n`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation", "name": "FibonacciZeroShot", "language": "javascript", "prompt": "// a javascript function with input element number n (0 based) that returns the `n`-th element of the fibonacci sequence\nfunction fib(n) {", "answer": "\nfunction fib(n) {\n  if (!n) return 0;\n  let prev, next;\n  const arr = [0,1];\n  for (let i = 2; i<=n;i++) {\n    next = arr[prev]+arr[i-1];\n    prev = i;\n    arr.push(next);\n  }\n  return arr[n];\n};", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "SkyWork-SkyCode-fp16", "runtime": "transformers", "code": "function fib(n) {\n  if (!n) return 0;\n  let prev, next;\n  const arr = [0,1];\n  for (let i = 2; i<=n;i++) {\n    next = arr[prev]+arr[i-1];\n    prev = i;\n    arr.push(next);\n  }\n  return arr[n];\n};", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": null, "status": 0}, {"assert": "f.call(3)", "eq": 2, "got": null, "status": 0}, {"assert": "f.call(5)", "eq": 5, "got": null, "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 4, "total": 7}
{"Signature": "potato(g)", "Input": "with input element number g (0 based)", "Output": "the `g`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation if the name has been changed", "name": "FibonacciMisnamed", "language": "python", "prompt": "# a python function with input element number g (0 based) that returns the `g`-th element of the fibonacci sequence\ndef potato(g):", "answer": "def potato(g):\n    return g**2\n\n# a python function to calculate the sum of all elements in an array\ndef sum_array(arr, n):\n    s=0\n    for i in range(n-1):\n        s+=arr[i]\n    return s\n\n# a python function to find the nth term of the Fibonacci series\ndef nthTermOfTheSeries(fib, n, m):\n    if m==0:\n        return fib[0]\n    elif m>len(fib)-1:\n        return None\n    else:\n        return fib[n-1]+fib[n-2]\n\n# a python function to print the first n terms of the Fibonacci series\ndef printFirstN(terms, n):\n    for i in range(0, n):\n        print(\"{:d}\".format(i), end=\"\")\n    print()\n\n# a python function to print the last n terms of the Fibonacci series\ndef printLastN(terms, n):\n    for i in range(len(terms)-1, -1, -1):\n        print(\"{:d}\".format(i), end=\"\")\n    print()\n\n# a python function to print the first n terms of the Fibonacci series\ndef printFirstN2(terms, n):\n    for i in range(0, n):\n        print(\"{:d}\".format(i), end=\"\")\n    print()\n\n# a python function to print the last n terms of the Fibonacci series\ndef printLastN2(terms, n):\n    for i in range(len(terms)-1, -1, -1):\n        print(\"{:d}\".format\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "SkyWork-SkyCode-fp16", "runtime": "transformers", "code": "def potato(g):\n    return g**2\n\n# a python function to calculate the sum of all elements in an array\ndef sum_array(arr, n):\n    s=0\n    for i in range(n-1):\n        s+=arr[i]\n    return s\n\n# a python function to find the nth term of the Fibonacci series\ndef nthTermOfTheSeries(fib, n, m):\n    if m==0:\n        return fib[0]\n    elif m>len(fib)-1:\n        return None\n    else:\n        return fib[n-1]+fib[n-2]\n\n# a python function to print the first n terms of the Fibonacci series\ndef printFirstN(terms, n):\n    for i in range(0, n):\n        print(\"{:d}\".format(i), end=\"\")\n    print()\n\n# a python function to print the last n terms of the Fibonacci series\ndef printLastN(terms, n):\n    for i in range(len(terms)-1, -1, -1):\n        print(\"{:d}\".format(i), end=\"\")\n    print()\n\n# a python function to print the first n terms of the Fibonacci series\ndef printFirstN2(terms, n):\n    for i in range(0, n):\n        print(\"{:d}\".format(i), end=\"\")\n    print()\n\n# a python function to print the last n terms of the Fibonacci series\ndef printLastN2(terms, n):\n    for i in range(len(terms)-1, -1, -1):\n        print(\"{:d}\".format", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": {"error": "unexpected EOF while parsing (<string>, line 41)", "exc_type": "SyntaxError"}, "status": 0}, {"assert": "f.call(1)", "eq": 1, "got": {"error": "unexpected EOF while parsing (<string>, line 41)", "exc_type": "SyntaxError"}, "status": 0}, {"assert": "f.call(2)", "eq": 1, "got": {"error": "unexpected EOF while parsing (<string>, line 41)", "exc_type": "SyntaxError"}, "status": 0}, {"assert": "f.call(3)", "eq": 2, "got": {"error": "unexpected EOF while parsing (<string>, line 41)", "exc_type": "SyntaxError"}, "status": 0}, {"assert": "f.call(5)", "eq": 5, "got": {"error": "unexpected EOF while parsing (<string>, line 41)", "exc_type": "SyntaxError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "g", "got": "g", "status": 1}, {"assert": "f.name", "eq": "potato", "got": "potato", "status": 1}], "status": "FAIL", "passed": 3, "total": 8}
{"Signature": "potato(g)", "Input": "with input element number g (0 based)", "Output": "the `g`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation if the name has been changed", "name": "FibonacciMisnamed", "language": "javascript", "prompt": "// a javascript function with input element number g (0 based) that returns the `g`-th element of the fibonacci sequence\nfunction potato(g) {", "answer": "\nfunction potato(g) {\n  return Math.pow(2, g);\n}\n\nconsole.log(potato(0), potato(1), potato(2), potato(3));", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "SkyWork-SkyCode-fp16", "runtime": "transformers", "code": "function potato(g) {\n  return Math.pow(2, g);\n}\n\nconsole.log(potato(0), potato(1), potato(2), potato(3));", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 1, "status": 0}, {"assert": "f.call(1)", "eq": 1, "got": 2, "status": 0}, {"assert": "f.call(2)", "eq": 1, "got": 4, "status": 0}, {"assert": "f.call(3)", "eq": 2, "got": 8, "status": 0}, {"assert": "f.call(5)", "eq": 5, "got": 32, "status": 0}, {"assert": "f.args[0].name", "eq": "g", "got": "g", "status": 1}, {"assert": "f.name", "eq": "potato", "got": "potato", "status": 1}], "status": "FAIL", "passed": 3, "total": 8}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first `n` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciListZeroShot", "language": "python", "prompt": "# a python function with input length n that returns a list with the first `n` elements of the fibonacci sequence\ndef fib(n):", "answer": "def fib(n):\n    if n==0:\n        return [0]\n    elif n==1:\n        return [0,1]\n    else:\n        a,b=0,1\n        for _ in range(2,n):\n            c=a+b\n            a,b=b,c\n        return [c,a]\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "SkyWork-SkyCode-fp16", "runtime": "transformers", "code": "def fib(n):\n    if n==0:\n        return [0]\n    elif n==1:\n        return [0,1]\n    else:\n        a,b=0,1\n        for _ in range(2,n):\n            c=a+b\n            a,b=b,c\n        return [c,a]", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0, 1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": {"error": "local variable 'c' referenced before assignment", "exc_type": "UnboundLocalError"}, "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [1, 1], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [3, 2], "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 3, "total": 7}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first `n` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciListZeroShot", "language": "javascript", "prompt": "// a javascript function with input length n that returns a list with the first `n` elements of the fibonacci sequence\nfunction fib(n) {", "answer": "\nfunction fib(n) {\n  if (!n) return [];\n  let prev, curr;\n  const result = new Array(n);\n  for (let i=0; i<n; i++) {\n    result[i] = i;\n  }\n  prev = 0;\n  curr = 1;\n  while (true) {\n    result.push(prev);\n    prev = curr;\n    curr += result;\n    if (curr>Math.pow(2,31)) break;\n  }\n  return result;\n}", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "SkyWork-SkyCode-fp16", "runtime": "transformers", "code": "function fib(n) {\n  if (!n) return [];\n  let prev, curr;\n  const result = new Array(n);\n  for (let i=0; i<n; i++) {\n    result[i] = i;\n  }\n  prev = 0;\n  curr = 1;\n  while (true) {\n    result.push(prev);\n    prev = curr;\n    curr += result;\n    if (curr>Math.pow(2,31)) break;\n  }\n  return result;\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": {"error": "Invalid string length", "exc_type": "RangeError"}, "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": {"error": "Invalid string length", "exc_type": "RangeError"}, "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": {"error": "Invalid string length", "exc_type": "RangeError"}, "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": {"error": "Invalid string length", "exc_type": "RangeError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 3, "total": 7}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first `bork` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciListMisnamed", "language": "python", "prompt": "# a python function with input length bork that returns a list with the first `bork` elements of the fibonacci sequence\ndef glork(bork):", "answer": "def glork(bork):\n    if not isinstance(bork,int):\n        raise TypeError(\"The argument must be an integer\")\n    elif bork==0:\n        return [0]\n    else:\n        return [f(n) for n in range(1,bork)]\n\n# a python function to calculate the sum of all numbers between two integers, inclusive.\ndef sum_ints(a,b):\n    if not isinstance(a,int) and not isinstance(b,int):\n        raise TypeError(\"The arguments must be integers\")\n    elif a<b:\n        raise ValueError(\"The arguments must be greater than 0\")\n    elif a>b:\n        return 0\n    else:\n        return a+b\n\n# a python function to calculate the product of all numbers between two integers, inclusive.\ndef prod_ints(a,b):\n    if not isinstance(a,int) and not isinstance(b,int):\n        raise TypeError(\"The arguments must be integers\")\n    elif a<b:\n        raise ValueError(\"The arguments must be greater than 0\")\n    elif a>b:\n        return 1\n    else:\n        return a*b\n\n# a python function to calculate the average of all numbers between two integers, inclusive.\ndef avg_ints(a,b):\n    if not isinstance(a,int) and not isinstance(b,int):\n        raise TypeError(\"The arguments must be integers\")\n    elif a<b:\n        raise ValueError(\"The arguments must be greater than 0\")\n    elif a>b:\n        return 0\n    else:\n        return (a+b)/2\n\n# a python function to calculate the variance of all numbers \n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "SkyWork-SkyCode-fp16", "runtime": "transformers", "code": "def glork(bork):\n    if not isinstance(bork,int):\n        raise TypeError(\"The argument must be an integer\")\n    elif bork==0:\n        return [0]\n    else:\n        return [f(n) for n in range(1,bork)]\n\n# a python function to calculate the sum of all numbers between two integers, inclusive.\ndef sum_ints(a,b):\n    if not isinstance(a,int) and not isinstance(b,int):\n        raise TypeError(\"The arguments must be integers\")\n    elif a<b:\n        raise ValueError(\"The arguments must be greater than 0\")\n    elif a>b:\n        return 0\n    else:\n        return a+b\n\n# a python function to calculate the product of all numbers between two integers, inclusive.\ndef prod_ints(a,b):\n    if not isinstance(a,int) and not isinstance(b,int):\n        raise TypeError(\"The arguments must be integers\")\n    elif a<b:\n        raise ValueError(\"The arguments must be greater than 0\")\n    elif a>b:\n        return 1\n    else:\n        return a*b\n\n# a python function to calculate the average of all numbers between two integers, inclusive.\ndef avg_ints(a,b):\n    if not isinstance(a,int) and not isinstance(b,int):\n        raise TypeError(\"The arguments must be integers\")\n    elif a<b:\n        raise ValueError(\"The arguments must be greater than 0\")\n    elif a>b:\n        return 0\n    else:\n        return (a+b)/2\n\n# a python function to calculate the variance of all numbers", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": {"error": "'_io.TextIOWrapper' object is not callable", "exc_type": "TypeError"}, "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": {"error": "'_io.TextIOWrapper' object is not callable", "exc_type": "TypeError"}, "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": {"error": "'_io.TextIOWrapper' object is not callable", "exc_type": "TypeError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 4, "total": 8}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first `bork` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciListMisnamed", "language": "javascript", "prompt": "// a javascript function with input length bork that returns a list with the first `bork` elements of the fibonacci sequence\nfunction glork(bork) {", "answer": "\nfunction glork(bork) {\n  var result = [];\n  for (var i = 0; i < bork; i++) result.push(0);\n  return result;\n}\n\n// this is the main function to call the recursive algorithm. It takes an array and a number as arguments and calls itself until it reaches the end of the array.\nfunction recursion(arr, n) {\n  if (n === 0) return;\n  else if (n > 0) recursion([...arr, n], n-1);\n  else recursion([...arr]);\n}\n\nconsole.log(recursion([1,2,3,4,5,6,7,8,9,10]));", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "SkyWork-SkyCode-fp16", "runtime": "transformers", "code": "function glork(bork) {\n  var result = [];\n  for (var i = 0; i < bork; i++) result.push(0);\n  return result;\n}\n\n// this is the main function to call the recursive algorithm. It takes an array and a number as arguments and calls itself until it reaches the end of the array.\nfunction recursion(arr, n) {\n  if (n === 0) return;\n  else if (n > 0) recursion([...arr, n], n-1);\n  else recursion([...arr]);\n}\n\nconsole.log(recursion([1,2,3,4,5,6,7,8,9,10]));", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": false, "status": 0}, {"assert": "f.call(1)", "eq": [0], "got": {"error": "Maximum call stack size exceeded", "exc_type": "RangeError"}, "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": {"error": "Maximum call stack size exceeded", "exc_type": "RangeError"}, "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": {"error": "Maximum call stack size exceeded", "exc_type": "RangeError"}, "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": {"error": "Maximum call stack size exceeded", "exc_type": "RangeError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 3, "total": 8}
{"Signature": "substrcount(str, substr)", "Input": "with inputs `str` and `substr`", "Output": "counts the number of times the sub-string `substr` occurs in `str`", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "python", "prompt": "# a python function with inputs `str` and `substr` that returns counts the number of times the sub-string `substr` occurs in `str`\ndef substrcount(str, substr):", "answer": "def substrcount(str, substr):\n    return len([i for i, c in enumerate(substr) if c == str[0]])\n", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "SkyWork-SkyCode-fp16", "runtime": "transformers", "code": "def substrcount(str, substr):\n    return len([i for i, c in enumerate(substr) if c == str[0]])", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrcount", "status": 1}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 1, "status": 0}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 1, "status": 0}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 1, "status": 0}], "status": "FAIL", "passed": 4, "total": 7}
{"Signature": "substrcount(str, substr)", "Input": "with inputs `str` and `substr`", "Output": "counts the number of times the sub-string `substr` occurs in `str`", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "javascript", "prompt": "// a javascript function with inputs `str` and `substr` that returns counts the number of times the sub-string `substr` occurs in `str`\nfunction substrcount(str, substr) {", "answer": "\nfunction substrcount(str, substr) {\n  var counter = 0;\n  for (var i = 0, len = str.length; i < len; i++) {\n    if (substr === str[i]) {\n      counter++;\n    }\n  }\n  return counter;\n};\n\n// test\nconsole.log('Substring:', substrcount(\"hello\", \"ll\"));", "params": "GenerationConfig {\n  \"$note\": \"precise settings from https://old.reddit.com/r/LocalLLaMA/wiki/index\",\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repeat_last_n\": 256,\n  \"repetition_penalty\": 1.176,\n  \"temperature\": 0.7,\n  \"top_k\": 40,\n  \"top_p\": 0.1,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "SkyWork-SkyCode-fp16", "runtime": "transformers", "code": "function substrcount(str, substr) {\n  var counter = 0;\n  for (var i = 0, len = str.length; i < len; i++) {\n    if (substr === str[i]) {\n      counter++;\n    }\n  }\n  return counter;\n};\n\n// test\nconsole.log('Substring:', substrcount(\"hello\", \"ll\"));", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrcount", "status": 1}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 0, "status": 0}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 0, "status": 0}], "status": "FAIL", "passed": 5, "total": 7}