{"Signature": "substrcount(str, substr)", "Input": "with inputs `str` and `substr`", "Output": "counts the number of times the sub-string `substr` occurs in `str`", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "python", "prompt": "###Instruction\nWrite a python function substrcount(str, substr) with inputs `str` and `substr` that returns counts the number of times the sub-string `substr` occurs in `str`.###Response", "answer": "def count_substring(s1, s2):\n    n = len(s1) \n    m = len(s2) \n  \n    # Create an empty hash set to store results  \n    table = {}\n  \n    for i in range(n - m + 1): \n        j = 0\n  \n        # For current index i, check if s2[j..m-1] is present  \n        # in s1[i+j..i+j+m-1]. If yes, then increase count  \n        # for this substring. \n        while (j < m): \n            if (table.get((s1[i + j], s2[j]), None)): \n                table[(s1[i + j], s2[j])] += 1\n            else:\n                table[(s1[i + j], s2[j])] = 1\n            j += 1\n\n    return table", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "def count_substring(s1, s2):\n    n = len(s1) \n    m = len(s2) \n  \n    # Create an empty hash set to store results  \n    table = {}\n  \n    for i in range(n - m + 1): \n        j = 0\n  \n        # For current index i, check if s2[j..m-1] is present  \n        # in s1[i+j..i+j+m-1]. If yes, then increase count  \n        # for this substring. \n        while (j < m): \n            if (table.get((s1[i + j], s2[j]), None)): \n                table[(s1[i + j], s2[j])] += 1\n            else:\n                table[(s1[i + j], s2[j])] = 1\n            j += 1\n\n    return table", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "count_substring", "status": 0}, {"assert": "f.args[0].name", "eq": "str", "got": "s1", "status": 0}, {"assert": "f.args[1].name", "eq": "substr", "got": "s2", "status": 0}, {"assert": "f.call('aaa','a')", "eq": 3, "got": "Invalid control character at: line 1 column 19 (char 18)", "status": 0}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": "Invalid control character at: line 1 column 19 (char 18)", "status": 0}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": "Invalid control character at: line 1 column 19 (char 18)", "status": 0}], "status": "FAIL", "passed": 1, "total": 7}
{"Signature": "substrcount(str, substr)", "Input": "with inputs `str` and `substr`", "Output": "counts the number of times the sub-string `substr` occurs in `str`", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "javascript", "prompt": "###Instruction\nWrite a javascript function substrcount(str, substr) with inputs `str` and `substr` that returns counts the number of times the sub-string `substr` occurs in `str`.###Response", "answer": "function substrCount(str, substr){\n    let count = 0;\n\n    for (let i=0;i<str.length;i++){\n        if (str[i] == substr[0]){\n            let flag = true;\n\n            // check whether substring is present or not \n            for (let j=1;j<=substr.length;j++) {\n                if (str[i+j]!= substr[j]) {\n                    flag = false; \n                    break; \n                }   \n            }\n            \n            if (flag==true) {\n               count++; \n               i += substr.length - 1;  \n            } \n        } \n    }\n    \n    return count;  \n}", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "function substrCount(str, substr){\n    let count = 0;\n\n    for (let i=0;i<str.length;i++){\n        if (str[i] == substr[0]){\n            let flag = true;\n\n            // check whether substring is present or not \n            for (let j=1;j<=substr.length;j++) {\n                if (str[i+j]!= substr[j]) {\n                    flag = false; \n                    break; \n                }   \n            }\n            \n            if (flag==true) {\n               count++; \n               i += substr.length - 1;  \n            } \n        } \n    }\n    \n    return count;  \n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrCount", "status": 0}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 1, "status": 0}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 1, "status": 0}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 1, "status": 0}], "status": "FAIL", "passed": 3, "total": 7}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "python", "prompt": "###Instruction\nWrite a python function factorial(n) with input n that returns the factorial of n using iteration.###Response", "answer": "def factorial(n):\n    result = 1 \n    for i in range (2,n+1): \n        result *=i  \n    return result", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "def factorial(n):\n    result = 1 \n    for i in range (2,n+1): \n        result *=i  \n    return result", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "javascript", "prompt": "###Instruction\nWrite a javascript function factorial(n) with input n that returns the factorial of n using iteration.###Response", "answer": "function factorial(n){\n  let result = 1;\n  \n  for (let i=2;i<=n;i++){\n    result *= i; \n  }\n\n  return result; \n\n}", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "function factorial(n){\n  let result = 1;\n  \n  for (let i=2;i<=n;i++){\n    result *= i; \n  }\n\n  return result; \n\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "python", "prompt": "###Instruction\nWrite a python function factorial(n) with input n that returns the factorial of n using recursion.###Response", "answer": "def factorial(n):\n    if (n == 0 or n == 1):\n        return 1 \n    else: \n        return n * factorial(n-1)", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "def factorial(n):\n    if (n == 0 or n == 1):\n        return 1 \n    else: \n        return n * factorial(n-1)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "javascript", "prompt": "###Instruction\nWrite a javascript function factorial(n) with input n that returns the factorial of n using recursion.###Response", "answer": "function factorial(n){\n  if (n === 0 || n == 1 ) {\n    return 1; \n  } else{ \n    return n * factorial(n-1);  \n  }  \n}", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "function factorial(n){\n  if (n === 0 || n == 1 ) {\n    return 1; \n  } else{ \n    return n * factorial(n-1);  \n  }  \n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "python", "prompt": "###Instruction\nWrite a python function glork(bork) with input bork that returns the factorial of bork.###Response", "answer": "def glork(bork):\n    if (bork == 0 or bork == 1):\n        return 1\n    else: \n        return bork * glork(bork-1)", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "def glork(bork):\n    if (bork == 0 or bork == 1):\n        return 1\n    else: \n        return bork * glork(bork-1)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 6, "total": 6}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "javascript", "prompt": "###Instruction\nWrite a javascript function glork(bork) with input bork that returns the factorial of bork.###Response", "answer": "function factorial(n){\n    if ( n == 0 ) \n        return 1; \n    else\n        return n * factorial(n-1);  \n}", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "function factorial(n){\n    if ( n == 0 ) \n        return 1; \n    else\n        return n * factorial(n-1);  \n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "n", "status": 0}, {"assert": "f.name", "eq": "glork", "got": "factorial", "status": 0}], "status": "FAIL", "passed": 4, "total": 6}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common denominator of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "python", "prompt": "###Instruction\nWrite a python function gcd(a, b) with two inputs a and b that returns the greatest common denominator of a and b.###Response", "answer": "def gcd(a,b): \n    if (a == 0 or b == 0): \n        return max(a, b); \n  \n    # base case \n    if (a == b):  \n        return a  \n  \n    # a is greater \n    elif (a > b):  \n        return gcd(a-b, b)  \n    else:  \n        return gcd(a, b-a)", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "def gcd(a,b): \n    if (a == 0 or b == 0): \n        return max(a, b); \n  \n    # base case \n    if (a == b):  \n        return a  \n  \n    # a is greater \n    elif (a > b):  \n        return gcd(a-b, b)  \n    else:  \n        return gcd(a, b-a)", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcd", "got": "gcd", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common denominator of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "javascript", "prompt": "###Instruction\nWrite a javascript function gcd(a, b) with two inputs a and b that returns the greatest common denominator of a and b.###Response", "answer": "function gcd(a,b){\n    if (b === 0 ) {\n        return a; \n    } else{ \n        return gcd(b, a % b);  \n    }  \n}", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "function gcd(a,b){\n    if (b === 0 ) {\n        return a; \n    } else{ \n        return gcd(b, a % b);  \n    }  \n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcd", "got": "gcd", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "gcf(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common factor of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDAlternative", "language": "python", "prompt": "###Instruction\nWrite a python function gcf(a, b) with two inputs a and b that returns the greatest common factor of a and b.###Response", "answer": "def gcd(a,b): \n    if (b == 0): \n        return a  \n    else:\n        return gcd(b, a % b)", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "def gcd(a,b): \n    if (b == 0): \n        return a  \n    else:\n        return gcd(b, a % b)", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcf", "got": "gcd", "status": 0}], "status": "FAIL", "passed": 8, "total": 9}
{"Signature": "gcf(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common factor of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDAlternative", "language": "javascript", "prompt": "###Instruction\nWrite a javascript function gcf(a, b) with two inputs a and b that returns the greatest common factor of a and b.###Response", "answer": "function gcd(a,b){\n  if (b === 0 ) {\n    return a; \n  } else{ \n    return gcd(b, a % b);  \n  }  \n}", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "function gcd(a,b){\n  if (b === 0 ) {\n    return a; \n  } else{ \n    return gcd(b, a % b);  \n  }  \n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcf", "got": "gcd", "status": 0}], "status": "FAIL", "passed": 8, "total": 9}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common denominator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "python", "prompt": "###Instruction\nWrite a python function fofx(x, banana) with two inputs x and banana that returns the greatest common denominator (gcd) of x and banana.###Response", "answer": "def gcd(a, b): \n    if a == 0: \n        return b \n      \n    return gcd(b % a, a) \n  \n  \n# Driver code  \nprint(\"GCD of\", 8, \"and\", 12,\"is\") \nprint(gcd(8, 12))", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "def gcd(a, b): \n    if a == 0: \n        return b \n      \n    return gcd(b % a, a) \n  \n  \n# Driver code  \nprint(\"GCD of\", 8, \"and\", 12,\"is\") \nprint(gcd(8, 12))", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "x", "got": "a", "status": 0}, {"assert": "f.args[1].name", "eq": "banana", "got": "b", "status": 0}, {"assert": "f.name", "eq": "fofx", "got": "gcd", "status": 0}], "status": "FAIL", "passed": 6, "total": 9}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common denominator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "javascript", "prompt": "###Instruction\nWrite a javascript function fofx(x, banana) with two inputs x and banana that returns the greatest common denominator (gcd) of x and banana.###Response", "answer": "function gcd(a, b){\n    if (b === 0 ) {\n        return a; \n    } else{ \n        return gcd(b, a % b);  \n    }  \n}", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "function gcd(a, b){\n    if (b === 0 ) {\n        return a; \n    } else{ \n        return gcd(b, a % b);  \n    }  \n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "x", "got": "a", "status": 0}, {"assert": "f.args[1].name", "eq": "banana", "got": "b", "status": 0}, {"assert": "f.name", "eq": "fofx", "got": "gcd", "status": 0}], "status": "FAIL", "passed": 6, "total": 9}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "python", "prompt": "###Instruction\nWrite a python function meaning_of_life() with no inputs that returns a single integer, the answer to life the universe and everything.###Response", "answer": "def meaning_of_life():\n    return 42", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "def meaning_of_life():\n    return 42", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "javascript", "prompt": "###Instruction\nWrite a javascript function meaning_of_life() with no inputs that returns a single integer, the answer to life the universe and everything.###Response", "answer": "function meaningOfLife(){\n  return 42;\n}", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "function meaningOfLife(){\n  return 42;\n}", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaningOfLife", "status": 0}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "FAIL", "passed": 2, "total": 3}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "A simple list function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "python", "prompt": "###Instruction\nWrite a python function things() with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain.###Response", "answer": "def things():\n    return [5, \"foobar\", \"Spain\"]", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "def things():\n    return [5, \"foobar\", \"Spain\"]", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()[0]", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call()[1]", "eq": "foobar", "got": "foobar", "status": 1}, {"assert": "f.call()[2]", "eq": "Madrid", "got": "Spain", "status": 0}], "status": "FAIL", "passed": 4, "total": 5}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "A simple list function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "javascript", "prompt": "###Instruction\nWrite a javascript function things() with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain.###Response", "answer": "function things(){\n  return [5,'foobar','Spain'];\n}", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "function things(){\n  return [5,'foobar','Spain'];\n}", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()[0]", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call()[1]", "eq": "foobar", "got": "foobar", "status": 1}, {"assert": "f.call()[2]", "eq": "Madrid", "got": "Spain", "status": 0}], "status": "FAIL", "passed": 4, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "python", "prompt": "###Instruction\nWrite a python function secretidentities() with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names.###Response", "answer": "def secret_identity():\n    return {\n        \"Superman\": \"Bruce Wayne\", \n        \"Batman\": \"Robinson\",\n        \"Spider-Man\": \"Daredevil\" \n    }", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "def secret_identity():\n    return {\n        \"Superman\": \"Bruce Wayne\", \n        \"Batman\": \"Robinson\",\n        \"Spider-Man\": \"Daredevil\" \n    }", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secret_identity", "status": 0}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq-any": ["Clark Kent", "Kal-El"], "got": "Bruce Wayne", "status": 0}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": "Robinson", "status": 0}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": "Daredevil", "status": 0}], "status": "FAIL", "passed": 1, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "javascript", "prompt": "###Instruction\nWrite a javascript function secretidentities() with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names.###Response", "answer": "function secretIdentities(){\n  const identities = {\n    'Superman': 'Bruce Wayne', \n    'Batman': 'John Green',  \n    'Spider-Man':'George Washington' \n  };\n\n  return identities; \n}", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "function secretIdentities(){\n  const identities = {\n    'Superman': 'Bruce Wayne', \n    'Batman': 'John Green',  \n    'Spider-Man':'George Washington' \n  };\n\n  return identities; \n}", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secretIdentities", "status": 0}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq-any": ["Clark Kent", "Kal-El"], "got": "Bruce Wayne", "status": 0}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": "John Green", "status": 0}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": "George Washington", "status": 0}], "status": "FAIL", "passed": 1, "total": 5}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the `n`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation", "name": "FibonacciZeroShot", "language": "python", "prompt": "###Instruction\nWrite a python function fib(n) with input element number n (0 based) that returns the `n`-th element of the fibonacci sequence.###Response", "answer": "def fib(n): \n    if n<0: \n        print(\"Incorrect input\") \n  \n    elif n==1 or n==2: \n        return 1\n  \n    else: \n        return fib(n-1)+fib(n-2) \n\n# Driver Program  \nprint(fib(9))", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "def fib(n): \n    if n<0: \n        print(\"Incorrect input\") \n  \n    elif n==1 or n==2: \n        return 1\n  \n    else: \n        return fib(n-1)+fib(n-2) \n\n# Driver Program  \nprint(fib(9))", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": {"error": "unsupported operand type(s) for +: 'NoneType' and 'NoneType'", "exc_type": "TypeError"}, "status": 0}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 6, "total": 7}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the `n`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation", "name": "FibonacciZeroShot", "language": "javascript", "prompt": "###Instruction\nWrite a javascript function fib(n) with input element number n (0 based) that returns the `n`-th element of the fibonacci sequence.###Response", "answer": "function fib(n){\n  if(n===1 || n === 2 ){\n    return 1; \n  } else { \n    return fib(n-1)+fib(n-2);  \n  }  \n}", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "function fib(n){\n  if(n===1 || n === 2 ){\n    return 1; \n  } else { \n    return fib(n-1)+fib(n-2);  \n  }  \n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": {"error": "Maximum call stack size exceeded", "exc_type": "RangeError"}, "status": 0}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 6, "total": 7}
{"Signature": "potato(g)", "Input": "with input element number g (0 based)", "Output": "the `g`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation if the name has been changed", "name": "FibonacciMisnamed", "language": "python", "prompt": "###Instruction\nWrite a python function potato(g) with input element number g (0 based) that returns the `g`-th element of the fibonacci sequence.###Response", "answer": "def potato(n): \n    if n == 1 or n == 2: \n        return 1\n    else:\n        return potato(n-1)+potato(n-2)", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "def potato(n): \n    if n == 1 or n == 2: \n        return 1\n    else:\n        return potato(n-1)+potato(n-2)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": {"error": "maximum recursion depth exceeded in comparison", "exc_type": "RecursionError"}, "status": 0}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "g", "got": "n", "status": 0}, {"assert": "f.name", "eq": "potato", "got": "potato", "status": 1}], "status": "FAIL", "passed": 6, "total": 8}
{"Signature": "potato(g)", "Input": "with input element number g (0 based)", "Output": "the `g`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation if the name has been changed", "name": "FibonacciMisnamed", "language": "javascript", "prompt": "###Instruction\nWrite a javascript function potato(g) with input element number g (0 based) that returns the `g`-th element of the fibonacci sequence.###Response", "answer": "function fibonacciSequence(n){\n  let result = [1, 1];\n\n  for(let i=2;i<n;++i){\n    result[i] = result[i-1]+result[i-2]; \n  }\n  \n  return result[n-1];\n}", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "function fibonacciSequence(n){\n  let result = [1, 1];\n\n  for(let i=2;i<n;++i){\n    result[i] = result[i-1]+result[i-2]; \n  }\n  \n  return result[n-1];\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": "Expecting value: line 1 column 1 (char 0)", "status": 0}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "g", "got": "n", "status": 0}, {"assert": "f.name", "eq": "potato", "got": "fibonacciSequence", "status": 0}], "status": "FAIL", "passed": 5, "total": 8}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first `n` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciListZeroShot", "language": "python", "prompt": "###Instruction\nWrite a python function fib(n) with input length n that returns a list with the first `n` elements of the fibonacci sequence.###Response", "answer": "def fib(length):\n    result = [0, 1] \n    for i in range(2, length):\n        next_element = result[i-1]+result[i-2] \n        result.append(next_element)  \n    return result[:length]", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "def fib(length):\n    result = [0, 1] \n    for i in range(2, length):\n        next_element = result[i-1]+result[i-2] \n        result.append(next_element)  \n    return result[:length]", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0], "status": 1}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1], "status": 1}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 1], "status": 1}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 1, 2, 3], "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "length", "status": 0}], "status": "FAIL", "passed": 6, "total": 7}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first `n` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciListZeroShot", "language": "javascript", "prompt": "###Instruction\nWrite a javascript function fib(n) with input length n that returns a list with the first `n` elements of the fibonacci sequence.###Response", "answer": "function fib(length){\n    let result = [0, 1];\n\n    for (let i=2;i<length;++i){\n        const nextElement = result[i-1] + result[i-2]; \n        result.push(nextElement); \n    }\n    \n    return result;\n}", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "function fib(length){\n    let result = [0, 1];\n\n    for (let i=2;i<length;++i){\n        const nextElement = result[i-1] + result[i-2]; \n        result.push(nextElement); \n    }\n    \n    return result;\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0, 1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1], "status": 1}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 1], "status": 1}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 1, 2, 3], "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "length", "status": 0}], "status": "FAIL", "passed": 5, "total": 7}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first `bork` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciListMisnamed", "language": "python", "prompt": "###Instruction\nWrite a python function glork(bork) with input length bork that returns a list with the first `bork` elements of the fibonacci sequence.###Response", "answer": "def glork(bork):\n    result = [0, 1] \n    for i in range(2, bork): \n        next_element = result[i-1]+result[i-2]\n        result.append(next_element) \n  \n    return result[:bork]", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "def glork(bork):\n    result = [0, 1] \n    for i in range(2, bork): \n        next_element = result[i-1]+result[i-2]\n        result.append(next_element) \n  \n    return result[:bork]", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0], "status": 1}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1], "status": 1}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 1], "status": 1}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 1, 2, 3], "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 8, "total": 8}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first `bork` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciListMisnamed", "language": "javascript", "prompt": "###Instruction\nWrite a javascript function glork(bork) with input length bork that returns a list with the first `bork` elements of the fibonacci sequence.###Response", "answer": "function glork(bork){\n    let result = [1, 2];\n\n    for (let i=3;i<bork;++i){\n        const nextElement = result[result.length-1] + result[result.length-2];\n\n        if (nextElement > Number.MAX_SAFE_INTEGER){\n            break;\n        }\n        \n        result.push(nextElement);\n    }\n    \n    return result;\n}", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "function glork(bork){\n    let result = [1, 2];\n\n    for (let i=3;i<bork;++i){\n        const nextElement = result[result.length-1] + result[result.length-2];\n\n        if (nextElement > Number.MAX_SAFE_INTEGER){\n            break;\n        }\n        \n        result.push(nextElement);\n    }\n    \n    return result;\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [1, 2], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [1, 2], "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [1, 2], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [1, 2, 3, 5], "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 4, "total": 8}