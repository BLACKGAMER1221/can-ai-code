{"Signature": "substrcount(str, substr)", "Input": "with inputs `str` and `substr`", "Output": "counts the number of times the sub-string `substr` occurs in `str`", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "python", "prompt": "###Instruction\nWrite simple, concise code that does not rely on any library functions. The code must start with ```python and end with ```. Write a python function substrcount(str, substr) with inputs `str` and `substr` that returns counts the number of times the sub-string `substr` occurs in `str`.\n###Response", "answer": "def substrcount(s, substr):\n    count = 0 \n    for i in range(len(s)):\n        if s[i:].startswith(substr):\n            count +=1\n    return count", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "def substrcount(s, substr):\n    count = 0 \n    for i in range(len(s)):\n        if s[i:].startswith(substr):\n            count +=1\n    return count", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrcount", "status": 1}, {"assert": "f.args[0].name", "eq": "str", "got": "s", "status": 0}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 3, "status": 1}], "status": "FAIL", "passed": 6, "total": 7}
{"Signature": "substrcount(str, substr)", "Input": "with inputs `str` and `substr`", "Output": "counts the number of times the sub-string `substr` occurs in `str`", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "javascript", "prompt": "###Instruction\nWrite simple, concise code that does not rely on any library functions. The code must start with ```javascript and end with ```. Write a javascript function substrcount(str, substr) with inputs `str` and `substr` that returns counts the number of times the sub-string `substr` occurs in `str`.\n###Response", "answer": "function substrCount(str, substr){\n    let count = 0;\n\n    for (let i=0;i<str.length - substr.length +1 ;i++){\n        if ( str.substring(i,i+substr.length ) === substr ){\n            count++; \n        } \n    }\n    \n    return count;\n}", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "function substrCount(str, substr){\n    let count = 0;\n\n    for (let i=0;i<str.length - substr.length +1 ;i++){\n        if ( str.substring(i,i+substr.length ) === substr ){\n            count++; \n        } \n    }\n    \n    return count;\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrCount", "status": 0}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 3, "status": 1}], "status": "FAIL", "passed": 6, "total": 7}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "python", "prompt": "###Instruction\nWrite simple, concise code that does not rely on any library functions. The code must start with ```python and end with ```. Write a python function factorial(n) with input n that returns the factorial of n using iteration.\n###Response", "answer": "def factorial(n):\n    result = 1\n\n    for i in range (2,n+1):\n        result *=i\n    \n    return result", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "def factorial(n):\n    result = 1\n\n    for i in range (2,n+1):\n        result *=i\n    \n    return result", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "javascript", "prompt": "###Instruction\nWrite simple, concise code that does not rely on any library functions. The code must start with ```javascript and end with ```. Write a javascript function factorial(n) with input n that returns the factorial of n using iteration.\n###Response", "answer": "function factorial(n){\n  let result = 1; \n  for (let i=2;i<=n;++i){\n    result *= i;  \n  }\n  return result;  \n}", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "function factorial(n){\n  let result = 1; \n  for (let i=2;i<=n;++i){\n    result *= i;  \n  }\n  return result;  \n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "python", "prompt": "###Instruction\nWrite simple, concise code that does not rely on any library functions. The code must start with ```python and end with ```. Write a python function factorial(n) with input n that returns the factorial of n using recursion.\n###Response", "answer": "def factorial(n):\n    if (n == 0 or n == 1):\n        return 1 \n    else: \n        return n * factorial(n-1)", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "def factorial(n):\n    if (n == 0 or n == 1):\n        return 1 \n    else: \n        return n * factorial(n-1)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "javascript", "prompt": "###Instruction\nWrite simple, concise code that does not rely on any library functions. The code must start with ```javascript and end with ```. Write a javascript function factorial(n) with input n that returns the factorial of n using recursion.\n###Response", "answer": "function factorial(n){\n    if (n === 0 || n == 1 ) {\n        return 1; \n    } else{ \n        return n * factorial(n-1);  \n    }  \n}", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "function factorial(n){\n    if (n === 0 || n == 1 ) {\n        return 1; \n    } else{ \n        return n * factorial(n-1);  \n    }  \n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "python", "prompt": "###Instruction\nWrite simple, concise code that does not rely on any library functions. The code must start with ```python and end with ```. Write a python function glork(bork) with input bork that returns the factorial of bork.\n###Response", "answer": "def factorial(n):\n    if n == 0:\n        return 1\n    else: \n        return (n * factorial(n-1))", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "def factorial(n):\n    if n == 0:\n        return 1\n    else: \n        return (n * factorial(n-1))", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "n", "status": 0}, {"assert": "f.name", "eq": "glork", "got": "factorial", "status": 0}], "status": "FAIL", "passed": 4, "total": 6}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "javascript", "prompt": "###Instruction\nWrite simple, concise code that does not rely on any library functions. The code must start with ```javascript and end with ```. Write a javascript function glork(bork) with input bork that returns the factorial of bork.\n###Response", "answer": "function factorial(num){\n    let result = 1; \n    for (let i=2;i<= num;i++){\n        result *= i;  \n    }\n    return result;  \n}", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "function factorial(num){\n    let result = 1; \n    for (let i=2;i<= num;i++){\n        result *= i;  \n    }\n    return result;  \n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "num", "status": 0}, {"assert": "f.name", "eq": "glork", "got": "factorial", "status": 0}], "status": "FAIL", "passed": 4, "total": 6}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common denominator of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "python", "prompt": "###Instruction\nWrite simple, concise code that does not rely on any library functions. The code must start with ```python and end with ```. Write a python function gcd(a, b) with two inputs a and b that returns the greatest common denominator of a and b.\n###Response", "answer": "def gcd(a,b):\n    if (a == 0 or b == 0):\n        return max(a,b)\n    \n    while (b!= 0): \n        temp = a % b  \n        a = b \n        b = temp \n    return a", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "def gcd(a,b):\n    if (a == 0 or b == 0):\n        return max(a,b)\n    \n    while (b!= 0): \n        temp = a % b  \n        a = b \n        b = temp \n    return a", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcd", "got": "gcd", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common denominator of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "javascript", "prompt": "###Instruction\nWrite simple, concise code that does not rely on any library functions. The code must start with ```javascript and end with ```. Write a javascript function gcd(a, b) with two inputs a and b that returns the greatest common denominator of a and b.\n###Response", "answer": "function gcd(a,b){\n    if (a == 0 || b == 0 ) return Math.max(a,b); \n    else {\n        let c = a % b; \n        return gcd(b,c);  \n    }  \n}", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "function gcd(a,b){\n    if (a == 0 || b == 0 ) return Math.max(a,b); \n    else {\n        let c = a % b; \n        return gcd(b,c);  \n    }  \n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcd", "got": "gcd", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "gcf(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common factor of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDAlternative", "language": "python", "prompt": "###Instruction\nWrite simple, concise code that does not rely on any library functions. The code must start with ```python and end with ```. Write a python function gcf(a, b) with two inputs a and b that returns the greatest common factor of a and b.\n###Response", "answer": "def gcd(a,b):\n    if (b == 0):\n        return a \n    else: \n        return gcd(b, a % b)", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "def gcd(a,b):\n    if (b == 0):\n        return a \n    else: \n        return gcd(b, a % b)", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcf", "got": "gcd", "status": 0}], "status": "FAIL", "passed": 8, "total": 9}
{"Signature": "gcf(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common factor of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDAlternative", "language": "javascript", "prompt": "###Instruction\nWrite simple, concise code that does not rely on any library functions. The code must start with ```javascript and end with ```. Write a javascript function gcf(a, b) with two inputs a and b that returns the greatest common factor of a and b.\n###Response", "answer": "function gcf(a,b){\n    if (a === 0 || b === 0 ){\n        return null; \n    }\n\n    while (b!== 0 ) { \n        let temp = b;  \n        b = a % b; \n        a = temp;  \n    } \n\n    return a; \n\n}", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "function gcf(a,b){\n    if (a === 0 || b === 0 ){\n        return null; \n    }\n\n    while (b!== 0 ) { \n        let temp = b;  \n        b = a % b; \n        a = temp;  \n    } \n\n    return a; \n\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": null, "status": 0}, {"assert": "f.call(0,3)", "eq": 3, "got": null, "status": 0}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcf", "got": "gcf", "status": 1}], "status": "FAIL", "passed": 7, "total": 9}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common denominator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "python", "prompt": "###Instruction\nWrite simple, concise code that does not rely on any library functions. The code must start with ```python and end with ```. Write a python function fofx(x, banana) with two inputs x and banana that returns the greatest common denominator (gcd) of x and banana.\n###Response", "answer": "def gcd_fofx(x,banana):\n    if x == 0:\n        return banana \n    else: \n        return gcd_fofx(banana%x, x)", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "def gcd_fofx(x,banana):\n    if x == 0:\n        return banana \n    else: \n        return gcd_fofx(banana%x, x)", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "banana", "status": 1}, {"assert": "f.name", "eq": "fofx", "got": "gcd_fofx", "status": 0}], "status": "FAIL", "passed": 8, "total": 9}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common denominator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "javascript", "prompt": "###Instruction\nWrite simple, concise code that does not rely on any library functions. The code must start with ```javascript and end with ```. Write a javascript function fofx(x, banana) with two inputs x and banana that returns the greatest common denominator (gcd) of x and banana.\n###Response", "answer": "function gcd(a, b){\n    if (b === 0 ) {\n        return a; \n    } else{ \n        return gcd(b, a % b);  \n    }  \n}", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "function gcd(a, b){\n    if (b === 0 ) {\n        return a; \n    } else{ \n        return gcd(b, a % b);  \n    }  \n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "x", "got": "a", "status": 0}, {"assert": "f.args[1].name", "eq": "banana", "got": "b", "status": 0}, {"assert": "f.name", "eq": "fofx", "got": "gcd", "status": 0}], "status": "FAIL", "passed": 6, "total": 9}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "python", "prompt": "###Instruction\nWrite simple, concise code that does not rely on any library functions. The code must start with ```python and end with ```. Write a python function meaning_of_life() with no inputs that returns a single integer, the answer to life the universe and everything.\n###Response", "answer": "def meaning_of_life():\n    return 42", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "def meaning_of_life():\n    return 42", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "javascript", "prompt": "###Instruction\nWrite simple, concise code that does not rely on any library functions. The code must start with ```javascript and end with ```. Write a javascript function meaning_of_life() with no inputs that returns a single integer, the answer to life the universe and everything.\n###Response", "answer": "function meaning_of_life(){\n  return 42;\n}", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "function meaning_of_life(){\n  return 42;\n}", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "A simple list function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "python", "prompt": "###Instruction\nWrite simple, concise code that does not rely on any library functions. The code must start with ```python and end with ```. Write a python function things() with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain.\n###Response", "answer": "def things():\n    return [5, \"foobar\", \"Spain\"]", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "def things():\n    return [5, \"foobar\", \"Spain\"]", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()[0]", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call()[1]", "eq": "foobar", "got": "foobar", "status": 1}, {"assert": "f.call()[2]", "eq": "Madrid", "got": "Spain", "status": 0}], "status": "FAIL", "passed": 4, "total": 5}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "A simple list function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "javascript", "prompt": "###Instruction\nWrite simple, concise code that does not rely on any library functions. The code must start with ```javascript and end with ```. Write a javascript function things() with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain.\n###Response", "answer": "function things(){\n  return [5,'foobar','Spain']\n}", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "function things(){\n  return [5,'foobar','Spain']\n}", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()[0]", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call()[1]", "eq": "foobar", "got": "foobar", "status": 1}, {"assert": "f.call()[2]", "eq": "Madrid", "got": "Spain", "status": 0}], "status": "FAIL", "passed": 4, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "python", "prompt": "###Instruction\nWrite simple, concise code that does not rely on any library functions. The code must start with ```python and end with ```. Write a python function secretidentities() with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names.\n###Response", "answer": "def secret_identity():\n    return {\n        'Superman': 'Spider Man', \n        'Batman': 'Robin Hood',\n        'Spider-Man': 'Sean Penn' \n    }", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "def secret_identity():\n    return {\n        'Superman': 'Spider Man', \n        'Batman': 'Robin Hood',\n        'Spider-Man': 'Sean Penn' \n    }", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secret_identity", "status": 0}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq-any": ["Clark Kent", "Kal-El"], "got": "Spider Man", "status": 0}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": "Robin Hood", "status": 0}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": "Sean Penn", "status": 0}], "status": "FAIL", "passed": 1, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "javascript", "prompt": "###Instruction\nWrite simple, concise code that does not rely on any library functions. The code must start with ```javascript and end with ```. Write a javascript function secretidentities() with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names.\n###Response", "answer": "const secrets = {\n 'superman': 'Spider-Man', \n  'batman': 'Superman', \n 'spider man': 'Batman' \n};", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "const secrets = {\n 'superman': 'Spider-Man', \n  'batman': 'Superman', \n 'spider man': 'Batman' \n};", "checks": [], "status": "NO_FUNCTION", "passed": 0, "total": 5}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the `n`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation", "name": "FibonacciZeroShot", "language": "python", "prompt": "###Instruction\nWrite simple, concise code that does not rely on any library functions. The code must start with ```python and end with ```. Write a python function fib(n) with input element number n (0 based) that returns the `n`-th element of the fibonacci sequence.\n###Response", "answer": "def fib(n):\n    if n == 0:\n        return 0 \n    elif n == 1 or n ==2 : \n        return 1\n    else:  \n        return fib(n-1)+fib(n-2)", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "def fib(n):\n    if n == 0:\n        return 0 \n    elif n == 1 or n ==2 : \n        return 1\n    else:  \n        return fib(n-1)+fib(n-2)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the `n`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation", "name": "FibonacciZeroShot", "language": "javascript", "prompt": "###Instruction\nWrite simple, concise code that does not rely on any library functions. The code must start with ```javascript and end with ```. Write a javascript function fib(n) with input element number n (0 based) that returns the `n`-th element of the fibonacci sequence.\n###Response", "answer": "function fib(n){\n  if(n===1 || n === 2 ){\n    return 1; \n  } else { \n    return fib(n-1)+fib(n-2);  \n  }  \n}", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "function fib(n){\n  if(n===1 || n === 2 ){\n    return 1; \n  } else { \n    return fib(n-1)+fib(n-2);  \n  }  \n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": {"error": "Maximum call stack size exceeded", "exc_type": "RangeError"}, "status": 0}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 6, "total": 7}
{"Signature": "potato(g)", "Input": "with input element number g (0 based)", "Output": "the `g`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation if the name has been changed", "name": "FibonacciMisnamed", "language": "python", "prompt": "###Instruction\nWrite simple, concise code that does not rely on any library functions. The code must start with ```python and end with ```. Write a python function potato(g) with input element number g (0 based) that returns the `g`-th element of the fibonacci sequence.\n###Response", "answer": "def FibonacciGenerator(n): \n    if n<0: \n        print(\"Incorrect input\")\n    elif n==1: \n        return 0\n    elif n==2:\n        return 1\n    else: \n        f = [0]*(n+1)  \n        f[1] = 1\n        for i in range(2, n + 1 ): \n            f[i] = f[i-1]+f[i-2] \n        return f[n]", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "def FibonacciGenerator(n): \n    if n<0: \n        print(\"Incorrect input\")\n    elif n==1: \n        return 0\n    elif n==2:\n        return 1\n    else: \n        f = [0]*(n+1)  \n        f[1] = 1\n        for i in range(2, n + 1 ): \n            f[i] = f[i-1]+f[i-2] \n        return f[n]", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": {"error": "list assignment index out of range", "exc_type": "IndexError"}, "status": 0}, {"assert": "f.call(1)", "eq": 1, "got": 0, "status": 0}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "g", "got": "n", "status": 0}, {"assert": "f.name", "eq": "potato", "got": "FibonacciGenerator", "status": 0}], "status": "FAIL", "passed": 4, "total": 8}
{"Signature": "potato(g)", "Input": "with input element number g (0 based)", "Output": "the `g`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation if the name has been changed", "name": "FibonacciMisnamed", "language": "javascript", "prompt": "###Instruction\nWrite simple, concise code that does not rely on any library functions. The code must start with ```javascript and end with ```. Write a javascript function potato(g) with input element number g (0 based) that returns the `g`-th element of the fibonacci sequence.\n###Response", "answer": "function potato(g){\n  let a = 1; \n  let b = 0;\n\n  for (let i=2;i<=g;++i){\n    [a,b]=[b,a+b];\n  }\n  \n  return a;  \n}", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "function potato(g){\n  let a = 1; \n  let b = 0;\n\n  for (let i=2;i<=g;++i){\n    [a,b]=[b,a+b];\n  }\n  \n  return a;  \n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 1, "status": 0}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 0, "status": 0}, {"assert": "f.call(3)", "eq": 2, "got": 1, "status": 0}, {"assert": "f.call(5)", "eq": 5, "got": 2, "status": 0}, {"assert": "f.args[0].name", "eq": "g", "got": "g", "status": 1}, {"assert": "f.name", "eq": "potato", "got": "potato", "status": 1}], "status": "FAIL", "passed": 4, "total": 8}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first `n` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciListZeroShot", "language": "python", "prompt": "###Instruction\nWrite simple, concise code that does not rely on any library functions. The code must start with ```python and end with ```. Write a python function fib(n) with input length n that returns a list with the first `n` elements of the fibonacci sequence.\n###Response", "answer": "def fibonacci_sequence(length):\n    result = [0] * (length + 1) \n    result[1] = 1\n\n    for i in range(2, length+1):\n        result[i] = result[i-1]+result[i-2]\n    \n    return result[:length]", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "def fibonacci_sequence(length):\n    result = [0] * (length + 1) \n    result[1] = 1\n\n    for i in range(2, length+1):\n        result[i] = result[i-1]+result[i-2]\n    \n    return result[:length]", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": false, "status": 0}, {"assert": "f.call(1)", "eq": [0], "got": [0], "status": 1}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1], "status": 1}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 1], "status": 1}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 1, 2, 3], "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "length", "status": 0}], "status": "FAIL", "passed": 5, "total": 7}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first `n` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciListZeroShot", "language": "javascript", "prompt": "###Instruction\nWrite simple, concise code that does not rely on any library functions. The code must start with ```javascript and end with ```. Write a javascript function fib(n) with input length n that returns a list with the first `n` elements of the fibonacci sequence.\n###Response", "answer": "function fib(n){\n  let result = [0,1];\n\n  for (let i=2;i<n;++i){\n    const nextElement = result[i-2] +result[i-1]; \n    result.push(nextElement); \n  }\n  \n  return result.slice(0,n); \n}", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "function fib(n){\n  let result = [0,1];\n\n  for (let i=2;i<n;++i){\n    const nextElement = result[i-2] +result[i-1]; \n    result.push(nextElement); \n  }\n  \n  return result.slice(0,n); \n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0], "status": 1}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1], "status": 1}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 1], "status": 1}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 1, 2, 3], "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first `bork` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciListMisnamed", "language": "python", "prompt": "###Instruction\nWrite simple, concise code that does not rely on any library functions. The code must start with ```python and end with ```. Write a python function glork(bork) with input length bork that returns a list with the first `bork` elements of the fibonacci sequence.\n###Response", "answer": "def glork(bork):\n    result = [] \n    for i in range (0,bork):\n        if i == 0:\n            result.append(1) \n        elif i==1: \n            result.append(2)  \n        else :  \n            result.append(result[i-2] + result[i-1])  \n    return result", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "def glork(bork):\n    result = [] \n    for i in range (0,bork):\n        if i == 0:\n            result.append(1) \n        elif i==1: \n            result.append(2)  \n        else :  \n            result.append(result[i-2] + result[i-1])  \n    return result", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [1, 2], "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [1, 2, 3], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [1, 2, 3, 5, 8], "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 4, "total": 8}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first `bork` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciListMisnamed", "language": "javascript", "prompt": "###Instruction\nWrite simple, concise code that does not rely on any library functions. The code must start with ```javascript and end with ```. Write a javascript function glork(bork) with input length bork that returns a list with the first `bork` elements of the fibonacci sequence.\n###Response", "answer": "function glork(bork){\n  let result = []; \n  for (let i=0;i<bork;++i){\n    if ((result[i-1]===undefined)){\n      result[i]= 0; \n    } else { \n      result[i]=(result[i-2]) + (result[i-1]);  \n    };  \n  };\n  return result;  \n}", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"repetition_penalty\": 1.2,\n  \"temperature\": 0.2,\n  \"top_p\": 0.95,\n  \"transformers_version\": \"4.31.0\"\n}\n", "model": "stabilityai-stablecode-instruct-alpha-3b-fp16", "runtime": "transformers", "code": "function glork(bork){\n  let result = []; \n  for (let i=0;i<bork;++i){\n    if ((result[i-1]===undefined)){\n      result[i]= 0; \n    } else { \n      result[i]=(result[i-2]) + (result[i-1]);  \n    };  \n  };\n  return result;  \n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0], "status": 1}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, null], "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, null, null], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, null, null, null, null], "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 5, "total": 8}