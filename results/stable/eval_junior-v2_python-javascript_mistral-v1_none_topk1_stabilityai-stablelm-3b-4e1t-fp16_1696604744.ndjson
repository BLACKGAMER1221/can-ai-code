{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "python", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function meaning_of_life() with no inputs that returns a single integer, the answer to life the universe and everything.\n\n## Solution", "answer": "\n\n```python\ndef meaning_of_life():\n    return 42\n```\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.33.2\"\n}\n", "model": "stabilityai-stablelm-3b-4e1t-fp16", "runtime": "transformers", "code": "def meaning_of_life():\n    return 42", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "javascript", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function meaning_of_life() with no inputs that returns a single integer, the answer to life the universe and everything.\n\n## Solution", "answer": "\n\nfunction meaning_of_life() {\n  return 42;\n}\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.33.2\"\n}\n", "model": "stabilityai-stablelm-3b-4e1t-fp16", "runtime": "transformers", "code": "function meaning_of_life() {\n  return 42;\n}", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "A simple list function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "python", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function things() with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain.\n\n## Solution", "answer": "\n\n```python\ndef things():\n    return [5, 'foobar', 'Madrid']\n```\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.33.2\"\n}\n", "model": "stabilityai-stablelm-3b-4e1t-fp16", "runtime": "transformers", "code": "def things():\n    return [5, 'foobar', 'Madrid']", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()[0]", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call()[1]", "eq": "foobar", "got": "foobar", "status": 1}, {"assert": "f.call()[2]", "eq": "Madrid", "got": "Madrid", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "A simple list function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "javascript", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function things() with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain.\n\n## Solution", "answer": "\n\n```javascript\nthings = function() {\n  return [5, 'foobar', 'Madrid'];\n}\n```\n\n## Explanation\n\nThe function `things` takes no inputs and returns a list with three values.  The first value is the number 5, the second is the string 'foobar', and the third is the capital city of Spain.\n\n## Bonus\n\nWrite a function that takes a string and returns a list with the first letter of each word in the string.  For example, the function `words` should return ['a', 'b', 'c'].\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.33.2\"\n}\n", "model": "stabilityai-stablelm-3b-4e1t-fp16", "runtime": "transformers", "code": "things = function() {\n  return [5, 'foobar', 'Madrid'];\n}", "checks": [], "status": "NO_FUNCTION", "passed": 0, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "python", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function secretidentities() with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names.\n\n## Solution", "answer": "\n\n```python\nsecretidentities = {\n    \"Superman\": \"Clark Kent\",\n    \"Batman\": \"Bruce Wayne\",\n    \"Spider-Man\": \"Peter Parker\"\n}\n```\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.33.2\"\n}\n", "model": "stabilityai-stablelm-3b-4e1t-fp16", "runtime": "transformers", "code": "secretidentities = {\n    \"Superman\": \"Clark Kent\",\n    \"Batman\": \"Bruce Wayne\",\n    \"Spider-Man\": \"Peter Parker\"\n}", "checks": [], "status": "NO_FUNCTION", "passed": 0, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "javascript", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function secretidentities() with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names.\n\n## Solution", "answer": "\n\n```javascript\nsecretidentities = function() {\n  return {\n    \"Superman\": \"Clark Kent\",\n    \"Batman\": \"Bruce Wayne\",\n    \"Spider-Man\": \"Peter Parker\"\n  };\n};\n```\n\n## Explanation\n\nThe function secretidentities() takes no inputs and returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names.\n\n## Bonus\n\nWrite a function secretidentities() that takes a string as an input and returns an object mapping the characters in the string to their real names.\n\n## Solution\n\n```javascript\nsecretidentities = function(str) {\n  return str.split(\"\").reduce(function(obj, char) {\n    obj[char] = char;\n    return obj;\n  }, {});\n};\n```\n\n## Explanation\n\nThe function secretidentities() takes a string as an input and returns an object mapping the characters in the string to their real names.\n\n## Bonus\n\nWrite a function secretidentities() that takes an array of strings as an input and returns an object mapping the characters in the array to their real names.\n\n## Solution\n\n```javascript\nsecretidentities = function(strs) {\n  return strs.reduce(function(obj, str) {\n    obj[str] = str;\n    return obj;\n  }, {});\n};\n```\n\n## Explanation\n\nThe function secretidentities() takes an array of strings as an input and returns an object mapping the characters in the array to their real names.\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.33.2\"\n}\n", "model": "stabilityai-stablelm-3b-4e1t-fp16", "runtime": "transformers", "code": "secretidentities = function() {\n  return {\n    \"Superman\": \"Clark Kent\",\n    \"Batman\": \"Bruce Wayne\",\n    \"Spider-Man\": \"Peter Parker\"\n  };\n};", "checks": [], "status": "NO_FUNCTION", "passed": 0, "total": 5}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common denominator of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "python", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function gcd(a, b) with two inputs a and b that returns the greatest common denominator of a and b.\n\n## Solution", "answer": "\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n## Testing\n\nprint(gcd(3, 4))\nprint(gcd(4, 3))\nprint(gcd(2, 3))\nprint(gcd(3, 2))\nprint(gcd(2, 3))\nprint(gcd(3, 2))\nprint(gcd(2, 3))\nprint(gcd(3, 2))\nprint(gcd(2, 3))\nprint(gcd(3, 2))\nprint(gcd(2, 3))\nprint(gcd(3, 2))\nprint(gcd(2, 3))\nprint(gcd(3, 2))\nprint(gcd(2, 3))\nprint(gcd(3, 2))\nprint(gcd(2, 3))\nprint(gcd(3, 2))\nprint(gcd(2, 3))\nprint(gcd(3, 2))\nprint(gcd(2, 3))\nprint(gcd(3, 2))\nprint(gcd(2, 3))\nprint(gcd(3, 2))\nprint(gcd(2, 3))\nprint(gcd(3, 2))\nprint(gcd(2, 3))\nprint(gcd(3, 2))\nprint(gcd(2, 3))\nprint(gcd(3, 2))\nprint(gcd(2, 3))\nprint(gcd(3, 2))\nprint(gcd(2, 3))\nprint(gcd(3, 2))\nprint(gcd(2, 3))\nprint(gcd(3, 2))\nprint(gcd(2, 3))\nprint(gcd(3, 2))\nprint(gcd(2, 3))\nprint(gcd(3, 2))\nprint(gcd(2, 3))\nprint(gcd(3, 2))\nprint(gcd(2, 3))\nprint(gcd(3, 2))\nprint(gcd(2, 3))\nprint(gcd(3, 2))\nprint(gcd(2, 3))", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.33.2\"\n}\n", "model": "stabilityai-stablelm-3b-4e1t-fp16", "runtime": "transformers", "code": "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n## Testing\n\nprint(gcd(3, 4))\nprint(gcd(4, 3))\nprint(gcd(2, 3))\nprint(gcd(3, 2))\nprint(gcd(2, 3))\nprint(gcd(3, 2))\nprint(gcd(2, 3))\nprint(gcd(3, 2))\nprint(gcd(2, 3))\nprint(gcd(3, 2))\nprint(gcd(2, 3))\nprint(gcd(3, 2))\nprint(gcd(2, 3))\nprint(gcd(3, 2))\nprint(gcd(2, 3))\nprint(gcd(3, 2))\nprint(gcd(2, 3))\nprint(gcd(3, 2))\nprint(gcd(2, 3))\nprint(gcd(3, 2))\nprint(gcd(2, 3))\nprint(gcd(3, 2))\nprint(gcd(2, 3))\nprint(gcd(3, 2))\nprint(gcd(2, 3))\nprint(gcd(3, 2))\nprint(gcd(2, 3))\nprint(gcd(3, 2))\nprint(gcd(2, 3))\nprint(gcd(3, 2))\nprint(gcd(2, 3))\nprint(gcd(3, 2))\nprint(gcd(2, 3))\nprint(gcd(3, 2))\nprint(gcd(2, 3))\nprint(gcd(3, 2))\nprint(gcd(2, 3))\nprint(gcd(3, 2))\nprint(gcd(2, 3))\nprint(gcd(3, 2))\nprint(gcd(2, 3))\nprint(gcd(3, 2))\nprint(gcd(2, 3))\nprint(gcd(3, 2))\nprint(gcd(2, 3))\nprint(gcd(3, 2))\nprint(gcd(2, 3))", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcd", "got": "gcd", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common denominator of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "javascript", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function gcd(a, b) with two inputs a and b that returns the greatest common denominator of a and b.\n\n## Solution", "answer": "\n\nfunction gcd(a, b) {\n  if (b === 0) {\n    return a;\n  }\n  return gcd(b, a % b);\n}\n\ngcd(5, 7);\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.33.2\"\n}\n", "model": "stabilityai-stablelm-3b-4e1t-fp16", "runtime": "transformers", "code": "function gcd(a, b) {\n  if (b === 0) {\n    return a;\n  }\n  return gcd(b, a % b);\n}\n\ngcd(5, 7);", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcd", "got": "gcd", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "gcf(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common factor of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDAlternative", "language": "python", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function gcf(a, b) with two inputs a and b that returns the greatest common factor of a and b.\n\n## Solution", "answer": "\n\ndef gcf(a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a > b:\n        return gcf(b, a % b)\n    else:\n        return gcf(a, b % a)\n\n## Testing\n\nprint(gcf(4, 6))\nprint(gcf(6, 4))\nprint(gcf(2, 3))\nprint(gcf(3, 2))\nprint(gcf(2, 3))\nprint(gcf(3, 2))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.33.2\"\n}\n", "model": "stabilityai-stablelm-3b-4e1t-fp16", "runtime": "transformers", "code": "def gcf(a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a > b:\n        return gcf(b, a % b)\n    else:\n        return gcf(a, b % a)\n\n## Testing\n\nprint(gcf(4, 6))\nprint(gcf(6, 4))\nprint(gcf(2, 3))\nprint(gcf(3, 2))\nprint(gcf(2, 3))\nprint(gcf(3, 2))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))\nprint(gcf(2, 3))", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcf", "got": "gcf", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "gcf(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common factor of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDAlternative", "language": "javascript", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function gcf(a, b) with two inputs a and b that returns the greatest common factor of a and b.\n\n## Solution", "answer": "\n\nfunction gcf(a, b) {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  if (a > b) {\n    return gcf(b, a % b);\n  }\n  return gcf(a, b % a);\n}\n\ngcf(4, 6);\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.33.2\"\n}\n", "model": "stabilityai-stablelm-3b-4e1t-fp16", "runtime": "transformers", "code": "function gcf(a, b) {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  if (a > b) {\n    return gcf(b, a % b);\n  }\n  return gcf(a, b % a);\n}\n\ngcf(4, 6);", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 0, "status": 0}, {"assert": "f.call(100,20)", "eq": 20, "got": 0, "status": 0}, {"assert": "f.call(5,0)", "eq": 5, "got": 0, "status": 0}, {"assert": "f.call(0,3)", "eq": 3, "got": 0, "status": 0}, {"assert": "f.call(13,7)", "eq": 1, "got": 0, "status": 0}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcf", "got": "gcf", "status": 1}], "status": "FAIL", "passed": 4, "total": 9}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common denominator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "python", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function fofx(x, banana) with two inputs x and banana that returns the greatest common denominator (gcd) of x and banana.\n\n## Solution", "answer": "\n\n```python\ndef gcd(x, banana):\n    if x == 0:\n        return banana\n    else:\n        return gcd(banana % x, x)\n```\n\n## Explanation\n\nThe gcd of two numbers is the largest number that divides both numbers without a remainder.  For example, the gcd of 12 and 8 is 4.  The gcd of 12 and 4 is 4.  The gcd of 12 and 2 is 2.  The gcd of 12 and 1 is 1.  The gcd of 12 and 0 is 0.  The gcd of 12 and 1 is 1.  The gcd of 12 and 2 is 2.  The gcd of 12 and 4 is 4.  The gcd of 12 and 8 is 4.  The gcd of 12 and 12 is 12.  The gcd of 12 and 0 is 0.  The gcd of 12 and 1 is 1.  The gcd of 12 and 2 is 2.  The gcd of 12 and 4 is 4.  The gcd of 12 and 8 is 4.  The gcd of 12 and 12 is 12.  The gcd of 12 and 0 is 0.  The gcd of 12 and 1 is 1.  The gcd of 12 and 2 is 2.  The gcd of 12 and 4 is 4.  The gcd of 12 and 8 is 4.  The gcd of 12 and 12 is 12.  The gcd of 12 and 0 is 0.  The gcd of 12 and 1 is 1.  The gcd of 12 and 2 is 2.  The gcd of 12 and 4 is 4.  The gcd of 12 and 8 is 4.  The gcd of 12 and 12 is 12.  The gcd of 12 and 0 is 0.  The gcd of 12 and 1 is 1.  The gcd of 12 and 2 is 2.  The gcd of 12 and 4 is 4.  The gcd of 12 and 8 is 4.  The gcd of 12 and 12 is 12.  The gcd of 12 and 0 is 0.  The gcd of 12 and 1 is 1.  The gcd of 12 and 2 is 2.  The gcd of 12 and 4 is 4.  The gcd of 12 and 8 is 4.  The gcd of 12 and 12 is 12.  ", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.33.2\"\n}\n", "model": "stabilityai-stablelm-3b-4e1t-fp16", "runtime": "transformers", "code": "def gcd(x, banana):\n    if x == 0:\n        return banana\n    else:\n        return gcd(banana % x, x)", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "banana", "status": 1}, {"assert": "f.name", "eq": "fofx", "got": "gcd", "status": 0}], "status": "FAIL", "passed": 8, "total": 9}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common denominator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "javascript", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function fofx(x, banana) with two inputs x and banana that returns the greatest common denominator (gcd) of x and banana.\n\n## Solution", "answer": "\n\n```javascript\nfunction fofx(x, banana) {\n  return Math.max(x, banana);\n}\n```\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.33.2\"\n}\n", "model": "stabilityai-stablelm-3b-4e1t-fp16", "runtime": "transformers", "code": "function fofx(x, banana) {\n  return Math.max(x, banana);\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 100, "status": 0}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 13, "status": 0}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "banana", "status": 1}, {"assert": "f.name", "eq": "fofx", "got": "fofx", "status": 1}], "status": "FAIL", "passed": 7, "total": 9}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "python", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function factorial(n) with input n that returns the factorial of n using iteration.\n\n## Solution", "answer": "\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nprint(factorial(5))\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.33.2\"\n}\n", "model": "stabilityai-stablelm-3b-4e1t-fp16", "runtime": "transformers", "code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nprint(factorial(5))", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "javascript", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function factorial(n) with input n that returns the factorial of n using iteration.\n\n## Solution", "answer": "\n\nfunction factorial(n) {\n  if (n === 0) {\n    return 1;\n  } else {\n    return n * factorial(n - 1);\n  }\n}\n\nfactorial(5);\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.33.2\"\n}\n", "model": "stabilityai-stablelm-3b-4e1t-fp16", "runtime": "transformers", "code": "function factorial(n) {\n  if (n === 0) {\n    return 1;\n  } else {\n    return n * factorial(n - 1);\n  }\n}\n\nfactorial(5);", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "python", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function factorial(n) with input n that returns the factorial of n using recursion.\n\n## Solution", "answer": "\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n## Testing\n\nprint(factorial(5))\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.33.2\"\n}\n", "model": "stabilityai-stablelm-3b-4e1t-fp16", "runtime": "transformers", "code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n## Testing\n\nprint(factorial(5))", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "javascript", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function factorial(n) with input n that returns the factorial of n using recursion.\n\n## Solution", "answer": "\n\nfunction factorial(n) {\n  if (n === 0) {\n    return 1;\n  } else {\n    return n * factorial(n - 1);\n  }\n}\n\nfactorial(5);\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.33.2\"\n}\n", "model": "stabilityai-stablelm-3b-4e1t-fp16", "runtime": "transformers", "code": "function factorial(n) {\n  if (n === 0) {\n    return 1;\n  } else {\n    return n * factorial(n - 1);\n  }\n}\n\nfactorial(5);", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "python", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function glork(bork) with input bork that returns the factorial of bork.\n\n## Solution", "answer": "\n\n```python\ndef glork(bork):\n    return bork * glork(bork - 1)\n```\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.33.2\"\n}\n", "model": "stabilityai-stablelm-3b-4e1t-fp16", "runtime": "transformers", "code": "def glork(bork):\n    return bork * glork(bork - 1)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": false, "status": 0}, {"assert": "f.call(1)", "eq": 1, "got": {"error": "maximum recursion depth exceeded", "exc_type": "RecursionError"}, "status": 0}, {"assert": "f.call(5)", "eq": 120, "got": {"error": "maximum recursion depth exceeded", "exc_type": "RecursionError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 3, "total": 6}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "javascript", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function glork(bork) with input bork that returns the factorial of bork.\n\n## Solution", "answer": "\n\nfunction glork(bork) {\n  var result = 1;\n  for (var i = 1; i <= bork; i++) {\n    result *= i;\n  }\n  return result;\n}\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.33.2\"\n}\n", "model": "stabilityai-stablelm-3b-4e1t-fp16", "runtime": "transformers", "code": "function glork(bork) {\n  var result = 1;\n  for (var i = 1; i <= bork; i++) {\n    result *= i;\n  }\n  return result;\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 6, "total": 6}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the `n`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation", "name": "FibonacciZeroShot", "language": "python", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function fib(n) with input element number n (0 based) that returns the `n`-th element of the fibonacci sequence.\n\n## Solution", "answer": "\n\n```python\ndef fib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n```\n\n## Test Cases\n\n```python\nassert fib(0) == 0\nassert fib(1) == 1\nassert fib(2) == 1\nassert fib(3) == 2\nassert fib(4) == 3\n```\n\n## Bonus\n\nWrite a function that returns the n-th element of the fibonacci sequence.  The code must start with ```python and end with ```.  Write a python function fib(n) with input element number n (0 based) that returns the `n`-th element of the fibonacci sequence.\n\n## Solution\n\n```python\ndef fib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n```\n\n## Test Cases\n\n```python\nassert fib(0) == 0\nassert fib(1) == 1\nassert fib(2) == 1\nassert fib(3) == 2\nassert fib(4) == 3\n```\n\n## Bonus\n\nWrite a function that returns the n-th element of the fibonacci sequence.  The code must start with ```python and end with ```.  Write a python function fib(n) with input element number n (0 based) that returns the `n`-th element of the fibonacci sequence.\n\n## Bonus\n\nWrite a function that returns the n-th element of the fibonacci sequence.  The code must start with ```python and end with ```.  Write a python function fib(n) with input element number n (0 based) that returns the `n`-th element of the fibonacci sequence.\n\n## Bonus\n\nWrite a function that returns the n-th element of the fibonacci sequence.  The code must start with ```python and end with ```.  Write a python function fib(n) with input element number n (0 based) that returns the `n`-th element of the fibonacci sequence.\n\n## Bonus\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.33.2\"\n}\n", "model": "stabilityai-stablelm-3b-4e1t-fp16", "runtime": "transformers", "code": "def fib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the `n`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation", "name": "FibonacciZeroShot", "language": "javascript", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function fib(n) with input element number n (0 based) that returns the `n`-th element of the fibonacci sequence.\n\n## Solution", "answer": "\n\nfunction fib(n) {\n  if (n === 0) {\n    return 0;\n  } else if (n === 1) {\n    return 1;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n  }\n}\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.33.2\"\n}\n", "model": "stabilityai-stablelm-3b-4e1t-fp16", "runtime": "transformers", "code": "function fib(n) {\n  if (n === 0) {\n    return 0;\n  } else if (n === 1) {\n    return 1;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n  }\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "potato(g)", "Input": "with input element number g (0 based)", "Output": "the `g`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation if the name has been changed", "name": "FibonacciMisnamed", "language": "python", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function potato(g) with input element number g (0 based) that returns the `g`-th element of the fibonacci sequence.\n\n## Solution", "answer": "\n\n```python\ndef potato(g):\n    return fibonacci[g]\n```\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.33.2\"\n}\n", "model": "stabilityai-stablelm-3b-4e1t-fp16", "runtime": "transformers", "code": "def potato(g):\n    return fibonacci[g]", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": {"error": "name 'fibonacci' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(1)", "eq": 1, "got": {"error": "name 'fibonacci' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(2)", "eq": 1, "got": {"error": "name 'fibonacci' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(3)", "eq": 2, "got": {"error": "name 'fibonacci' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(5)", "eq": 5, "got": {"error": "name 'fibonacci' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "g", "got": "g", "status": 1}, {"assert": "f.name", "eq": "potato", "got": "potato", "status": 1}], "status": "FAIL", "passed": 3, "total": 8}
{"Signature": "potato(g)", "Input": "with input element number g (0 based)", "Output": "the `g`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation if the name has been changed", "name": "FibonacciMisnamed", "language": "javascript", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function potato(g) with input element number g (0 based) that returns the `g`-th element of the fibonacci sequence.\n\n## Solution", "answer": "\n\nfunction potato(g) {\n  return fibonacci(g);\n}\n\nfunction fibonacci(n) {\n  if (n === 0) {\n    return 0;\n  } else if (n === 1) {\n    return 1;\n  } else {\n    return fibonacci(n - 1) + fibonacci(n - 2);\n  }\n}\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.33.2\"\n}\n", "model": "stabilityai-stablelm-3b-4e1t-fp16", "runtime": "transformers", "code": "function potato(g) {\n  return fibonacci(g);\n}\n\nfunction fibonacci(n) {\n  if (n === 0) {\n    return 0;\n  } else if (n === 1) {\n    return 1;\n  } else {\n    return fibonacci(n - 1) + fibonacci(n - 2);\n  }\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "g", "got": "g", "status": 1}, {"assert": "f.name", "eq": "potato", "got": "potato", "status": 1}], "status": "PASS", "passed": 8, "total": 8}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first `n` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciListZeroShot", "language": "python", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function fib(n) with input length n that returns a list with the first `n` elements of the fibonacci sequence.\n\n## Solution", "answer": "\n\n```python\ndef fib(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1]\n    else:\n        return fib(n-1) + fib(n-2)\n```\n\n## Test Cases\n\n```python\nassert fib(0) == [0]\nassert fib(1) == [1]\nassert fib(2) == [1, 1]\nassert fib(3) == [1, 2, 1]\nassert fib(4) == [1, 2, 3, 1]\n```\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.33.2\"\n}\n", "model": "stabilityai-stablelm-3b-4e1t-fp16", "runtime": "transformers", "code": "def fib(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1]\n    else:\n        return fib(n-1) + fib(n-2)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [1, 0], "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [1, 0, 1], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [1, 0, 1, 1, 0, 1, 0, 1], "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 3, "total": 7}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first `n` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciListZeroShot", "language": "javascript", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function fib(n) with input length n that returns a list with the first `n` elements of the fibonacci sequence.\n\n## Solution", "answer": "\n\n```javascript\nfunction fib(n) {\n  if (n === 0) {\n    return [0, 1];\n  } else if (n === 1) {\n    return [1];\n  } else {\n    return fib(n - 1)\n      .concat(fib(n - 2));\n  }\n}\n```\n\n## Test\n\n```javascript\nvar test = require('tape');\n\ntest('fibonacci', function (t) {\n  t.plan(3);\n  t.equal(fib(0), [0, 1]);\n  t.equal(fib(1), [1]);\n  t.equal(fib(2), [1, 1]);\n});\n```\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.33.2\"\n}\n", "model": "stabilityai-stablelm-3b-4e1t-fp16", "runtime": "transformers", "code": "function fib(n) {\n  if (n === 0) {\n    return [0, 1];\n  } else if (n === 1) {\n    return [1];\n  } else {\n    return fib(n - 1)\n      .concat(fib(n - 2));\n  }\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [1, 0, 1], "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [1, 0, 1, 1], "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], "status": 0}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "FAIL", "passed": 3, "total": 7}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first `bork` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciListMisnamed", "language": "python", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function glork(bork) with input length bork that returns a list with the first `bork` elements of the fibonacci sequence.\n\n## Solution", "answer": "\n\n```python\ndef glork(bork):\n    return fibonacci(bork)\n```\n\n## Test\n\n```python\nglork(5)\n```\n\n## Output\n\n```\n[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12902246547, 21182829201, 35019528137, 5702887653, 9227450607, 14930352529, 24157564657, 31781117645, 51422949213, 83204077843, 13462693043, 21783090243, 35245769393, 57028871353, 92274506053, 149303525293, 241575646545, 317811176445, 51422949213, 832040778433, 134626930443, 217830902433, 352457693933, 570288713453, 922745060553, 1493035252933, 2415756465453, 3178111764453, 51422949213, 8320407784333, 1346269304433, 2178309024333, 3524576939333, 5702887134533, 9227450605533, 14930352529333, 24157564654533, 31781117644533, 51422949213, 8320407784333, 13462693044333, 2178309024333, 3524576939333, 57028871345333, 92274506055333, 14930352529", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.33.2\"\n}\n", "model": "stabilityai-stablelm-3b-4e1t-fp16", "runtime": "transformers", "code": "def glork(bork):\n    return fibonacci(bork)", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": false, "status": 0}, {"assert": "f.call(1)", "eq": [0], "got": {"error": "name 'fibonacci' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": {"error": "name 'fibonacci' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": {"error": "name 'fibonacci' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": {"error": "name 'fibonacci' is not defined", "exc_type": "NameError"}, "status": 0}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 3, "total": 8}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first `bork` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciListMisnamed", "language": "javascript", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function glork(bork) with input length bork that returns a list with the first `bork` elements of the fibonacci sequence.\n\n## Solution", "answer": "\n\n```javascript\nfunction glork(bork) {\n  var fib = [0, 1];\n  for (var i = 2; i < bork; i++) {\n    fib.push(fib[i - 1] + fib[i - 2]);\n  }\n  return fib;\n}\n```\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.33.2\"\n}\n", "model": "stabilityai-stablelm-3b-4e1t-fp16", "runtime": "transformers", "code": "function glork(bork) {\n  var fib = [0, 1];\n  for (var i = 2; i < bork; i++) {\n    fib.push(fib[i - 1] + fib[i - 2]);\n  }\n  return fib;\n}", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0, 1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1], "status": 1}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 1], "status": 1}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 1, 2, 3], "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 7, "total": 8}
{"Signature": "substrcount(str, substr)", "Input": "with inputs `str` and `substr`", "Output": "counts the number of times the sub-string `substr` occurs in `str`", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "python", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```python and end with ```.  Write a python function substrcount(str, substr) with inputs `str` and `substr` that returns counts the number of times the sub-string `substr` occurs in `str`.\n\n## Solution", "answer": "\n\n```python\ndef substrcount(str, substr):\n    count = 0\n    for i in range(len(str)):\n        if str[i] == substr[0]:\n            count += 1\n            if str[i] == substr[len(substr)-1]:\n                count += 1\n    return count\n```\n\n## Explanation\n\nThe function takes two inputs `str` and `substr`.  The function returns the number of times the sub-string `substr` occurs in `str`.\n\nThe function starts by creating a variable `count` that will hold the number of times the sub-string `substr` occurs in `str`.  The function then loops through the string `str` and checks if the current character is equal to the first character of the sub-string `substr`.  If the current character is equal to the first character of the sub-string `substr`, the function increments the variable `count` by 1.  The function then checks if the current character is equal to the last character of the sub-string `substr`.  If the current character is equal to the last character of the sub-string `substr`, the function increments the variable `count` by 1.  The function then returns the variable `count`.\n", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.33.2\"\n}\n", "model": "stabilityai-stablelm-3b-4e1t-fp16", "runtime": "transformers", "code": "def substrcount(str, substr):\n    count = 0\n    for i in range(len(str)):\n        if str[i] == substr[0]:\n            count += 1\n            if str[i] == substr[len(substr)-1]:\n                count += 1\n    return count", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrcount", "status": 1}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 6, "status": 0}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 3, "status": 0}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 3, "status": 1}], "status": "FAIL", "passed": 5, "total": 7}
{"Signature": "substrcount(str, substr)", "Input": "with inputs `str` and `substr`", "Output": "counts the number of times the sub-string `substr` occurs in `str`", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "javascript", "prompt": "## Instruction\n\nWrite simple, concise code that does not rely on any library functions.  The code must start with ```javascript and end with ```.  Write a javascript function substrcount(str, substr) with inputs `str` and `substr` that returns counts the number of times the sub-string `substr` occurs in `str`.\n\n## Solution", "answer": "\n\nfunction substrcount(str, substr) {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === substr[0]) {\n      count++;\n      if (substr[1] === substr[0]) {\n        count++;\n      }\n      if (substr[2] === substr[0]) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\n\nsubstrcount('abcdefg', 'abc') // 3\nsubstrcount('abcdefg', 'abcdef') // 4\nsubstrcount('abcdefg', 'abcdefg') // 0\nsubstrcount('abcdefg', 'abcdefg') // 0\nsubstrcount('abcdefg', 'abcdefg') // 0\nsubstrcount('abcdefg', 'abcdefg') // 0\nsubstrcount('abcdefg', 'abcdefg') // 0\nsubstrcount('abcdefg', 'abcdefg') // 0\nsubstrcount('abcdefg', 'abcdefg') // 0\nsubstrcount('abcdefg', 'abcdefg') // 0\nsubstrcount('abcdefg', 'abcdefg') // 0\nsubstrcount('abcdefg', 'abcdefg') // 0\nsubstrcount('abcdefg', 'abcdefg') // 0\nsubstrcount('abcdefg', 'abcdefg') // 0\nsubstrcount('abcdefg', 'abcdefg') // 0\nsubstrcount('abcdefg', 'abcdefg') // 0\nsubstrcount('abcdefg', 'abcdefg') // 0\nsubstrcount('abcdefg', 'abcdefg') // 0\nsubstrcount('abcdefg', 'abcdefg') // 0\nsubstrcount('abcdefg', 'abcdefg') // 0\nsubstrcount('abcdefg', 'abcdefg') // 0\nsubstrcount('abcdefg', 'abcdefg') // 0\nsubstrcount('abcdefg', 'abcdefg') // 0\nsubstrcount('abcdefg', 'abcdefg') // 0\nsubstrcount('abcdefg', 'abcdefg') // 0\nsubstrcount('abcdefg', 'abcdefg') // 0\nsubstrcount('abcdefg', 'abcdefg') // 0", "params": "GenerationConfig {\n  \"_from_model_config\": true,\n  \"bos_token_id\": 0,\n  \"do_sample\": true,\n  \"eos_token_id\": 0,\n  \"max_new_tokens\": 512,\n  \"top_k\": 1,\n  \"transformers_version\": \"4.33.2\"\n}\n", "model": "stabilityai-stablelm-3b-4e1t-fp16", "runtime": "transformers", "code": "function substrcount(str, substr) {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === substr[0]) {\n      count++;\n      if (substr[1] === substr[0]) {\n        count++;\n      }\n      if (substr[2] === substr[0]) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\n\nsubstrcount('abcdefg', 'abc') // 3\nsubstrcount('abcdefg', 'abcdef') // 4\nsubstrcount('abcdefg', 'abcdefg') // 0\nsubstrcount('abcdefg', 'abcdefg') // 0\nsubstrcount('abcdefg', 'abcdefg') // 0\nsubstrcount('abcdefg', 'abcdefg') // 0\nsubstrcount('abcdefg', 'abcdefg') // 0\nsubstrcount('abcdefg', 'abcdefg') // 0\nsubstrcount('abcdefg', 'abcdefg') // 0\nsubstrcount('abcdefg', 'abcdefg') // 0\nsubstrcount('abcdefg', 'abcdefg') // 0\nsubstrcount('abcdefg', 'abcdefg') // 0\nsubstrcount('abcdefg', 'abcdefg') // 0\nsubstrcount('abcdefg', 'abcdefg') // 0\nsubstrcount('abcdefg', 'abcdefg') // 0\nsubstrcount('abcdefg', 'abcdefg') // 0\nsubstrcount('abcdefg', 'abcdefg') // 0\nsubstrcount('abcdefg', 'abcdefg') // 0\nsubstrcount('abcdefg', 'abcdefg') // 0\nsubstrcount('abcdefg', 'abcdefg') // 0\nsubstrcount('abcdefg', 'abcdefg') // 0\nsubstrcount('abcdefg', 'abcdefg') // 0\nsubstrcount('abcdefg', 'abcdefg') // 0\nsubstrcount('abcdefg', 'abcdefg') // 0\nsubstrcount('abcdefg', 'abcdefg') // 0\nsubstrcount('abcdefg', 'abcdefg') // 0\nsubstrcount('abcdefg', 'abcdefg') // 0", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrcount", "status": 1}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 3, "status": 0}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 3, "status": 1}], "status": "FAIL", "passed": 6, "total": 7}