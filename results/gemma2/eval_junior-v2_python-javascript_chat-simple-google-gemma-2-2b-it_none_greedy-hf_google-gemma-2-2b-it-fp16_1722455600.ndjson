{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "python", "prompt": "<bos><start_of_turn>user\nWrite a python function factorial(n) with input n that returns the factorial of n using iteration<end_of_turn>\n<start_of_turn>model\n", "answer": "```python\ndef factorial(n):\n  \"\"\"\n  Calculates the factorial of a non-negative integer using iteration.\n\n  Args:\n    n: The non-negative integer for which to calculate the factorial.\n\n  Returns:\n    The factorial of n.\n  \"\"\"\n  if n < 0:\n    raise ValueError(\"Factorial is not defined for negative numbers\")\n  elif n == 0:\n    return 1\n  else:\n    fact = 1\n    for i in range(1, n + 1):\n      fact *= i\n    return fact\n\n# Example usage\nnumber = 5\nresult = factorial(number)\nprint(f\"The factorial of {number} is {result}\")\n```\n\n", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"cache_implementation\": \"hybrid\",\n  \"eos_token_id\": [\n    1,\n    107\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-gemma-2-2b-it-fp16", "runtime": "transformers", "code": "def factorial(n):\n  \"\"\"\n  Calculates the factorial of a non-negative integer using iteration.\n\n  Args:\n    n: The non-negative integer for which to calculate the factorial.\n\n  Returns:\n    The factorial of n.\n  \"\"\"\n  if n < 0:\n    raise ValueError(\"Factorial is not defined for negative numbers\")\n  elif n == 0:\n    return 1\n  else:\n    fact = 1\n    for i in range(1, n + 1):\n      fact *= i\n    return fact\n\n# Example usage\nnumber = 5\nresult = factorial(number)\nprint(f\"The factorial of {number} is {result}\")", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using iteration", "Description": "See if the model can implement a well known function", "name": "FactorialZeroShot", "language": "javascript", "prompt": "<bos><start_of_turn>user\nWrite a javascript function factorial(n) with input n that returns the factorial of n using iteration<end_of_turn>\n<start_of_turn>model\n", "answer": "```javascript\nfunction factorial(n) {\n  if (n === 0) {\n    return 1;\n  } else {\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n      result *= i;\n    }\n    return result;\n  }\n}\n\n// Example usage:\nconsole.log(factorial(5)); // Output: 120\n```\n\n", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"cache_implementation\": \"hybrid\",\n  \"eos_token_id\": [\n    1,\n    107\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-gemma-2-2b-it-fp16", "runtime": "transformers", "code": "function factorial(n) {\n  if (n === 0) {\n    return 1;\n  } else {\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n      result *= i;\n    }\n    return result;\n  }\n}\n\n// Example usage:\nconsole.log(factorial(5)); // Output: 120", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "python", "prompt": "<bos><start_of_turn>user\nWrite a python function factorial(n) with input n that returns the factorial of n using recursion<end_of_turn>\n<start_of_turn>model\n", "answer": "```python\ndef factorial(n):\n  \"\"\"\n  This function calculates the factorial of a non-negative integer using recursion.\n\n  Args:\n    n: The non-negative integer for which to calculate the factorial.\n\n  Returns:\n    The factorial of n.\n  \"\"\"\n  if n == 0:\n    return 1\n  else:\n    return n * factorial(n - 1)\n\n# Example usage\nnumber = 5\nresult = factorial(number)\nprint(f\"The factorial of {number} is {result}\")\n```\n\n", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"cache_implementation\": \"hybrid\",\n  \"eos_token_id\": [\n    1,\n    107\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-gemma-2-2b-it-fp16", "runtime": "transformers", "code": "def factorial(n):\n  \"\"\"\n  This function calculates the factorial of a non-negative integer using recursion.\n\n  Args:\n    n: The non-negative integer for which to calculate the factorial.\n\n  Returns:\n    The factorial of n.\n  \"\"\"\n  if n == 0:\n    return 1\n  else:\n    return n * factorial(n - 1)\n\n# Example usage\nnumber = 5\nresult = factorial(number)\nprint(f\"The factorial of {number} is {result}\")", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "factorial(n)", "Input": "with input n", "Output": "the factorial of n using recursion", "Description": "See if the model can implement a well known function using recursion", "name": "FactorialRecursiveZeroShot", "language": "javascript", "prompt": "<bos><start_of_turn>user\nWrite a javascript function factorial(n) with input n that returns the factorial of n using recursion<end_of_turn>\n<start_of_turn>model\n", "answer": "```javascript\nfunction factorial(n) {\n  if (n === 0) {\n    return 1; // Base case: factorial of 0 is 1\n  } else {\n    return n * factorial(n - 1); // Recursive step: multiply n by factorial of (n-1)\n  }\n}\n\n// Example usage:\nconsole.log(factorial(5)); // Output: 120\n```\n\n", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"cache_implementation\": \"hybrid\",\n  \"eos_token_id\": [\n    1,\n    107\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-gemma-2-2b-it-fp16", "runtime": "transformers", "code": "function factorial(n) {\n  if (n === 0) {\n    return 1; // Base case: factorial of 0 is 1\n  } else {\n    return n * factorial(n - 1); // Recursive step: multiply n by factorial of (n-1)\n  }\n}\n\n// Example usage:\nconsole.log(factorial(5)); // Output: 120", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}], "status": "PASS", "passed": 4, "total": 4}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "python", "prompt": "<bos><start_of_turn>user\nWrite a python function glork(bork) with input bork that returns the factorial of bork<end_of_turn>\n<start_of_turn>model\n", "answer": "```python\ndef glork(bork):\n  \"\"\"\n  This function calculates the factorial of a given number.\n\n  Args:\n    bork: An integer.\n\n  Returns:\n    The factorial of bork.\n  \"\"\"\n  if bork == 0:\n    return 1\n  else:\n    return bork * glork(bork - 1)\n\n# Example usage\nnumber = 5\nresult = glork(number)\nprint(f\"The factorial of {number} is {result}\")\n```\n\n", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"cache_implementation\": \"hybrid\",\n  \"eos_token_id\": [\n    1,\n    107\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-gemma-2-2b-it-fp16", "runtime": "transformers", "code": "def glork(bork):\n  \"\"\"\n  This function calculates the factorial of a given number.\n\n  Args:\n    bork: An integer.\n\n  Returns:\n    The factorial of bork.\n  \"\"\"\n  if bork == 0:\n    return 1\n  else:\n    return bork * glork(bork - 1)\n\n# Example usage\nnumber = 5\nresult = glork(number)\nprint(f\"The factorial of {number} is {result}\")", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 6, "total": 6}
{"Signature": "glork(bork)", "Input": "with input bork", "Output": "the factorial of bork", "Description": "See if the model can implement a well known function if the name has been changed", "name": "FactorialMisnamed", "language": "javascript", "prompt": "<bos><start_of_turn>user\nWrite a javascript function glork(bork) with input bork that returns the factorial of bork<end_of_turn>\n<start_of_turn>model\n", "answer": "```javascript\nfunction glork(bork) {\n  if (bork === 0) {\n    return 1;\n  } else {\n    return bork * glork(bork - 1);\n  }\n}\n\n// Example usage:\nconsole.log(glork(5)); // Output: 120\n```\n\n", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"cache_implementation\": \"hybrid\",\n  \"eos_token_id\": [\n    1,\n    107\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-gemma-2-2b-it-fp16", "runtime": "transformers", "code": "function glork(bork) {\n  if (bork === 0) {\n    return 1;\n  } else {\n    return bork * glork(bork - 1);\n  }\n}\n\n// Example usage:\nconsole.log(glork(5)); // Output: 120", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(1),int)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(5)", "eq": 120, "got": 120, "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 6, "total": 6}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common denominator of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "python", "prompt": "<bos><start_of_turn>user\nWrite a python function gcd(a, b) with two inputs a and b that returns the greatest common denominator of a and b<end_of_turn>\n<start_of_turn>model\n", "answer": "```python\ndef gcd(a, b):\n  \"\"\"\n  This function calculates the greatest common denominator (GCD) of two integers using Euclid's algorithm.\n\n  Args:\n    a: The first integer.\n    b: The second integer.\n\n  Returns:\n    The greatest common denominator of a and b.\n  \"\"\"\n  while b:\n    a, b = b, a % b\n  return a\n\n# Example usage\nnum1 = 48\nnum2 = 18\nresult = gcd(num1, num2)\nprint(f\"The GCD of {num1} and {num2} is: {result}\")\n```\n\n", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"cache_implementation\": \"hybrid\",\n  \"eos_token_id\": [\n    1,\n    107\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-gemma-2-2b-it-fp16", "runtime": "transformers", "code": "def gcd(a, b):\n  \"\"\"\n  This function calculates the greatest common denominator (GCD) of two integers using Euclid's algorithm.\n\n  Args:\n    a: The first integer.\n    b: The second integer.\n\n  Returns:\n    The greatest common denominator of a and b.\n  \"\"\"\n  while b:\n    a, b = b, a % b\n  return a\n\n# Example usage\nnum1 = 48\nnum2 = 18\nresult = gcd(num1, num2)\nprint(f\"The GCD of {num1} and {num2} is: {result}\")", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcd", "got": "gcd", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "gcd(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common denominator of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDZeroShot", "language": "javascript", "prompt": "<bos><start_of_turn>user\nWrite a javascript function gcd(a, b) with two inputs a and b that returns the greatest common denominator of a and b<end_of_turn>\n<start_of_turn>model\n", "answer": "```javascript\nfunction gcd(a, b) {\n  while (b !== 0) {\n    let temp = b;\n    b = a % b;\n    a = temp;\n  }\n  return a;\n}\n```\n\n", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"cache_implementation\": \"hybrid\",\n  \"eos_token_id\": [\n    1,\n    107\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-gemma-2-2b-it-fp16", "runtime": "transformers", "code": "function gcd(a, b) {\n  while (b !== 0) {\n    let temp = b;\n    b = a % b;\n    a = temp;\n  }\n  return a;\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcd", "got": "gcd", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "gcf(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common factor of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDAlternative", "language": "python", "prompt": "<bos><start_of_turn>user\nWrite a python function gcf(a, b) with two inputs a and b that returns the greatest common factor of a and b<end_of_turn>\n<start_of_turn>model\n", "answer": "```python\ndef gcf(a, b):\n  \"\"\"\n  This function calculates the greatest common factor (GCD) of two integers using Euclid's algorithm.\n\n  Args:\n    a: The first integer.\n    b: The second integer.\n\n  Returns:\n    The greatest common factor of a and b.\n  \"\"\"\n  while b:\n    a, b = b, a % b\n  return a\n\n# Example usage\nnum1 = 48\nnum2 = 18\nresult = gcf(num1, num2)\nprint(f\"The GCD of {num1} and {num2} is: {result}\")\n```\n\n", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"cache_implementation\": \"hybrid\",\n  \"eos_token_id\": [\n    1,\n    107\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-gemma-2-2b-it-fp16", "runtime": "transformers", "code": "def gcf(a, b):\n  \"\"\"\n  This function calculates the greatest common factor (GCD) of two integers using Euclid's algorithm.\n\n  Args:\n    a: The first integer.\n    b: The second integer.\n\n  Returns:\n    The greatest common factor of a and b.\n  \"\"\"\n  while b:\n    a, b = b, a % b\n  return a\n\n# Example usage\nnum1 = 48\nnum2 = 18\nresult = gcf(num1, num2)\nprint(f\"The GCD of {num1} and {num2} is: {result}\")", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcf", "got": "gcf", "status": 1}], "status": "PASS", "passed": 9, "total": 9}
{"Signature": "gcf(a, b)", "Input": "with two inputs a and b", "Output": "the greatest common factor of a and b", "Description": "See if the model can output a well-known, simple algorithm.", "name": "GCDAlternative", "language": "javascript", "prompt": "<bos><start_of_turn>user\nWrite a javascript function gcf(a, b) with two inputs a and b that returns the greatest common factor of a and b<end_of_turn>\n<start_of_turn>model\n", "answer": "```javascript\nfunction gcd(a, b) {\n  while (b !== 0) {\n    let temp = b;\n    b = a % b;\n    a = temp;\n  }\n  return a;\n}\n\n// Example usage:\nconst num1 = 48;\nconst num2 = 18;\nconst result = gcd(num1, num2);\nconsole.log(`The GCD of ${num1} and ${num2} is: ${result}`); \n```\n\n", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"cache_implementation\": \"hybrid\",\n  \"eos_token_id\": [\n    1,\n    107\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-gemma-2-2b-it-fp16", "runtime": "transformers", "code": "function gcd(a, b) {\n  while (b !== 0) {\n    let temp = b;\n    b = a % b;\n    a = temp;\n  }\n  return a;\n}\n\n// Example usage:\nconst num1 = 48;\nconst num2 = 18;\nconst result = gcd(num1, num2);\nconsole.log(`The GCD of ${num1} and ${num2} is: ${result}`);", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "a", "got": "a", "status": 1}, {"assert": "f.args[1].name", "eq": "b", "got": "b", "status": 1}, {"assert": "f.name", "eq": "gcf", "got": "gcd", "status": 0}], "status": "FAIL", "passed": 8, "total": 9}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common denominator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "python", "prompt": "<bos><start_of_turn>user\nWrite a python function fofx(x, banana) with two inputs x and banana that returns the greatest common denominator (gcd) of x and banana<end_of_turn>\n<start_of_turn>model\n", "answer": "```python\ndef gcd(x, y):\n  \"\"\"\n  This function calculates the greatest common denominator (GCD) of two integers using Euclid's algorithm.\n\n  Args:\n    x: The first integer.\n    y: The second integer.\n\n  Returns:\n    The greatest common denominator of x and y.\n  \"\"\"\n  while y:\n    x, y = y, x % y\n  return x\n\ndef fofx(x, banana):\n  \"\"\"\n  This function calculates the greatest common denominator (GCD) of two integers using Euclid's algorithm.\n\n  Args:\n    x: The first integer.\n    banana: The second integer.\n\n  Returns:\n    The greatest common denominator of x and banana.\n  \"\"\"\n  return gcd(x, banana)\n\n# Example usage\nx = 12\nbanana = 18\nresult = fofx(x, banana)\nprint(f\"The GCD of {x} and {banana} is: {result}\")\n```\n\n", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"cache_implementation\": \"hybrid\",\n  \"eos_token_id\": [\n    1,\n    107\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-gemma-2-2b-it-fp16", "runtime": "transformers", "code": "def gcd(x, y):\n  \"\"\"\n  This function calculates the greatest common denominator (GCD) of two integers using Euclid's algorithm.\n\n  Args:\n    x: The first integer.\n    y: The second integer.\n\n  Returns:\n    The greatest common denominator of x and y.\n  \"\"\"\n  while y:\n    x, y = y, x % y\n  return x\n\ndef fofx(x, banana):\n  \"\"\"\n  This function calculates the greatest common denominator (GCD) of two integers using Euclid's algorithm.\n\n  Args:\n    x: The first integer.\n    banana: The second integer.\n\n  Returns:\n    The greatest common denominator of x and banana.\n  \"\"\"\n  return gcd(x, banana)\n\n# Example usage\nx = 12\nbanana = 18\nresult = fofx(x, banana)\nprint(f\"The GCD of {x} and {banana} is: {result}\")", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "y", "status": 0}, {"assert": "f.name", "eq": "fofx", "got": "gcd", "status": 0}], "status": "FAIL", "passed": 7, "total": 9}
{"Signature": "fofx(x, banana)", "Input": "with two inputs x and banana", "Output": "the greatest common denominator (gcd) of x and banana", "Description": "See if the model can output a well-known, simple algorithm if the name has been changed.", "name": "GCDMisnamed", "language": "javascript", "prompt": "<bos><start_of_turn>user\nWrite a javascript function fofx(x, banana) with two inputs x and banana that returns the greatest common denominator (gcd) of x and banana<end_of_turn>\n<start_of_turn>model\n", "answer": "```javascript\nfunction gcd(x, y) {\n  if (y === 0) {\n    return x;\n  }\n  return gcd(y, x % y);\n}\n\nfunction fofx(x, banana) {\n  return gcd(x, banana);\n}\n```\n\n", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"cache_implementation\": \"hybrid\",\n  \"eos_token_id\": [\n    1,\n    107\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-gemma-2-2b-it-fp16", "runtime": "transformers", "code": "function gcd(x, y) {\n  if (y === 0) {\n    return x;\n  }\n  return gcd(y, x % y);\n}\n\nfunction fofx(x, banana) {\n  return gcd(x, banana);\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(1,1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(100,20)", "eq": 20, "got": 20, "status": 1}, {"assert": "f.call(5,0)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call(0,3)", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(13,7)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.args[0].name", "eq": "x", "got": "x", "status": 1}, {"assert": "f.args[1].name", "eq": "banana", "got": "y", "status": 0}, {"assert": "f.name", "eq": "fofx", "got": "gcd", "status": 0}], "status": "FAIL", "passed": 7, "total": 9}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "python", "prompt": "<bos><start_of_turn>user\nWrite a python function meaning_of_life() with no inputs that returns a single integer, the answer to life the universe and everything<end_of_turn>\n<start_of_turn>model\n", "answer": "```python\ndef meaning_of_life():\n  \"\"\"\n  This function returns the answer to the ultimate question of life, the universe, and everything.\n  \n  It's a humorous take on the famous science fiction comedy series Hitchhiker's Guide to the Galaxy.\n  \n  Returns:\n    int: 42\n  \"\"\"\n  return 42\n\nprint(meaning_of_life())\n```\n\n", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"cache_implementation\": \"hybrid\",\n  \"eos_token_id\": [\n    1,\n    107\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-gemma-2-2b-it-fp16", "runtime": "transformers", "code": "def meaning_of_life():\n  \"\"\"\n  This function returns the answer to the ultimate question of life, the universe, and everything.\n  \n  It's a humorous take on the famous science fiction comedy series Hitchhiker's Guide to the Galaxy.\n  \n  Returns:\n    int: 42\n  \"\"\"\n  return 42\n\nprint(meaning_of_life())", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaning_of_life", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "PASS", "passed": 3, "total": 3}
{"Signature": "meaning_of_life()", "Input": "with no inputs", "Output": "a single integer, the answer to life the universe and everything", "Fact": "the answer to life the universe and everything is 42", "Description": "Scalar function with no arguments, see if the model can use its internal knowledge to both code and summon a fact from pop culture.", "name": "SanityMeaningOfLife", "language": "javascript", "prompt": "<bos><start_of_turn>user\nWrite a javascript function meaning_of_life() with no inputs that returns a single integer, the answer to life the universe and everything<end_of_turn>\n<start_of_turn>model\n", "answer": "```javascript\nfunction meaningOfLife() {\n  return 42;\n}\n```\n\nThis function is a humorous take on the famous science fiction comedy series *The Hitchhiker's Guide to the Galaxy* by Douglas Adams. In the series, the answer to the ultimate question of life, the universe, and everything is revealed to be 42. \n\n", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"cache_implementation\": \"hybrid\",\n  \"eos_token_id\": [\n    1,\n    107\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-gemma-2-2b-it-fp16", "runtime": "transformers", "code": "function meaningOfLife() {\n  return 42;\n}", "checks": [{"assert": "f.name", "eq": "meaning_of_life", "got": "meaningOfLife", "status": 0}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()", "eq": 42, "got": 42, "status": 1}], "status": "FAIL", "passed": 2, "total": 3}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "A simple list function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "python", "prompt": "<bos><start_of_turn>user\nWrite a python function things() with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain<end_of_turn>\n<start_of_turn>model\n", "answer": "```python\ndef things():\n  \"\"\"\n  This function returns a list containing the number 5, the string 'foobar', and the capital city of Spain.\n  \"\"\"\n  return [5, 'foobar', 'Madrid']\n\n# Example usage\nprint(things())\n```\n\n", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"cache_implementation\": \"hybrid\",\n  \"eos_token_id\": [\n    1,\n    107\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-gemma-2-2b-it-fp16", "runtime": "transformers", "code": "def things():\n  \"\"\"\n  This function returns a list containing the number 5, the string 'foobar', and the capital city of Spain.\n  \"\"\"\n  return [5, 'foobar', 'Madrid']\n\n# Example usage\nprint(things())", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()[0]", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call()[1]", "eq": "foobar", "got": "foobar", "status": 1}, {"assert": "f.call()[2]", "eq": "Madrid", "got": "Madrid", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "things()", "Input": "with no inputs", "Output": "a list with three values: the number 5, the string 'foobar', the capital city of Spain", "Fact": "the capital city of Spain is Madrid", "Description": "A simple list function, see if the model can combine input facts with internal knowledge.", "name": "SanityList", "language": "javascript", "prompt": "<bos><start_of_turn>user\nWrite a javascript function things() with no inputs that returns a list with three values: the number 5, the string 'foobar', the capital city of Spain<end_of_turn>\n<start_of_turn>model\n", "answer": "```javascript\nfunction things() {\n  return [5, 'foobar', 'Madrid'];\n}\n```\n\n", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"cache_implementation\": \"hybrid\",\n  \"eos_token_id\": [\n    1,\n    107\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-gemma-2-2b-it-fp16", "runtime": "transformers", "code": "function things() {\n  return [5, 'foobar', 'Madrid'];\n}", "checks": [{"assert": "f.name", "eq": "things", "got": "things", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call()[0]", "eq": 5, "got": 5, "status": 1}, {"assert": "f.call()[1]", "eq": "foobar", "got": "foobar", "status": 1}, {"assert": "f.call()[2]", "eq": "Madrid", "got": "Madrid", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "python", "prompt": "<bos><start_of_turn>user\nWrite a python function secretidentities() with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names<end_of_turn>\n<start_of_turn>model\n", "answer": "```python\ndef secretidentities():\n  \"\"\"Returns an object mapping superheroes to their real names.\"\"\"\n  return {\n    \"Superman\": \"Clark Kent\",\n    \"Batman\": \"Bruce Wayne\",\n    \"Spider-Man\": \"Peter Parker\"\n  }\n\n# Example usage\nsuperhero_real_names = secretidentities()\nprint(superhero_real_names)\n```\n\n", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"cache_implementation\": \"hybrid\",\n  \"eos_token_id\": [\n    1,\n    107\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-gemma-2-2b-it-fp16", "runtime": "transformers", "code": "def secretidentities():\n  \"\"\"Returns an object mapping superheroes to their real names.\"\"\"\n  return {\n    \"Superman\": \"Clark Kent\",\n    \"Batman\": \"Bruce Wayne\",\n    \"Spider-Man\": \"Peter Parker\"\n  }\n\n# Example usage\nsuperhero_real_names = secretidentities()\nprint(superhero_real_names)", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secretidentities", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq-any": ["Clark Kent", "Kal-El"], "got": "Clark Kent", "status": 1}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": "Bruce Wayne", "status": 1}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": "Peter Parker", "status": 1}], "status": "PASS", "passed": 5, "total": 5}
{"Signature": "secretidentities()", "Input": "with no inputs", "Output": "an object mapping the superheroes Superman, Batman and Spider-Man to their real names", "Fact": "Superman's real name is Clark Kent. Batman's real name is Bruce Wayne. Spider-Man's real name is Peter Parker.", "Description": "Object function, see if the model can use its internal knowledge to build a map.", "name": "SanitySecretIdentityMap", "language": "javascript", "prompt": "<bos><start_of_turn>user\nWrite a javascript function secretidentities() with no inputs that returns an object mapping the superheroes Superman, Batman and Spider-Man to their real names<end_of_turn>\n<start_of_turn>model\n", "answer": "```javascript\nfunction secretidentities() {\n  return {\n    Superman: \"Clark Kent\",\n    Batman: \"Bruce Wayne\",\n    Spider-Man: \"Peter Parker\"\n  };\n}\n```\n\n", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"cache_implementation\": \"hybrid\",\n  \"eos_token_id\": [\n    1,\n    107\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-gemma-2-2b-it-fp16", "runtime": "transformers", "code": "function secretidentities() {\n  return {\n    Superman: \"Clark Kent\",\n    Batman: \"Bruce Wayne\",\n    Spider-Man: \"Peter Parker\"\n  };\n}", "checks": [{"assert": "f.name", "eq": "secretidentities", "got": "secretidentities", "status": 1}, {"assert": "len(f.args)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call().get('Superman')", "eq-any": ["Clark Kent", "Kal-El"], "got": null, "status": 0}, {"assert": "f.call().get('Batman')", "eq": "Bruce Wayne", "got": null, "status": 0}, {"assert": "f.call().get('Spider-Man')", "eq": "Peter Parker", "got": null, "status": 0}], "status": "FAIL", "passed": 2, "total": 5}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the `n`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation", "name": "FibonacciZeroShot", "language": "python", "prompt": "<bos><start_of_turn>user\nWrite a python function fib(n) with input element number n (0 based) that returns the `n`-th element of the fibonacci sequence<end_of_turn>\n<start_of_turn>model\n", "answer": "```python\ndef fib(n):\n  \"\"\"\n  This function calculates the nth Fibonacci number.\n\n  Args:\n    n: The index of the desired Fibonacci number (0-based).\n\n  Returns:\n    The nth Fibonacci number.\n  \"\"\"\n  if n <= 1:\n    return n\n  else:\n    return fib(n-1) + fib(n-2)\n\n# Example usage\nprint(fib(0))  # Output: 0\nprint(fib(1))  # Output: 1\nprint(fib(2))  # Output: 1\nprint(fib(5))  # Output: 5\nprint(fib(10)) # Output: 55\n```\n\n", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"cache_implementation\": \"hybrid\",\n  \"eos_token_id\": [\n    1,\n    107\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-gemma-2-2b-it-fp16", "runtime": "transformers", "code": "def fib(n):\n  \"\"\"\n  This function calculates the nth Fibonacci number.\n\n  Args:\n    n: The index of the desired Fibonacci number (0-based).\n\n  Returns:\n    The nth Fibonacci number.\n  \"\"\"\n  if n <= 1:\n    return n\n  else:\n    return fib(n-1) + fib(n-2)\n\n# Example usage\nprint(fib(0))  # Output: 0\nprint(fib(1))  # Output: 1\nprint(fib(2))  # Output: 1\nprint(fib(5))  # Output: 5\nprint(fib(10)) # Output: 55", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "fib(n)", "Input": "with input element number n (0 based)", "Output": "the `n`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation", "name": "FibonacciZeroShot", "language": "javascript", "prompt": "<bos><start_of_turn>user\nWrite a javascript function fib(n) with input element number n (0 based) that returns the `n`-th element of the fibonacci sequence<end_of_turn>\n<start_of_turn>model\n", "answer": "```javascript\nfunction fib(n) {\n  if (n <= 1) {\n    return n;\n  }\n\n  return fib(n - 1) + fib(n - 2);\n}\n\n// Example usage:\nconsole.log(fib(0)); // Output: 0\nconsole.log(fib(1)); // Output: 1\nconsole.log(fib(2)); // Output: 1\nconsole.log(fib(5)); // Output: 5\nconsole.log(fib(10)); // Output: 55\n```\n\n", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"cache_implementation\": \"hybrid\",\n  \"eos_token_id\": [\n    1,\n    107\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-gemma-2-2b-it-fp16", "runtime": "transformers", "code": "function fib(n) {\n  if (n <= 1) {\n    return n;\n  }\n\n  return fib(n - 1) + fib(n - 2);\n}\n\n// Example usage:\nconsole.log(fib(0)); // Output: 0\nconsole.log(fib(1)); // Output: 1\nconsole.log(fib(2)); // Output: 1\nconsole.log(fib(5)); // Output: 5\nconsole.log(fib(10)); // Output: 55", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "potato(g)", "Input": "with input element number g (0 based)", "Output": "the `g`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation if the name has been changed", "name": "FibonacciMisnamed", "language": "python", "prompt": "<bos><start_of_turn>user\nWrite a python function potato(g) with input element number g (0 based) that returns the `g`-th element of the fibonacci sequence<end_of_turn>\n<start_of_turn>model\n", "answer": "```python\ndef potato(g):\n  \"\"\"\n  This function returns the g-th element of the Fibonacci sequence.\n\n  Args:\n    g: The index of the desired Fibonacci number (0-based).\n\n  Returns:\n    The g-th Fibonacci number.\n  \"\"\"\n  if g < 0:\n    return None  # Handle invalid input\n  elif g == 0:\n    return 0\n  elif g == 1:\n    return 1\n  else:\n    a = 0\n    b = 1\n    for i in range(2, g + 1):\n      c = a + b\n      a = b\n      b = c\n    return b\n\n# Example usage\nprint(potato(0))  # Output: 0\nprint(potato(1))  # Output: 1\nprint(potato(5))  # Output: 5\nprint(potato(10)) # Output: 55\n```\n\n", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"cache_implementation\": \"hybrid\",\n  \"eos_token_id\": [\n    1,\n    107\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-gemma-2-2b-it-fp16", "runtime": "transformers", "code": "def potato(g):\n  \"\"\"\n  This function returns the g-th element of the Fibonacci sequence.\n\n  Args:\n    g: The index of the desired Fibonacci number (0-based).\n\n  Returns:\n    The g-th Fibonacci number.\n  \"\"\"\n  if g < 0:\n    return None  # Handle invalid input\n  elif g == 0:\n    return 0\n  elif g == 1:\n    return 1\n  else:\n    a = 0\n    b = 1\n    for i in range(2, g + 1):\n      c = a + b\n      a = b\n      b = c\n    return b\n\n# Example usage\nprint(potato(0))  # Output: 0\nprint(potato(1))  # Output: 1\nprint(potato(5))  # Output: 5\nprint(potato(10)) # Output: 55", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "g", "got": "g", "status": 1}, {"assert": "f.name", "eq": "potato", "got": "potato", "status": 1}], "status": "PASS", "passed": 8, "total": 8}
{"Signature": "potato(g)", "Input": "with input element number g (0 based)", "Output": "the `g`-th element of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known relation if the name has been changed", "name": "FibonacciMisnamed", "language": "javascript", "prompt": "<bos><start_of_turn>user\nWrite a javascript function potato(g) with input element number g (0 based) that returns the `g`-th element of the fibonacci sequence<end_of_turn>\n<start_of_turn>model\n", "answer": "```javascript\nfunction potato(g) {\n  if (g < 0) {\n    return \"Invalid input. Please provide a non-negative integer.\";\n  }\n\n  if (g === 0) {\n    return 0;\n  }\n\n  if (g === 1) {\n    return 1;\n  }\n\n  let a = 0;\n  let b = 1;\n  for (let i = 2; i <= g; i++) {\n    let temp = a + b;\n    a = b;\n    b = temp;\n  }\n  return b;\n}\n\n// Example usage:\nconsole.log(potato(0)); // Output: 0\nconsole.log(potato(1)); // Output: 1\nconsole.log(potato(5)); // Output: 5\n```\n\n", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"cache_implementation\": \"hybrid\",\n  \"eos_token_id\": [\n    1,\n    107\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-gemma-2-2b-it-fp16", "runtime": "transformers", "code": "function potato(g) {\n  if (g < 0) {\n    return \"Invalid input. Please provide a non-negative integer.\";\n  }\n\n  if (g === 0) {\n    return 0;\n  }\n\n  if (g === 1) {\n    return 1;\n  }\n\n  let a = 0;\n  let b = 1;\n  for (let i = 2; i <= g; i++) {\n    let temp = a + b;\n    a = b;\n    b = temp;\n  }\n  return b;\n}\n\n// Example usage:\nconsole.log(potato(0)); // Output: 0\nconsole.log(potato(1)); // Output: 1\nconsole.log(potato(5)); // Output: 5", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(0)", "eq": 0, "got": 0, "status": 1}, {"assert": "f.call(1)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(2)", "eq": 1, "got": 1, "status": 1}, {"assert": "f.call(3)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(5)", "eq": 5, "got": 5, "status": 1}, {"assert": "f.args[0].name", "eq": "g", "got": "g", "status": 1}, {"assert": "f.name", "eq": "potato", "got": "potato", "status": 1}], "status": "PASS", "passed": 8, "total": 8}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first `n` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciListZeroShot", "language": "python", "prompt": "<bos><start_of_turn>user\nWrite a python function fib(n) with input length n that returns a list with the first `n` elements of the fibonacci sequence<end_of_turn>\n<start_of_turn>model\n", "answer": "```python\ndef fib(n):\n  \"\"\"\n  This function returns a list containing the first n elements of the Fibonacci sequence.\n\n  Args:\n    n: The number of Fibonacci numbers to generate.\n\n  Returns:\n    A list containing the first n Fibonacci numbers.\n  \"\"\"\n  if n <= 0:\n    return []\n  elif n == 1:\n    return [0]\n  else:\n    fib_list = [0, 1]\n    while len(fib_list) < n:\n      next_fib = fib_list[-1] + fib_list[-2]\n      fib_list.append(next_fib)\n    return fib_list\n\n# Example usage\nprint(fib(10))  # Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n```\n\n", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"cache_implementation\": \"hybrid\",\n  \"eos_token_id\": [\n    1,\n    107\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-gemma-2-2b-it-fp16", "runtime": "transformers", "code": "def fib(n):\n  \"\"\"\n  This function returns a list containing the first n elements of the Fibonacci sequence.\n\n  Args:\n    n: The number of Fibonacci numbers to generate.\n\n  Returns:\n    A list containing the first n Fibonacci numbers.\n  \"\"\"\n  if n <= 0:\n    return []\n  elif n == 1:\n    return [0]\n  else:\n    fib_list = [0, 1]\n    while len(fib_list) < n:\n      next_fib = fib_list[-1] + fib_list[-2]\n      fib_list.append(next_fib)\n    return fib_list\n\n# Example usage\nprint(fib(10))  # Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0], "status": 1}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1], "status": 1}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 1], "status": 1}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 1, 2, 3], "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "fib(n)", "Input": "with input length n", "Output": "a list with the first `n` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence", "name": "FibonacciListZeroShot", "language": "javascript", "prompt": "<bos><start_of_turn>user\nWrite a javascript function fib(n) with input length n that returns a list with the first `n` elements of the fibonacci sequence<end_of_turn>\n<start_of_turn>model\n", "answer": "```javascript\nfunction fib(n) {\n  if (n <= 0) {\n    return [];\n  } else if (n === 1) {\n    return [0];\n  } else {\n    const fibSequence = [0, 1];\n    for (let i = 2; i < n; i++) {\n      fibSequence.push(fibSequence[i - 1] + fibSequence[i - 2]);\n    }\n    return fibSequence;\n  }\n}\n\n// Example usage:\nconst firstN = fib(10);\nconsole.log(firstN); // Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n```\n\n", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"cache_implementation\": \"hybrid\",\n  \"eos_token_id\": [\n    1,\n    107\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-gemma-2-2b-it-fp16", "runtime": "transformers", "code": "function fib(n) {\n  if (n <= 0) {\n    return [];\n  } else if (n === 1) {\n    return [0];\n  } else {\n    const fibSequence = [0, 1];\n    for (let i = 2; i < n; i++) {\n      fibSequence.push(fibSequence[i - 1] + fibSequence[i - 2]);\n    }\n    return fibSequence;\n  }\n}\n\n// Example usage:\nconst firstN = fib(10);\nconsole.log(firstN); // Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0], "status": 1}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1], "status": 1}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 1], "status": 1}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 1, 2, 3], "status": 1}, {"assert": "f.args[0].name", "eq": "n", "got": "n", "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first `bork` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciListMisnamed", "language": "python", "prompt": "<bos><start_of_turn>user\nWrite a python function glork(bork) with input length bork that returns a list with the first `bork` elements of the fibonacci sequence<end_of_turn>\n<start_of_turn>model\n", "answer": "```python\ndef glork(bork):\n  \"\"\"\n  This function returns a list with the first 'bork' elements of the Fibonacci sequence.\n\n  Args:\n    bork: The number of Fibonacci numbers to generate.\n\n  Returns:\n    A list containing the first 'bork' Fibonacci numbers.\n  \"\"\"\n  fib_sequence = [0, 1]  # Initialize the sequence with the first two numbers\n  for i in range(2, bork):\n    next_fib = fib_sequence[i-1] + fib_sequence[i-2]  # Calculate the next Fibonacci number\n    fib_sequence.append(next_fib)  # Add the next number to the sequence\n  return fib_sequence\n\n# Example usage\nprint(glork(10))  # Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n```\n\n", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"cache_implementation\": \"hybrid\",\n  \"eos_token_id\": [\n    1,\n    107\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-gemma-2-2b-it-fp16", "runtime": "transformers", "code": "def glork(bork):\n  \"\"\"\n  This function returns a list with the first 'bork' elements of the Fibonacci sequence.\n\n  Args:\n    bork: The number of Fibonacci numbers to generate.\n\n  Returns:\n    A list containing the first 'bork' Fibonacci numbers.\n  \"\"\"\n  fib_sequence = [0, 1]  # Initialize the sequence with the first two numbers\n  for i in range(2, bork):\n    next_fib = fib_sequence[i-1] + fib_sequence[i-2]  # Calculate the next Fibonacci number\n    fib_sequence.append(next_fib)  # Add the next number to the sequence\n  return fib_sequence\n\n# Example usage\nprint(glork(10))  # Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0, 1], "status": 0}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1], "status": 1}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 1], "status": 1}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 1, 2, 3], "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "FAIL", "passed": 7, "total": 8}
{"Signature": "glork(bork)", "Input": "with input length bork", "Output": "a list with the first `bork` elements of the fibonacci sequence", "Fact": "The fibonacci sequence is defined by the boundary conditions fib(0) == 0, fib(1) == 1 and the recursive relation fib(n) == fib(n-1) + fib(n-2)", "Description": "See if the model can produce a well known sequence if the name has been changed", "name": "FibonacciListMisnamed", "language": "javascript", "prompt": "<bos><start_of_turn>user\nWrite a javascript function glork(bork) with input length bork that returns a list with the first `bork` elements of the fibonacci sequence<end_of_turn>\n<start_of_turn>model\n", "answer": "```javascript\nfunction glork(bork) {\n  // Initialize the first two Fibonacci numbers\n  let fib = [0, 1];\n\n  // Generate the Fibonacci sequence up to the given length\n  for (let i = 2; i < bork; i++) {\n    fib.push(fib[i - 1] + fib[i - 2]);\n  }\n\n  // Return the first bork elements of the sequence\n  return fib.slice(0, bork);\n}\n\n// Example usage:\nconsole.log(glork(10)); // Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n```\n\n", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"cache_implementation\": \"hybrid\",\n  \"eos_token_id\": [\n    1,\n    107\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-gemma-2-2b-it-fp16", "runtime": "transformers", "code": "function glork(bork) {\n  // Initialize the first two Fibonacci numbers\n  let fib = [0, 1];\n\n  // Generate the Fibonacci sequence up to the given length\n  for (let i = 2; i < bork; i++) {\n    fib.push(fib[i - 1] + fib[i - 2]);\n  }\n\n  // Return the first bork elements of the sequence\n  return fib.slice(0, bork);\n}\n\n// Example usage:\nconsole.log(glork(10)); // Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]", "checks": [{"assert": "len(f.args)", "eq": 1, "got": 1, "status": 1}, {"assert": "isinstance(f.call(0),list)", "eq": true, "got": true, "status": 1}, {"assert": "f.call(1)", "eq": [0], "got": [0], "status": 1}, {"assert": "f.call(2)", "eq": [0, 1], "got": [0, 1], "status": 1}, {"assert": "f.call(3)", "eq": [0, 1, 1], "got": [0, 1, 1], "status": 1}, {"assert": "f.call(5)", "eq": [0, 1, 1, 2, 3], "got": [0, 1, 1, 2, 3], "status": 1}, {"assert": "f.args[0].name", "eq": "bork", "got": "bork", "status": 1}, {"assert": "f.name", "eq": "glork", "got": "glork", "status": 1}], "status": "PASS", "passed": 8, "total": 8}
{"Signature": "substrcount(str, substr)", "Input": "with inputs `str` and `substr`", "Output": "counts the number of times the sub-string `substr` occurs in `str`", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "python", "prompt": "<bos><start_of_turn>user\nWrite a python function substrcount(str, substr) with inputs `str` and `substr` that returns counts the number of times the sub-string `substr` occurs in `str`<end_of_turn>\n<start_of_turn>model\n", "answer": "```python\ndef substrcount(str, substr):\n  \"\"\"\n  Counts the number of times the sub-string 'substr' occurs in the string 'str'.\n\n  Args:\n    str: The string to search within.\n    substr: The sub-string to count.\n\n  Returns:\n    The number of times 'substr' occurs in 'str'.\n  \"\"\"\n  count = 0\n  start = 0\n  while True:\n    start = str.find(substr, start)\n    if start == -1:\n      break\n    count += 1\n    start += len(substr)\n  return count\n\n# Example usage\nstring = \"This is a test string.\"\nsubstring = \"is\"\ncount = substrcount(string, substring)\nprint(f\"The substring '{substring}' appears {count} times in the string.\")\n```\n\n", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"cache_implementation\": \"hybrid\",\n  \"eos_token_id\": [\n    1,\n    107\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-gemma-2-2b-it-fp16", "runtime": "transformers", "code": "def substrcount(str, substr):\n  \"\"\"\n  Counts the number of times the sub-string 'substr' occurs in the string 'str'.\n\n  Args:\n    str: The string to search within.\n    substr: The sub-string to count.\n\n  Returns:\n    The number of times 'substr' occurs in 'str'.\n  \"\"\"\n  count = 0\n  start = 0\n  while True:\n    start = str.find(substr, start)\n    if start == -1:\n      break\n    count += 1\n    start += len(substr)\n  return count\n\n# Example usage\nstring = \"This is a test string.\"\nsubstring = \"is\"\ncount = substrcount(string, substring)\nprint(f\"The substring '{substring}' appears {count} times in the string.\")", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrcount", "status": 1}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 3, "status": 1}], "status": "PASS", "passed": 7, "total": 7}
{"Signature": "substrcount(str, substr)", "Input": "with inputs `str` and `substr`", "Output": "counts the number of times the sub-string `substr` occurs in `str`", "Description": "Check if the model is capable of performing basic string manipulation.", "name": "StringCountTokens", "language": "javascript", "prompt": "<bos><start_of_turn>user\nWrite a javascript function substrcount(str, substr) with inputs `str` and `substr` that returns counts the number of times the sub-string `substr` occurs in `str`<end_of_turn>\n<start_of_turn>model\n", "answer": "```javascript\nfunction substrCount(str, substr) {\n  let count = 0;\n  let i = 0;\n  while (i < str.length) {\n    if (str.substring(i, i + substr.length) === substr) {\n      count++;\n      i += substr.length;\n    } else {\n      i++;\n    }\n  }\n  return count;\n}\n```\n\n", "params": "GenerationConfig {\n  \"bos_token_id\": 2,\n  \"cache_implementation\": \"hybrid\",\n  \"eos_token_id\": [\n    1,\n    107\n  ],\n  \"max_new_tokens\": 1024,\n  \"pad_token_id\": 0\n}\n", "model": "google-gemma-2-2b-it-fp16", "runtime": "transformers", "code": "function substrCount(str, substr) {\n  let count = 0;\n  let i = 0;\n  while (i < str.length) {\n    if (str.substring(i, i + substr.length) === substr) {\n      count++;\n      i += substr.length;\n    } else {\n      i++;\n    }\n  }\n  return count;\n}", "checks": [{"assert": "len(f.args)", "eq": 2, "got": 2, "status": 1}, {"assert": "f.name", "eq": "substrcount", "got": "substrCount", "status": 0}, {"assert": "f.args[0].name", "eq": "str", "got": "str", "status": 1}, {"assert": "f.args[1].name", "eq": "substr", "got": "substr", "status": 1}, {"assert": "f.call('aaa','a')", "eq": 3, "got": 3, "status": 1}, {"assert": "f.call(\"babaab\",\"ab\")", "eq": 2, "got": 2, "status": 1}, {"assert": "f.call(\"abcabcefgabc\",\"abc\")", "eq": 3, "got": 3, "status": 1}], "status": "FAIL", "passed": 6, "total": 7}