.Checks: &Checks
    one_argument:
      assert: "len(f.args)"
      eq: 1
    returns_list:
      assert: "isinstance(f.call(0),list)"
      eq: true
    value_0:
      assert: "f.call(0)"
      eq: [0]
    value_5:
      assert: "f.call(5)"
      eq: [0, 1, 1, 2, 3]

FibonacciZeroShot:
    Request: "Write a {{language}} function to compute the fibbonaci sequence of length n."
    Checks:
        <<: *Checks
        input_name:
            assert: "f.args[0].name"
            eq: "n"

FibonacciListZeroShot:
    Request: "Write a {{language}} function that returns a list with the first n elements of the fibbonaci sequence."
    Checks:
        <<: *Checks
        input_name:
            assert: "f.args[0].name"
            eq: "n"

FibonacciMisnamed:
    Request: "Write a {{language}} function glork(bork) to compute the fibbonaci sequence of length bork."
    Checks: 
        <<: *Checks
        input_name:
            assert: "f.args[0].name"
            eq: "bork"
        func_name:
            assert: "f.name"
            eq: "glork"